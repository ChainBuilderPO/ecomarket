{"id":"99fce54138af4dc37c0f06360e341f2f","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"contracts/all/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"contracts/all/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n\nimport \"./Strings.sol\";\n\npragma solidity ^0.8.0;\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"contracts/all/EcoMarket.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\nimport \"./IERC20.sol\";\nimport \"./Pausable.sol\";\nimport \"./Ownable.sol\";\nimport \"./ReentrancyGuard.sol\";\nimport \"./ECDSA.sol\";\n\npragma solidity ^0.8.7;\n\ncontract EcoMarket is Pausable, Ownable, ReentrancyGuard {\n\n    using ECDSA for bytes32;\n\n    //Track used msgHashes to prevent replay\n    mapping(bytes => bool) public msgHashes;\n\n    mapping(address => uint256) private balances;\n\n    function redeemPaymentFromEscrow(\n        uint256 amount,\n        uint256 nonce,\n        address company,\n        bytes memory signature\n    ) public whenNotPaused nonReentrant {\n        require(address(this).balance > amount, \"Insufficient balance!\");\n        require(msg.sender != company, \"Not allowed!\");\n        require(msgHashes[signature] == false, \"Invalid!\");\n\n        bytes32 msgHash = _getHash(amount, nonce, company);\n\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\n        address signer = VerifyTRXMessage(msgHash, v, r, s);\n        \n        require(signer == company, \"Unauthorized!\");\n\n        msgHashes[signature] = true;\n        balances[company] -= amount;\n\n        require(payable(msg.sender).send(amount), \"Error\");\n    }\n\n    function addToEscrow() public payable whenNotPaused {\n        require(msg.value > 0, \"Invalid amount\");\n\n        balances[msg.sender] += msg.value;\n    }\n\n    function removeFromEscrow(uint256 amount) public whenNotPaused {\n        require(amount > balances[msg.sender], \"Invalid amount\");\n        require(address(this).balance > amount, \"Insufficient balance!\");\n\n        balances[msg.sender] -= amount;\n\n        require(payable(msg.sender).send(amount), \"Error\");\n    }\n\n    function _getHash(uint256 amount, uint256 nonce, address company) private view returns (bytes32) {\n        return keccak256(abi.encodePacked(msg.sender, amount, nonce, company));\n    }\n\n    function VerifyTRXMessage(bytes32 _hashedMessage, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\n        bytes memory prefix = \"\\x19TRON Signed Message:\\n32\";\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessage));\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\n        return signer;\n    }\n    \n    function splitSignature(bytes memory sig) public pure returns (bytes32 r, bytes32 s, uint8 v) {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        return (r, s, v);\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function withdrawTRX(\n        uint256 amount,\n        address payable to\n    ) public onlyOwner whenNotPaused nonReentrant {\n        require(amount > 0, \"EcoMarket: Invalid amount\");\n        require(to.send(amount), \"EcoMarket: Not enough balance\");\n    }\n\n    function withdrawTRC20(\n        address tokenAdress,\n        uint256 amount,\n        address to\n    ) public onlyOwner whenNotPaused nonReentrant {\n        require(amount > 0, \"EcoMarket: Invalid amount\");\n            IERC20(tokenAdress).transfer(to, amount);\n    }\n\n    receive() external payable {}\n}"},"contracts/all/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"contracts/all/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"contracts/all/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"contracts/all/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}"},"contracts/all/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"contracts/all/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"contracts/all/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n\nimport \"./Math.sol\";\nimport \"./SignedMath.sol\";\n\npragma solidity ^0.8.0;\n\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/all/Context.sol":{"ast":{"absolutePath":"contracts/all/Context.sol","exportedSymbols":{"Context":[21]},"id":22,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:496:0","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":21,"linearizedBaseContracts":[21],"name":"Context","nameLocation":"573:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":10,"nodeType":"Block","src":"649:34:0","statements":[{"expression":{"expression":{"id":7,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"666:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"666:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":6,"id":9,"nodeType":"Return","src":"659:17:0"}]},"id":11,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"596:10:0","nodeType":"FunctionDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"606:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11,"src":"640:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:9:0"},"scope":21,"src":"587:96:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":19,"nodeType":"Block","src":"756:32:0","statements":[{"expression":{"expression":{"id":16,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"773:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":17,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"773:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":15,"id":18,"nodeType":"Return","src":"766:15:0"}]},"id":20,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"698:8:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"706:2:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":20,"src":"740:14:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"740:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"739:16:0"},"scope":21,"src":"689:99:0","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":22,"src":"555:235:0","usedErrors":[]}],"src":"33:758:0"},"id":0},"contracts/all/ECDSA.sol":{"ast":{"absolutePath":"contracts/all/ECDSA.sol","exportedSymbols":{"ECDSA":[386],"Math":[1695],"SignedMath":[2082],"Strings":[2310]},"id":387,"license":"MIT","nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/all/Strings.sol","file":"./Strings.sol","id":23,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":387,"sourceUnit":2311,"src":"33:23:1","symbolAliases":[],"unitAlias":""},{"id":24,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"58:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":386,"linearizedBaseContracts":[386],"name":"ECDSA","nameLocation":"91:5:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":30,"members":[{"id":25,"name":"NoError","nameLocation":"131:7:1","nodeType":"EnumValue","src":"131:7:1"},{"id":26,"name":"InvalidSignature","nameLocation":"148:16:1","nodeType":"EnumValue","src":"148:16:1"},{"id":27,"name":"InvalidSignatureLength","nameLocation":"174:22:1","nodeType":"EnumValue","src":"174:22:1"},{"id":28,"name":"InvalidSignatureS","nameLocation":"206:17:1","nodeType":"EnumValue","src":"206:17:1"},{"id":29,"name":"InvalidSignatureV","nameLocation":"233:17:1","nodeType":"EnumValue","src":"233:17:1"}],"name":"RecoverError","nameLocation":"108:12:1","nodeType":"EnumDefinition","src":"103:175:1"},{"body":{"id":73,"nodeType":"Block","src":"338:457:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":36,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"352:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":37,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"361:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":25,"src":"361:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"src":"352:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":42,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"448:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":43,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"457:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":44,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":26,"src":"457:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"src":"448:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":51,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"557:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":52,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"566:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":27,"src":"566:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"src":"557:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":60,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"679:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":61,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"688:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":28,"src":"688:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"src":"679:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":69,"nodeType":"IfStatement","src":"675:114:1","trueBody":{"id":68,"nodeType":"Block","src":"720:69:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"741:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":64,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"734:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"734:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67,"nodeType":"ExpressionStatement","src":"734:44:1"}]}},"id":70,"nodeType":"IfStatement","src":"553:236:1","trueBody":{"id":59,"nodeType":"Block","src":"603:66:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":56,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"624:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":55,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"617:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"617:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"ExpressionStatement","src":"617:41:1"}]}},"id":71,"nodeType":"IfStatement","src":"444:345:1","trueBody":{"id":50,"nodeType":"Block","src":"488:59:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"509:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":46,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"502:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"502:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"502:34:1"}]}},"id":72,"nodeType":"IfStatement","src":"348:441:1","trueBody":{"id":41,"nodeType":"Block","src":"383:55:1","statements":[{"functionReturnParameters":35,"id":40,"nodeType":"Return","src":"397:7:1"}]}}]},"id":74,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"293:11:1","nodeType":"FunctionDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"error","nameLocation":"318:5:1","nodeType":"VariableDeclaration","scope":74,"src":"305:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":32,"nodeType":"UserDefinedTypeName","pathNode":{"id":31,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"305:12:1"},"referencedDeclaration":30,"src":"305:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"304:20:1"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[],"src":"338:0:1"},"scope":386,"src":"284:511:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":119,"nodeType":"Block","src":"1963:626:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":87,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"1977:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1977:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":89,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1997:2:1","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"1977:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":117,"nodeType":"Block","src":"2502:81:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2532:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2524:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"2524:7:1","typeDescriptions":{}}},"id":112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2524:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":113,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2536:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":27,"src":"2536:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"id":115,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2523:49:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":86,"id":116,"nodeType":"Return","src":"2516:56:1"}]},"id":118,"nodeType":"IfStatement","src":"1973:610:1","trueBody":{"id":108,"nodeType":"Block","src":"2001:495:1","statements":[{"assignments":[92],"declarations":[{"constant":false,"id":92,"mutability":"mutable","name":"r","nameLocation":"2023:1:1","nodeType":"VariableDeclaration","scope":108,"src":"2015:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":91,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2015:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":93,"nodeType":"VariableDeclarationStatement","src":"2015:9:1"},{"assignments":[95],"declarations":[{"constant":false,"id":95,"mutability":"mutable","name":"s","nameLocation":"2046:1:1","nodeType":"VariableDeclaration","scope":108,"src":"2038:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":94,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2038:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":96,"nodeType":"VariableDeclarationStatement","src":"2038:9:1"},{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"v","nameLocation":"2067:1:1","nodeType":"VariableDeclaration","scope":108,"src":"2061:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":97,"name":"uint8","nodeType":"ElementaryTypeName","src":"2061:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":99,"nodeType":"VariableDeclarationStatement","src":"2061:7:1"},{"AST":{"nodeType":"YulBlock","src":"2269:171:1","statements":[{"nodeType":"YulAssignment","src":"2287:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2302:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2313:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2298:3:1"},"nodeType":"YulFunctionCall","src":"2298:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2292:5:1"},"nodeType":"YulFunctionCall","src":"2292:27:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2287:1:1"}]},{"nodeType":"YulAssignment","src":"2336:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2351:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2362:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:1"},"nodeType":"YulFunctionCall","src":"2347:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2341:5:1"},"nodeType":"YulFunctionCall","src":"2341:27:1"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2336:1:1"}]},{"nodeType":"YulAssignment","src":"2385:41:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:1:1","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2408:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2419:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2404:3:1"},"nodeType":"YulFunctionCall","src":"2404:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2398:5:1"},"nodeType":"YulFunctionCall","src":"2398:27:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2390:4:1"},"nodeType":"YulFunctionCall","src":"2390:36:1"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2385:1:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":92,"isOffset":false,"isSlot":false,"src":"2287:1:1","valueSize":1},{"declaration":95,"isOffset":false,"isSlot":false,"src":"2336:1:1","valueSize":1},{"declaration":79,"isOffset":false,"isSlot":false,"src":"2302:9:1","valueSize":1},{"declaration":79,"isOffset":false,"isSlot":false,"src":"2351:9:1","valueSize":1},{"declaration":79,"isOffset":false,"isSlot":false,"src":"2408:9:1","valueSize":1},{"declaration":98,"isOffset":false,"isSlot":false,"src":"2385:1:1","valueSize":1}],"id":100,"nodeType":"InlineAssembly","src":"2260:180:1"},{"expression":{"arguments":[{"id":102,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2471:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":103,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2477:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":104,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"2480:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":105,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"2483:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":101,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[120,194,288],"referencedDeclaration":288,"src":"2460:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":86,"id":107,"nodeType":"Return","src":"2453:32:1"}]}}]},"documentation":{"id":75,"nodeType":"StructuredDocumentation","src":"801:1053:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":120,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"1868:10:1","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"hash","nameLocation":"1887:4:1","nodeType":"VariableDeclaration","scope":120,"src":"1879:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1879:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"signature","nameLocation":"1906:9:1","nodeType":"VariableDeclaration","scope":120,"src":"1893:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":78,"name":"bytes","nodeType":"ElementaryTypeName","src":"1893:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1878:38:1"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":120,"src":"1940:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"1940:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":85,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":120,"src":"1949:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":84,"nodeType":"UserDefinedTypeName","pathNode":{"id":83,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"1949:12:1"},"referencedDeclaration":30,"src":"1949:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"1939:23:1"},"scope":386,"src":"1859:730:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":146,"nodeType":"Block","src":"3462:140:1","statements":[{"assignments":[131,134],"declarations":[{"constant":false,"id":131,"mutability":"mutable","name":"recovered","nameLocation":"3481:9:1","nodeType":"VariableDeclaration","scope":146,"src":"3473:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"3473:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"error","nameLocation":"3505:5:1","nodeType":"VariableDeclaration","scope":146,"src":"3492:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":133,"nodeType":"UserDefinedTypeName","pathNode":{"id":132,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"3492:12:1"},"referencedDeclaration":30,"src":"3492:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":139,"initialValue":{"arguments":[{"id":136,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3525:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":137,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"3531:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":135,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[120,194,288],"referencedDeclaration":120,"src":"3514:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3514:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3472:69:1"},{"expression":{"arguments":[{"id":141,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"3563:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}],"id":140,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"3551:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$30_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3551:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"ExpressionStatement","src":"3551:18:1"},{"expression":{"id":144,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3586:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":129,"id":145,"nodeType":"Return","src":"3579:16:1"}]},"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"2595:775:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":147,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3384:7:1","nodeType":"FunctionDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"hash","nameLocation":"3400:4:1","nodeType":"VariableDeclaration","scope":147,"src":"3392:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3392:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"signature","nameLocation":"3419:9:1","nodeType":"VariableDeclaration","scope":147,"src":"3406:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":124,"name":"bytes","nodeType":"ElementaryTypeName","src":"3406:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3391:38:1"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":147,"src":"3453:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":127,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3452:9:1"},"scope":386,"src":"3375:227:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":193,"nodeType":"Block","src":"3959:203:1","statements":[{"assignments":[163],"declarations":[{"constant":false,"id":163,"mutability":"mutable","name":"s","nameLocation":"3977:1:1","nodeType":"VariableDeclaration","scope":193,"src":"3969:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3969:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":170,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":164,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"3981:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3994:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3986:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3986:7:1","typeDescriptions":{}}},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3986:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3981:80:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3969:92:1"},{"assignments":[172],"declarations":[{"constant":false,"id":172,"mutability":"mutable","name":"v","nameLocation":"4077:1:1","nodeType":"VariableDeclaration","scope":193,"src":"4071:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":171,"name":"uint8","nodeType":"ElementaryTypeName","src":"4071:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":185,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":177,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"4096:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":176,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4088:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"4088:7:1","typeDescriptions":{}}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4088:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4103:3:1","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4088:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4087:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4110:2:1","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4087:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4081:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":173,"name":"uint8","nodeType":"ElementaryTypeName","src":"4081:5:1","typeDescriptions":{}}},"id":184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4081:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4071:42:1"},{"expression":{"arguments":[{"id":187,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"4141:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":188,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"4147:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":189,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4150:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":190,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4153:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":186,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[120,194,288],"referencedDeclaration":288,"src":"4130:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4130:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":161,"id":192,"nodeType":"Return","src":"4123:32:1"}]},"documentation":{"id":148,"nodeType":"StructuredDocumentation","src":"3608:243:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":194,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"3865:10:1","nodeType":"FunctionDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"hash","nameLocation":"3884:4:1","nodeType":"VariableDeclaration","scope":194,"src":"3876:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3876:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":152,"mutability":"mutable","name":"r","nameLocation":"3898:1:1","nodeType":"VariableDeclaration","scope":194,"src":"3890:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3890:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":154,"mutability":"mutable","name":"vs","nameLocation":"3909:2:1","nodeType":"VariableDeclaration","scope":194,"src":"3901:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3901:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3875:37:1"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":194,"src":"3936:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":194,"src":"3945:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"3945:12:1"},"referencedDeclaration":30,"src":"3945:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"3935:23:1"},"scope":386,"src":"3856:306:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":223,"nodeType":"Block","src":"4413:136:1","statements":[{"assignments":[207,210],"declarations":[{"constant":false,"id":207,"mutability":"mutable","name":"recovered","nameLocation":"4432:9:1","nodeType":"VariableDeclaration","scope":223,"src":"4424:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"4424:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"error","nameLocation":"4456:5:1","nodeType":"VariableDeclaration","scope":223,"src":"4443:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":209,"nodeType":"UserDefinedTypeName","pathNode":{"id":208,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"4443:12:1"},"referencedDeclaration":30,"src":"4443:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":216,"initialValue":{"arguments":[{"id":212,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"4476:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":213,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4482:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":214,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"4485:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":211,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[120,194,288],"referencedDeclaration":194,"src":"4465:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4465:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4423:65:1"},{"expression":{"arguments":[{"id":218,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"4510:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}],"id":217,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"4498:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$30_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4498:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":220,"nodeType":"ExpressionStatement","src":"4498:18:1"},{"expression":{"id":221,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":207,"src":"4533:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":205,"id":222,"nodeType":"Return","src":"4526:16:1"}]},"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"4168:154:1","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":224,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4336:7:1","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"hash","nameLocation":"4352:4:1","nodeType":"VariableDeclaration","scope":224,"src":"4344:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4344:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"r","nameLocation":"4366:1:1","nodeType":"VariableDeclaration","scope":224,"src":"4358:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4358:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":201,"mutability":"mutable","name":"vs","nameLocation":"4377:2:1","nodeType":"VariableDeclaration","scope":224,"src":"4369:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":200,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4369:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4343:37:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"4404:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"4404:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4403:9:1"},"scope":386,"src":"4327:222:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":287,"nodeType":"Block","src":"4834:1345:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"5730:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5722:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"5722:7:1","typeDescriptions":{}}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5722:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5735:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"5722:79:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":256,"nodeType":"IfStatement","src":"5718:161:1","trueBody":{"id":255,"nodeType":"Block","src":"5803:76:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5833:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5825:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"5825:7:1","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5825:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":251,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"5837:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":28,"src":"5837:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"id":253,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5824:44:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":240,"id":254,"nodeType":"Return","src":"5817:51:1"}]}},{"assignments":[258],"declarations":[{"constant":false,"id":258,"mutability":"mutable","name":"signer","nameLocation":"5981:6:1","nodeType":"VariableDeclaration","scope":287,"src":"5973:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"5973:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"arguments":[{"id":260,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"6000:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"6006:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":262,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"6009:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"6012:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":259,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"5990:9:1","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5990:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5973:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"6028:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6046:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6038:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":267,"name":"address","nodeType":"ElementaryTypeName","src":"6038:7:1","typeDescriptions":{}}},"id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6038:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6028:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"6024:101:1","trueBody":{"id":280,"nodeType":"Block","src":"6050:75:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6080:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6072:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"6072:7:1","typeDescriptions":{}}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6072:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":276,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6084:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":26,"src":"6084:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"id":278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6071:43:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":240,"id":279,"nodeType":"Return","src":"6064:50:1"}]}},{"expression":{"components":[{"id":282,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"6143:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":283,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6151:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$30_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":25,"src":"6151:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"id":285,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6142:30:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":240,"id":286,"nodeType":"Return","src":"6135:37:1"}]},"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"4555:163:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":288,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4732:10:1","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"hash","nameLocation":"4751:4:1","nodeType":"VariableDeclaration","scope":288,"src":"4743:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4743:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"v","nameLocation":"4763:1:1","nodeType":"VariableDeclaration","scope":288,"src":"4757:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":228,"name":"uint8","nodeType":"ElementaryTypeName","src":"4757:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"r","nameLocation":"4774:1:1","nodeType":"VariableDeclaration","scope":288,"src":"4766:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4766:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"s","nameLocation":"4785:1:1","nodeType":"VariableDeclaration","scope":288,"src":"4777:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4777:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4742:45:1"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":288,"src":"4811:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":235,"name":"address","nodeType":"ElementaryTypeName","src":"4811:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":288,"src":"4820:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"4820:12:1"},"referencedDeclaration":30,"src":"4820:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4810:23:1"},"scope":386,"src":"4723:1456:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":320,"nodeType":"Block","src":"6406:138:1","statements":[{"assignments":[303,306],"declarations":[{"constant":false,"id":303,"mutability":"mutable","name":"recovered","nameLocation":"6425:9:1","nodeType":"VariableDeclaration","scope":320,"src":"6417:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":302,"name":"address","nodeType":"ElementaryTypeName","src":"6417:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"error","nameLocation":"6449:5:1","nodeType":"VariableDeclaration","scope":320,"src":"6436:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":305,"nodeType":"UserDefinedTypeName","pathNode":{"id":304,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":30,"src":"6436:12:1"},"referencedDeclaration":30,"src":"6436:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":313,"initialValue":{"arguments":[{"id":308,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"6469:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":309,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"6475:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":310,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"6478:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":311,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":297,"src":"6481:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":307,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[120,194,288],"referencedDeclaration":288,"src":"6458:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6458:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$30_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6416:67:1"},{"expression":{"arguments":[{"id":315,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"6505:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$30","typeString":"enum ECDSA.RecoverError"}],"id":314,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"6493:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$30_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6493:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":317,"nodeType":"ExpressionStatement","src":"6493:18:1"},{"expression":{"id":318,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":303,"src":"6528:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":301,"id":319,"nodeType":"Return","src":"6521:16:1"}]},"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"6185:122:1","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":321,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6321:7:1","nodeType":"FunctionDefinition","parameters":{"id":298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"hash","nameLocation":"6337:4:1","nodeType":"VariableDeclaration","scope":321,"src":"6329:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6329:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":293,"mutability":"mutable","name":"v","nameLocation":"6349:1:1","nodeType":"VariableDeclaration","scope":321,"src":"6343:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":292,"name":"uint8","nodeType":"ElementaryTypeName","src":"6343:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"r","nameLocation":"6360:1:1","nodeType":"VariableDeclaration","scope":321,"src":"6352:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6352:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"s","nameLocation":"6371:1:1","nodeType":"VariableDeclaration","scope":321,"src":"6363:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":296,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6363:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6328:45:1"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":321,"src":"6397:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"6397:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6396:9:1"},"scope":386,"src":"6312:232:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":330,"nodeType":"Block","src":"6920:310:1","statements":[{"AST":{"nodeType":"YulBlock","src":"7076:148:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7097:4:1","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7103:34:1","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7090:6:1"},"nodeType":"YulFunctionCall","src":"7090:48:1"},"nodeType":"YulExpressionStatement","src":"7090:48:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7158:4:1","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7164:4:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7151:6:1"},"nodeType":"YulFunctionCall","src":"7151:18:1"},"nodeType":"YulExpressionStatement","src":"7151:18:1"},{"nodeType":"YulAssignment","src":"7182:32:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7203:4:1","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7209:4:1","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7193:9:1"},"nodeType":"YulFunctionCall","src":"7193:21:1"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7182:7:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":324,"isOffset":false,"isSlot":false,"src":"7164:4:1","valueSize":1},{"declaration":327,"isOffset":false,"isSlot":false,"src":"7182:7:1","valueSize":1}],"id":329,"nodeType":"InlineAssembly","src":"7067:157:1"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"6550:279:1","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":331,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"6843:22:1","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"mutability":"mutable","name":"hash","nameLocation":"6874:4:1","nodeType":"VariableDeclaration","scope":331,"src":"6866:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6866:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6865:14:1"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"message","nameLocation":"6911:7:1","nodeType":"VariableDeclaration","scope":331,"src":"6903:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6903:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6902:17:1"},"scope":386,"src":"6834:396:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":352,"nodeType":"Block","src":"7595:116:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7639:32:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":345,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"7690:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7690:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":343,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2310,"src":"7673:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2310_$","typeString":"type(library Strings)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2140,"src":"7673:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7673:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":348,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"7701:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":340,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7622:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7622:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7622:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":339,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7612:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7612:92:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":338,"id":351,"nodeType":"Return","src":"7605:99:1"}]},"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"7236:274:1","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":353,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7524:22:1","nodeType":"FunctionDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"mutability":"mutable","name":"s","nameLocation":"7560:1:1","nodeType":"VariableDeclaration","scope":353,"src":"7547:14:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":333,"name":"bytes","nodeType":"ElementaryTypeName","src":"7547:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7546:16:1"},"returnParameters":{"id":338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":353,"src":"7586:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7586:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7585:9:1"},"scope":386,"src":"7515:196:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":364,"nodeType":"Block","src":"8157:290:1","statements":[{"AST":{"nodeType":"YulBlock","src":"8219:222:1","statements":[{"nodeType":"YulVariableDeclaration","src":"8233:22:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8250:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8244:5:1"},"nodeType":"YulFunctionCall","src":"8244:11:1"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8237:3:1","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8275:3:1"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8280:10:1","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8268:6:1"},"nodeType":"YulFunctionCall","src":"8268:23:1"},"nodeType":"YulExpressionStatement","src":"8268:23:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8315:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8320:4:1","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8311:3:1"},"nodeType":"YulFunctionCall","src":"8311:14:1"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8327:15:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8304:6:1"},"nodeType":"YulFunctionCall","src":"8304:39:1"},"nodeType":"YulExpressionStatement","src":"8304:39:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8367:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8372:4:1","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8363:3:1"},"nodeType":"YulFunctionCall","src":"8363:14:1"},{"name":"structHash","nodeType":"YulIdentifier","src":"8379:10:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8356:6:1"},"nodeType":"YulFunctionCall","src":"8356:34:1"},"nodeType":"YulExpressionStatement","src":"8356:34:1"},{"nodeType":"YulAssignment","src":"8403:28:1","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8421:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"8426:4:1","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8411:9:1"},"nodeType":"YulFunctionCall","src":"8411:20:1"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8403:4:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":361,"isOffset":false,"isSlot":false,"src":"8403:4:1","valueSize":1},{"declaration":356,"isOffset":false,"isSlot":false,"src":"8327:15:1","valueSize":1},{"declaration":358,"isOffset":false,"isSlot":false,"src":"8379:10:1","valueSize":1}],"id":363,"nodeType":"InlineAssembly","src":"8210:231:1"}]},"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"7717:328:1","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":365,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8059:15:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":356,"mutability":"mutable","name":"domainSeparator","nameLocation":"8083:15:1","nodeType":"VariableDeclaration","scope":365,"src":"8075:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8075:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":358,"mutability":"mutable","name":"structHash","nameLocation":"8108:10:1","nodeType":"VariableDeclaration","scope":365,"src":"8100:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8100:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8074:45:1"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"data","nameLocation":"8151:4:1","nodeType":"VariableDeclaration","scope":365,"src":"8143:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8143:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8142:14:1"},"scope":386,"src":"8050:397:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":384,"nodeType":"Block","src":"8762:80:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8806:10:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":379,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"8818:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":380,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"8829:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":376,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8789:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"8789:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8789:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":375,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8779:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8779:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":374,"id":383,"nodeType":"Return","src":"8772:63:1"}]},"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"8453:193:1","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":385,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8660:31:1","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"validator","nameLocation":"8700:9:1","nodeType":"VariableDeclaration","scope":385,"src":"8692:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"data","nameLocation":"8724:4:1","nodeType":"VariableDeclaration","scope":385,"src":"8711:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":369,"name":"bytes","nodeType":"ElementaryTypeName","src":"8711:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8691:38:1"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":385,"src":"8753:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":372,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8753:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8752:9:1"},"scope":386,"src":"8651:191:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":387,"src":"83:8761:1","usedErrors":[]}],"src":"33:8812:1"},"id":1},"contracts/all/EcoMarket.sol":{"ast":{"absolutePath":"contracts/all/EcoMarket.sol","exportedSymbols":{"Context":[21],"ECDSA":[386],"EcoMarket":[753],"IERC20":[830],"Math":[1695],"Ownable":[1807],"Pausable":[1914],"ReentrancyGuard":[1978],"SignedMath":[2082],"Strings":[2310]},"id":754,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/all/IERC20.sol","file":"./IERC20.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":831,"src":"37:22:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/all/Pausable.sol","file":"./Pausable.sol","id":389,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":1915,"src":"60:24:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/all/Ownable.sol","file":"./Ownable.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":1808,"src":"85:23:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/all/ReentrancyGuard.sol","file":"./ReentrancyGuard.sol","id":391,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":1979,"src":"109:31:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/all/ECDSA.sol","file":"./ECDSA.sol","id":392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":754,"sourceUnit":387,"src":"141:21:2","symbolAliases":[],"unitAlias":""},{"id":393,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"164:23:2"},{"abstract":false,"baseContracts":[{"baseName":{"id":394,"name":"Pausable","nodeType":"IdentifierPath","referencedDeclaration":1914,"src":"211:8:2"},"id":395,"nodeType":"InheritanceSpecifier","src":"211:8:2"},{"baseName":{"id":396,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":1807,"src":"221:7:2"},"id":397,"nodeType":"InheritanceSpecifier","src":"221:7:2"},{"baseName":{"id":398,"name":"ReentrancyGuard","nodeType":"IdentifierPath","referencedDeclaration":1978,"src":"230:15:2"},"id":399,"nodeType":"InheritanceSpecifier","src":"230:15:2"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":753,"linearizedBaseContracts":[753,1978,1807,1914,21],"name":"EcoMarket","nameLocation":"198:9:2","nodeType":"ContractDefinition","nodes":[{"id":402,"libraryName":{"id":400,"name":"ECDSA","nodeType":"IdentifierPath","referencedDeclaration":386,"src":"259:5:2"},"nodeType":"UsingForDirective","src":"253:24:2","typeName":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"269:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":false,"functionSelector":"a4af9d61","id":406,"mutability":"mutable","name":"msgHashes","nameLocation":"358:9:2","nodeType":"VariableDeclaration","scope":753,"src":"328:39:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_bool_$","typeString":"mapping(bytes => bool)"},"typeName":{"id":405,"keyType":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"336:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"nodeType":"Mapping","src":"328:22:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_bool_$","typeString":"mapping(bytes => bool)"},"valueType":{"id":404,"name":"bool","nodeType":"ElementaryTypeName","src":"345:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"id":410,"mutability":"mutable","name":"balances","nameLocation":"410:8:2","nodeType":"VariableDeclaration","scope":753,"src":"374:44:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":409,"keyType":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"374:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":511,"nodeType":"Block","src":"602:587:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":428,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"628:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EcoMarket_$753","typeString":"contract EcoMarket"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EcoMarket_$753","typeString":"contract EcoMarket"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"620:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"620:7:2","typeDescriptions":{}}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"620:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"620:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":431,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"644:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"620:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e636521","id":433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"652:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","typeString":"literal_string \"Insufficient balance!\""},"value":"Insufficient balance!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","typeString":"literal_string \"Insufficient balance!\""}],"id":425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"612:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":435,"nodeType":"ExpressionStatement","src":"612:64:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":437,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"694:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"694:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":439,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"708:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"694:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420616c6c6f77656421","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"717:14:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127","typeString":"literal_string \"Not allowed!\""},"value":"Not allowed!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127","typeString":"literal_string \"Not allowed!\""}],"id":436,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"686:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"686:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"ExpressionStatement","src":"686:46:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":445,"name":"msgHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"750:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_bool_$","typeString":"mapping(bytes memory => bool)"}},"id":447,"indexExpression":{"id":446,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"760:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"750:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"774:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"750:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696421","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"781:10:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87","typeString":"literal_string \"Invalid!\""},"value":"Invalid!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87","typeString":"literal_string \"Invalid!\""}],"id":444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"742:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"742:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":452,"nodeType":"ExpressionStatement","src":"742:50:2"},{"assignments":[454],"declarations":[{"constant":false,"id":454,"mutability":"mutable","name":"msgHash","nameLocation":"811:7:2","nodeType":"VariableDeclaration","scope":511,"src":"803:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"803:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":460,"initialValue":{"arguments":[{"id":456,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"830:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":457,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"838:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":458,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"845:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":455,"name":"_getHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":605,"src":"821:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_address_$returns$_t_bytes32_$","typeString":"function (uint256,uint256,address) view returns (bytes32)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"821:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"803:50:2"},{"assignments":[462,464,466],"declarations":[{"constant":false,"id":462,"mutability":"mutable","name":"r","nameLocation":"873:1:2","nodeType":"VariableDeclaration","scope":511,"src":"865:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":461,"name":"bytes32","nodeType":"ElementaryTypeName","src":"865:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"s","nameLocation":"884:1:2","nodeType":"VariableDeclaration","scope":511,"src":"876:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"876:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"v","nameLocation":"893:1:2","nodeType":"VariableDeclaration","scope":511,"src":"887:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":465,"name":"uint8","nodeType":"ElementaryTypeName","src":"887:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":470,"initialValue":{"arguments":[{"id":468,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"913:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":467,"name":"splitSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"898:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$_t_bytes32_$_t_uint8_$","typeString":"function (bytes memory) pure returns (bytes32,bytes32,uint8)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"898:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$","typeString":"tuple(bytes32,bytes32,uint8)"}},"nodeType":"VariableDeclarationStatement","src":"864:59:2"},{"assignments":[472],"declarations":[{"constant":false,"id":472,"mutability":"mutable","name":"signer","nameLocation":"941:6:2","nodeType":"VariableDeclaration","scope":511,"src":"933:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":471,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":479,"initialValue":{"arguments":[{"id":474,"name":"msgHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"967:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":475,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"976:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":476,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"979:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"982:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":473,"name":"VerifyTRXMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"950:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"950:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"933:51:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":481,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"1011:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":482,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1021:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1011:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a656421","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1030:15:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b","typeString":"literal_string \"Unauthorized!\""},"value":"Unauthorized!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b","typeString":"literal_string \"Unauthorized!\""}],"id":480,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1003:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1003:43:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":486,"nodeType":"ExpressionStatement","src":"1003:43:2"},{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":487,"name":"msgHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"1057:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes_memory_ptr_$_t_bool_$","typeString":"mapping(bytes memory => bool)"}},"id":489,"indexExpression":{"id":488,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1067:9:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1057:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1080:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1057:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":492,"nodeType":"ExpressionStatement","src":"1057:27:2"},{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":493,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1094:8:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":495,"indexExpression":{"id":494,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1103:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1094:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":496,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1115:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1094:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":498,"nodeType":"ExpressionStatement","src":"1094:27:2"},{"expression":{"arguments":[{"arguments":[{"id":506,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1165:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1148:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1148:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1140:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"1140:8:2","stateMutability":"payable","typeDescriptions":{}}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1140:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"send","nodeType":"MemberAccess","src":"1140:24:2","typeDescriptions":{"typeIdentifier":"t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1140:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4572726f72","id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","typeString":"literal_string \"Error\""},"value":"Error"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","typeString":"literal_string \"Error\""}],"id":499,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1132:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1132:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":510,"nodeType":"ExpressionStatement","src":"1132:50:2"}]},"functionSelector":"d3259a3c","id":512,"implemented":true,"kind":"function","modifiers":[{"id":421,"kind":"modifierInvocation","modifierName":{"id":420,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"575:13:2"},"nodeType":"ModifierInvocation","src":"575:13:2"},{"id":423,"kind":"modifierInvocation","modifierName":{"id":422,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1943,"src":"589:12:2"},"nodeType":"ModifierInvocation","src":"589:12:2"}],"name":"redeemPaymentFromEscrow","nameLocation":"434:23:2","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"amount","nameLocation":"475:6:2","nodeType":"VariableDeclaration","scope":512,"src":"467:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":411,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"nonce","nameLocation":"499:5:2","nodeType":"VariableDeclaration","scope":512,"src":"491:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"491:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"company","nameLocation":"522:7:2","nodeType":"VariableDeclaration","scope":512,"src":"514:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"514:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"signature","nameLocation":"552:9:2","nodeType":"VariableDeclaration","scope":512,"src":"539:22:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":417,"name":"bytes","nodeType":"ElementaryTypeName","src":"539:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"457:110:2"},"returnParameters":{"id":424,"nodeType":"ParameterList","parameters":[],"src":"602:0:2"},"scope":753,"src":"425:764:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":533,"nodeType":"Block","src":"1247:101:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":518,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1265:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1265:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1277:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1265:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420616d6f756e74","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1280:16:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","typeString":"literal_string \"Invalid amount\""},"value":"Invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","typeString":"literal_string \"Invalid amount\""}],"id":517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1257:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1257:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":524,"nodeType":"ExpressionStatement","src":"1257:40:2"},{"expression":{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":525,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1308:8:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":528,"indexExpression":{"expression":{"id":526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1317:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1317:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1308:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":529,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1332:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1332:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1308:33:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":532,"nodeType":"ExpressionStatement","src":"1308:33:2"}]},"functionSelector":"6f3c00ff","id":534,"implemented":true,"kind":"function","modifiers":[{"id":515,"kind":"modifierInvocation","modifierName":{"id":514,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"1233:13:2"},"nodeType":"ModifierInvocation","src":"1233:13:2"}],"name":"addToEscrow","nameLocation":"1204:11:2","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"1215:2:2"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[],"src":"1247:0:2"},"scope":753,"src":"1195:153:2","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":581,"nodeType":"Block","src":"1417:249:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":542,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1435:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"id":543,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1444:8:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":546,"indexExpression":{"expression":{"id":544,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1453:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1453:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1444:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1435:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420616d6f756e74","id":548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1466:16:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","typeString":"literal_string \"Invalid amount\""},"value":"Invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","typeString":"literal_string \"Invalid amount\""}],"id":541,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1427:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1427:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"1427:56:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":554,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1509:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_EcoMarket_$753","typeString":"contract EcoMarket"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EcoMarket_$753","typeString":"contract EcoMarket"}],"id":553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1501:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":552,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:2","typeDescriptions":{}}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1501:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"1501:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":557,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1525:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1501:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e636521","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1533:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","typeString":"literal_string \"Insufficient balance!\""},"value":"Insufficient balance!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","typeString":"literal_string \"Insufficient balance!\""}],"id":551,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1493:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1493:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":561,"nodeType":"ExpressionStatement","src":"1493:64:2"},{"expression":{"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":562,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1568:8:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":565,"indexExpression":{"expression":{"id":563,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1577:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1577:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1568:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":566,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1592:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1568:30:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":568,"nodeType":"ExpressionStatement","src":"1568:30:2"},{"expression":{"arguments":[{"arguments":[{"id":576,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"1642:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":572,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1625:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1625:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1617:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"1617:8:2","stateMutability":"payable","typeDescriptions":{}}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1617:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"send","nodeType":"MemberAccess","src":"1617:24:2","typeDescriptions":{"typeIdentifier":"t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1617:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4572726f72","id":578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1651:7:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","typeString":"literal_string \"Error\""},"value":"Error"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","typeString":"literal_string \"Error\""}],"id":569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1609:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1609:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":580,"nodeType":"ExpressionStatement","src":"1609:50:2"}]},"functionSelector":"53ff0928","id":582,"implemented":true,"kind":"function","modifiers":[{"id":539,"kind":"modifierInvocation","modifierName":{"id":538,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"1403:13:2"},"nodeType":"ModifierInvocation","src":"1403:13:2"}],"name":"removeFromEscrow","nameLocation":"1363:16:2","nodeType":"FunctionDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"amount","nameLocation":"1388:6:2","nodeType":"VariableDeclaration","scope":582,"src":"1380:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":535,"name":"uint256","nodeType":"ElementaryTypeName","src":"1380:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1379:16:2"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[],"src":"1417:0:2"},"scope":753,"src":"1354:312:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":604,"nodeType":"Block","src":"1769:87:2","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":596,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1813:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1813:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":598,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"1825:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":599,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"1833:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":600,"name":"company","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"1840:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":594,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1796:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1796:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1796:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":593,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1786:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1786:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":592,"id":603,"nodeType":"Return","src":"1779:70:2"}]},"id":605,"implemented":true,"kind":"function","modifiers":[],"name":"_getHash","nameLocation":"1681:8:2","nodeType":"FunctionDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"amount","nameLocation":"1698:6:2","nodeType":"VariableDeclaration","scope":605,"src":"1690:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1690:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":586,"mutability":"mutable","name":"nonce","nameLocation":"1714:5:2","nodeType":"VariableDeclaration","scope":605,"src":"1706:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"1706:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"company","nameLocation":"1729:7:2","nodeType":"VariableDeclaration","scope":605,"src":"1721:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1689:48:2"},"returnParameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":605,"src":"1760:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":590,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1760:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1759:9:2"},"scope":753,"src":"1672:184:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":643,"nodeType":"Block","src":"1976:252:2","statements":[{"assignments":[619],"declarations":[{"constant":false,"id":619,"mutability":"mutable","name":"prefix","nameLocation":"1999:6:2","nodeType":"VariableDeclaration","scope":643,"src":"1986:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":618,"name":"bytes","nodeType":"ElementaryTypeName","src":"1986:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":621,"initialValue":{"hexValue":"1954524f4e205369676e6564204d6573736167653a0a3332","id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2008:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_29c6c5ce717fa7038983de8b2d7c39457c966def9c9d1353a1b4737a8f4fdeb4","typeString":"literal_string hex\"1954524f4e205369676e6564204d6573736167653a0a3332\""},"value":"\u0019TRON Signed Message:\n32"},"nodeType":"VariableDeclarationStatement","src":"1986:52:2"},{"assignments":[623],"declarations":[{"constant":false,"id":623,"mutability":"mutable","name":"prefixedHashMessage","nameLocation":"2056:19:2","nodeType":"VariableDeclaration","scope":643,"src":"2048:27:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":622,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2048:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":631,"initialValue":{"arguments":[{"arguments":[{"id":627,"name":"prefix","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"2105:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":628,"name":"_hashedMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2113:14:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":625,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2088:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2088:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2088:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":624,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2078:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2078:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2048:81:2"},{"assignments":[633],"declarations":[{"constant":false,"id":633,"mutability":"mutable","name":"signer","nameLocation":"2147:6:2","nodeType":"VariableDeclaration","scope":643,"src":"2139:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"2139:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":640,"initialValue":{"arguments":[{"id":635,"name":"prefixedHashMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"2166:19:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":636,"name":"_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2187:2:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":637,"name":"_r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2191:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":638,"name":"_s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"2195:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":634,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"2156:9:2","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2156:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2139:59:2"},{"expression":{"id":641,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2215:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":617,"id":642,"nodeType":"Return","src":"2208:13:2"}]},"functionSelector":"d0466d52","id":644,"implemented":true,"kind":"function","modifiers":[],"name":"VerifyTRXMessage","nameLocation":"1871:16:2","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"_hashedMessage","nameLocation":"1896:14:2","nodeType":"VariableDeclaration","scope":644,"src":"1888:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1888:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"_v","nameLocation":"1918:2:2","nodeType":"VariableDeclaration","scope":644,"src":"1912:8:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":608,"name":"uint8","nodeType":"ElementaryTypeName","src":"1912:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"_r","nameLocation":"1930:2:2","nodeType":"VariableDeclaration","scope":644,"src":"1922:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":610,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1922:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"_s","nameLocation":"1942:2:2","nodeType":"VariableDeclaration","scope":644,"src":"1934:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":612,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1934:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1887:58:2"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"1967:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"1967:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1966:9:2"},"scope":753,"src":"1862:366:2","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":669,"nodeType":"Block","src":"2332:680:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":656,"name":"sig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"2350:3:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2350:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2364:2:2","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2350:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964207369676e6174757265206c656e677468","id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2368:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87","typeString":"literal_string \"invalid signature length\""},"value":"invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87","typeString":"literal_string \"invalid signature length\""}],"id":655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2342:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2342:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"2342:53:2"},{"AST":{"nodeType":"YulBlock","src":"2415:564:2","statements":[{"nodeType":"YulAssignment","src":"2771:24:2","value":{"arguments":[{"arguments":[{"name":"sig","nodeType":"YulIdentifier","src":"2786:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2791:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2782:3:2"},"nodeType":"YulFunctionCall","src":"2782:12:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2776:5:2"},"nodeType":"YulFunctionCall","src":"2776:19:2"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2771:1:2"}]},{"nodeType":"YulAssignment","src":"2839:24:2","value":{"arguments":[{"arguments":[{"name":"sig","nodeType":"YulIdentifier","src":"2854:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2859:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2850:3:2"},"nodeType":"YulFunctionCall","src":"2850:12:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2844:5:2"},"nodeType":"YulFunctionCall","src":"2844:19:2"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2839:1:2"}]},{"nodeType":"YulAssignment","src":"2936:33:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2946:1:2","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"sig","nodeType":"YulIdentifier","src":"2959:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"2964:2:2","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2955:3:2"},"nodeType":"YulFunctionCall","src":"2955:12:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2949:5:2"},"nodeType":"YulFunctionCall","src":"2949:19:2"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2941:4:2"},"nodeType":"YulFunctionCall","src":"2941:28:2"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2936:1:2"}]}]},"evmVersion":"london","externalReferences":[{"declaration":649,"isOffset":false,"isSlot":false,"src":"2771:1:2","valueSize":1},{"declaration":651,"isOffset":false,"isSlot":false,"src":"2839:1:2","valueSize":1},{"declaration":646,"isOffset":false,"isSlot":false,"src":"2786:3:2","valueSize":1},{"declaration":646,"isOffset":false,"isSlot":false,"src":"2854:3:2","valueSize":1},{"declaration":646,"isOffset":false,"isSlot":false,"src":"2959:3:2","valueSize":1},{"declaration":653,"isOffset":false,"isSlot":false,"src":"2936:1:2","valueSize":1}],"id":663,"nodeType":"InlineAssembly","src":"2406:573:2"},{"expression":{"components":[{"id":664,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"2997:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":665,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"3000:1:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":666,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"3003:1:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":667,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2996:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_bytes32_$_t_uint8_$","typeString":"tuple(bytes32,bytes32,uint8)"}},"functionReturnParameters":654,"id":668,"nodeType":"Return","src":"2989:16:2"}]},"functionSelector":"a7bb5803","id":670,"implemented":true,"kind":"function","modifiers":[],"name":"splitSignature","nameLocation":"2247:14:2","nodeType":"FunctionDefinition","parameters":{"id":647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"sig","nameLocation":"2275:3:2","nodeType":"VariableDeclaration","scope":670,"src":"2262:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":645,"name":"bytes","nodeType":"ElementaryTypeName","src":"2262:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2261:18:2"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"r","nameLocation":"2309:1:2","nodeType":"VariableDeclaration","scope":670,"src":"2301:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"s","nameLocation":"2320:1:2","nodeType":"VariableDeclaration","scope":670,"src":"2312:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2312:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"v","nameLocation":"2329:1:2","nodeType":"VariableDeclaration","scope":670,"src":"2323:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":652,"name":"uint8","nodeType":"ElementaryTypeName","src":"2323:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2300:31:2"},"scope":753,"src":"2238:774:2","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":678,"nodeType":"Block","src":"3052:25:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":675,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"3062:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3062:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":677,"nodeType":"ExpressionStatement","src":"3062:8:2"}]},"functionSelector":"8456cb59","id":679,"implemented":true,"kind":"function","modifiers":[{"id":673,"kind":"modifierInvocation","modifierName":{"id":672,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"3042:9:2"},"nodeType":"ModifierInvocation","src":"3042:9:2"}],"name":"pause","nameLocation":"3027:5:2","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[],"src":"3032:2:2"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"3052:0:2"},"scope":753,"src":"3018:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":687,"nodeType":"Block","src":"3119:27:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":684,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"3129:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3129:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":686,"nodeType":"ExpressionStatement","src":"3129:10:2"}]},"functionSelector":"3f4ba83a","id":688,"implemented":true,"kind":"function","modifiers":[{"id":682,"kind":"modifierInvocation","modifierName":{"id":681,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"3109:9:2"},"nodeType":"ModifierInvocation","src":"3109:9:2"}],"name":"unpause","nameLocation":"3092:7:2","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[],"src":"3099:2:2"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[],"src":"3119:0:2"},"scope":753,"src":"3083:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":716,"nodeType":"Block","src":"3275:132:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":702,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3293:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3302:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3293:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45636f4d61726b65743a20496e76616c696420616d6f756e74","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3305:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","typeString":"literal_string \"EcoMarket: Invalid amount\""},"value":"EcoMarket: Invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","typeString":"literal_string \"EcoMarket: Invalid amount\""}],"id":701,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3285:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3285:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"ExpressionStatement","src":"3285:48:2"},{"expression":{"arguments":[{"arguments":[{"id":711,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3359:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":709,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"3351:2:2","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"send","nodeType":"MemberAccess","src":"3351:7:2","typeDescriptions":{"typeIdentifier":"t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3351:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45636f4d61726b65743a204e6f7420656e6f7567682062616c616e6365","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3368:31:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6","typeString":"literal_string \"EcoMarket: Not enough balance\""},"value":"EcoMarket: Not enough balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6","typeString":"literal_string \"EcoMarket: Not enough balance\""}],"id":708,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3343:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3343:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"3343:57:2"}]},"functionSelector":"7aea7b1b","id":717,"implemented":true,"kind":"function","modifiers":[{"id":695,"kind":"modifierInvocation","modifierName":{"id":694,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"3238:9:2"},"nodeType":"ModifierInvocation","src":"3238:9:2"},{"id":697,"kind":"modifierInvocation","modifierName":{"id":696,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"3248:13:2"},"nodeType":"ModifierInvocation","src":"3248:13:2"},{"id":699,"kind":"modifierInvocation","modifierName":{"id":698,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1943,"src":"3262:12:2"},"nodeType":"ModifierInvocation","src":"3262:12:2"}],"name":"withdrawTRX","nameLocation":"3161:11:2","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"amount","nameLocation":"3190:6:2","nodeType":"VariableDeclaration","scope":717,"src":"3182:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"3182:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"to","nameLocation":"3222:2:2","nodeType":"VariableDeclaration","scope":717,"src":"3206:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"3206:15:2","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3172:58:2"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"3275:0:2"},"scope":753,"src":"3152:255:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":747,"nodeType":"Block","src":"3559:119:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":733,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3577:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3577:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45636f4d61726b65743a20496e76616c696420616d6f756e74","id":736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3589:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","typeString":"literal_string \"EcoMarket: Invalid amount\""},"value":"EcoMarket: Invalid amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","typeString":"literal_string \"EcoMarket: Invalid amount\""}],"id":732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3569:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3569:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":738,"nodeType":"ExpressionStatement","src":"3569:48:2"},{"expression":{"arguments":[{"id":743,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"3660:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":744,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3664:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":740,"name":"tokenAdress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"3638:11:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":739,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"3631:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$830_$","typeString":"type(contract IERC20)"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3631:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$830","typeString":"contract IERC20"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":797,"src":"3631:28:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3631:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":746,"nodeType":"ExpressionStatement","src":"3631:40:2"}]},"functionSelector":"2801273b","id":748,"implemented":true,"kind":"function","modifiers":[{"id":726,"kind":"modifierInvocation","modifierName":{"id":725,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"3522:9:2"},"nodeType":"ModifierInvocation","src":"3522:9:2"},{"id":728,"kind":"modifierInvocation","modifierName":{"id":727,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"3532:13:2"},"nodeType":"ModifierInvocation","src":"3532:13:2"},{"id":730,"kind":"modifierInvocation","modifierName":{"id":729,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":1943,"src":"3546:12:2"},"nodeType":"ModifierInvocation","src":"3546:12:2"}],"name":"withdrawTRC20","nameLocation":"3422:13:2","nodeType":"FunctionDefinition","parameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"tokenAdress","nameLocation":"3453:11:2","nodeType":"VariableDeclaration","scope":748,"src":"3445:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"3445:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"amount","nameLocation":"3482:6:2","nodeType":"VariableDeclaration","scope":748,"src":"3474:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"3474:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"to","nameLocation":"3506:2:2","nodeType":"VariableDeclaration","scope":748,"src":"3498:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"3498:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3435:79:2"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[],"src":"3559:0:2"},"scope":753,"src":"3413:265:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":751,"nodeType":"Block","src":"3711:2:2","statements":[]},"id":752,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":749,"nodeType":"ParameterList","parameters":[],"src":"3691:2:2"},"returnParameters":{"id":750,"nodeType":"ParameterList","parameters":[],"src":"3711:0:2"},"scope":753,"src":"3684:29:2","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":754,"src":"189:3526:2","usedErrors":[]}],"src":"37:3678:2"},"id":2},"contracts/all/IERC20.sol":{"ast":{"absolutePath":"contracts/all/IERC20.sol","exportedSymbols":{"IERC20":[830]},"id":831,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":755,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":830,"linearizedBaseContracts":[830],"name":"IERC20","nameLocation":"68:6:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":756,"nodeType":"StructuredDocumentation","src":"81:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":764,"name":"Transfer","nameLocation":"250:8:3","nodeType":"EventDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"275:4:3","nodeType":"VariableDeclaration","scope":764,"src":"259:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"259:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":760,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"297:2:3","nodeType":"VariableDeclaration","scope":764,"src":"281:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"281:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":762,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"309:5:3","nodeType":"VariableDeclaration","scope":764,"src":"301:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":761,"name":"uint256","nodeType":"ElementaryTypeName","src":"301:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"258:57:3"},"src":"244:72:3"},{"anonymous":false,"documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"322:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":773,"name":"Approval","nameLocation":"481:8:3","nodeType":"EventDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":767,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"506:5:3","nodeType":"VariableDeclaration","scope":773,"src":"490:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":766,"name":"address","nodeType":"ElementaryTypeName","src":"490:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":769,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"529:7:3","nodeType":"VariableDeclaration","scope":773,"src":"513:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"513:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":771,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"546:5:3","nodeType":"VariableDeclaration","scope":773,"src":"538:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"538:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"489:63:3"},"src":"475:78:3"},{"documentation":{"id":774,"nodeType":"StructuredDocumentation","src":"559:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":779,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"639:11:3","nodeType":"FunctionDefinition","parameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"650:2:3"},"returnParameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":777,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":779,"src":"676:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"676:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"675:9:3"},"scope":830,"src":"630:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"691:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":787,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"777:9:3","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":782,"mutability":"mutable","name":"account","nameLocation":"795:7:3","nodeType":"VariableDeclaration","scope":787,"src":"787:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"787:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"786:17:3"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":787,"src":"827:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"827:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"826:9:3"},"scope":830,"src":"768:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":788,"nodeType":"StructuredDocumentation","src":"842:202:3","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":797,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1058:8:3","nodeType":"FunctionDefinition","parameters":{"id":793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":790,"mutability":"mutable","name":"to","nameLocation":"1075:2:3","nodeType":"VariableDeclaration","scope":797,"src":"1067:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":789,"name":"address","nodeType":"ElementaryTypeName","src":"1067:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"amount","nameLocation":"1087:6:3","nodeType":"VariableDeclaration","scope":797,"src":"1079:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"1079:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1066:28:3"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":797,"src":"1113:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":794,"name":"bool","nodeType":"ElementaryTypeName","src":"1113:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1112:6:3"},"scope":830,"src":"1049:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":798,"nodeType":"StructuredDocumentation","src":"1125:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":807,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1403:9:3","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":800,"mutability":"mutable","name":"owner","nameLocation":"1421:5:3","nodeType":"VariableDeclaration","scope":807,"src":"1413:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"1413:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"spender","nameLocation":"1436:7:3","nodeType":"VariableDeclaration","scope":807,"src":"1428:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"1428:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1412:32:3"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":807,"src":"1468:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1468:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1467:9:3"},"scope":830,"src":"1394:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"1483:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":817,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2139:7:3","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":810,"mutability":"mutable","name":"spender","nameLocation":"2155:7:3","nodeType":"VariableDeclaration","scope":817,"src":"2147:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"amount","nameLocation":"2172:6:3","nodeType":"VariableDeclaration","scope":817,"src":"2164:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"2164:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2146:33:3"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":817,"src":"2198:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":814,"name":"bool","nodeType":"ElementaryTypeName","src":"2198:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2197:6:3"},"scope":830,"src":"2130:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":818,"nodeType":"StructuredDocumentation","src":"2210:287:3","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":829,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2511:12:3","nodeType":"FunctionDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"from","nameLocation":"2532:4:3","nodeType":"VariableDeclaration","scope":829,"src":"2524:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":819,"name":"address","nodeType":"ElementaryTypeName","src":"2524:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"to","nameLocation":"2546:2:3","nodeType":"VariableDeclaration","scope":829,"src":"2538:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"2538:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"amount","nameLocation":"2558:6:3","nodeType":"VariableDeclaration","scope":829,"src":"2550:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":823,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2523:42:3"},"returnParameters":{"id":828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":829,"src":"2584:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":826,"name":"bool","nodeType":"ElementaryTypeName","src":"2584:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2583:6:3"},"scope":830,"src":"2502:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":831,"src":"58:2534:3","usedErrors":[]}],"src":"33:2560:3"},"id":3},"contracts/all/Math.sol":{"ast":{"absolutePath":"contracts/all/Math.sol","exportedSymbols":{"Math":[1695]},"id":1696,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":832,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1695,"linearizedBaseContracts":[1695],"name":"Math","nameLocation":"66:4:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":836,"members":[{"id":833,"name":"Down","nameLocation":"101:4:4","nodeType":"EnumValue","src":"101:4:4"},{"id":834,"name":"Up","nameLocation":"143:2:4","nodeType":"EnumValue","src":"143:2:4"},{"id":835,"name":"Zero","nameLocation":"174:4:4","nodeType":"EnumValue","src":"174:4:4"}],"name":"Rounding","nameLocation":"82:8:4","nodeType":"EnumDefinition","src":"77:122:4"},{"body":{"id":853,"nodeType":"Block","src":"336:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":846,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"353:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":847,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"357:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"353:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":850,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"365:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"353:13:4","trueExpression":{"id":849,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"361:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":845,"id":852,"nodeType":"Return","src":"346:20:4"}]},"documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"205:59:4","text":" @dev Returns the largest of two numbers."},"id":854,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"278:3:4","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"a","nameLocation":"290:1:4","nodeType":"VariableDeclaration","scope":854,"src":"282:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"282:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"b","nameLocation":"301:1:4","nodeType":"VariableDeclaration","scope":854,"src":"293:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"293:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"281:22:4"},"returnParameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":854,"src":"327:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":843,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"326:9:4"},"scope":1695,"src":"269:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":871,"nodeType":"Block","src":"511:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":864,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"528:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":865,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"532:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"528:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":868,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":859,"src":"540:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"528:13:4","trueExpression":{"id":867,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"536:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":863,"id":870,"nodeType":"Return","src":"521:20:4"}]},"documentation":{"id":855,"nodeType":"StructuredDocumentation","src":"379:60:4","text":" @dev Returns the smallest of two numbers."},"id":872,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"453:3:4","nodeType":"FunctionDefinition","parameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":857,"mutability":"mutable","name":"a","nameLocation":"465:1:4","nodeType":"VariableDeclaration","scope":872,"src":"457:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"457:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"b","nameLocation":"476:1:4","nodeType":"VariableDeclaration","scope":872,"src":"468:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"456:22:4"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":872,"src":"502:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"501:9:4"},"scope":1695,"src":"444:104:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":894,"nodeType":"Block","src":"732:82:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":882,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"787:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":883,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"791:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"787:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"786:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"797:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"801:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"797:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"796:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"806:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"796:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":881,"id":893,"nodeType":"Return","src":"779:28:4"}]},"documentation":{"id":873,"nodeType":"StructuredDocumentation","src":"554:102:4","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":895,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"670:7:4","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":875,"mutability":"mutable","name":"a","nameLocation":"686:1:4","nodeType":"VariableDeclaration","scope":895,"src":"678:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":874,"name":"uint256","nodeType":"ElementaryTypeName","src":"678:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"b","nameLocation":"697:1:4","nodeType":"VariableDeclaration","scope":895,"src":"689:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint256","nodeType":"ElementaryTypeName","src":"689:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"677:22:4"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":895,"src":"723:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":879,"name":"uint256","nodeType":"ElementaryTypeName","src":"723:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"722:9:4"},"scope":1695,"src":"661:153:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":919,"nodeType":"Block","src":"1084:123:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":905,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"1172:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1177:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1172:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"1186:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1190:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1186:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":912,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1185:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":913,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"1195:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1185:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1199:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1185:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1172:28:4","trueExpression":{"hexValue":"30","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1181:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":904,"id":918,"nodeType":"Return","src":"1165:35:4"}]},"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"820:188:4","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":920,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1022:7:4","nodeType":"FunctionDefinition","parameters":{"id":901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"a","nameLocation":"1038:1:4","nodeType":"VariableDeclaration","scope":920,"src":"1030:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1030:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":900,"mutability":"mutable","name":"b","nameLocation":"1049:1:4","nodeType":"VariableDeclaration","scope":920,"src":"1041:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":899,"name":"uint256","nodeType":"ElementaryTypeName","src":"1041:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1029:22:4"},"returnParameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"1075:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1074:9:4"},"scope":1695,"src":"1013:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1042,"nodeType":"Block","src":"1621:4115:4","statements":[{"id":1041,"nodeType":"UncheckedBlock","src":"1631:4099:4","statements":[{"assignments":[933],"declarations":[{"constant":false,"id":933,"mutability":"mutable","name":"prod0","nameLocation":"1960:5:4","nodeType":"VariableDeclaration","scope":1041,"src":"1952:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":932,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":934,"nodeType":"VariableDeclarationStatement","src":"1952:13:4"},{"assignments":[936],"declarations":[{"constant":false,"id":936,"mutability":"mutable","name":"prod1","nameLocation":"2032:5:4","nodeType":"VariableDeclaration","scope":1041,"src":"2024:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":935,"name":"uint256","nodeType":"ElementaryTypeName","src":"2024:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":937,"nodeType":"VariableDeclarationStatement","src":"2024:13:4"},{"AST":{"nodeType":"YulBlock","src":"2104:157:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2122:30:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2139:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2142:1:4"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2149:1:4","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2145:3:4"},"nodeType":"YulFunctionCall","src":"2145:6:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2132:6:4"},"nodeType":"YulFunctionCall","src":"2132:20:4"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2126:2:4","type":""}]},{"nodeType":"YulAssignment","src":"2169:18:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2182:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"2185:1:4"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2178:3:4"},"nodeType":"YulFunctionCall","src":"2178:9:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2169:5:4"}]},{"nodeType":"YulAssignment","src":"2204:43:4","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2221:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2225:5:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2217:3:4"},"nodeType":"YulFunctionCall","src":"2217:14:4"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2236:2:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"2240:5:4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2233:2:4"},"nodeType":"YulFunctionCall","src":"2233:13:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2213:3:4"},"nodeType":"YulFunctionCall","src":"2213:34:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2204:5:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":933,"isOffset":false,"isSlot":false,"src":"2169:5:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"2225:5:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"2240:5:4","valueSize":1},{"declaration":936,"isOffset":false,"isSlot":false,"src":"2204:5:4","valueSize":1},{"declaration":923,"isOffset":false,"isSlot":false,"src":"2139:1:4","valueSize":1},{"declaration":923,"isOffset":false,"isSlot":false,"src":"2182:1:4","valueSize":1},{"declaration":925,"isOffset":false,"isSlot":false,"src":"2142:1:4","valueSize":1},{"declaration":925,"isOffset":false,"isSlot":false,"src":"2185:1:4","valueSize":1}],"id":938,"nodeType":"InlineAssembly","src":"2095:166:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":939,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"2342:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2351:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2342:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":947,"nodeType":"IfStatement","src":"2338:368:4","trueBody":{"id":946,"nodeType":"Block","src":"2354:352:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":942,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"2672:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":943,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"2680:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2672:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":931,"id":945,"nodeType":"Return","src":"2665:26:4"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":949,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"2816:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":950,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"2830:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2837:23:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":948,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2808:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2808:53:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":954,"nodeType":"ExpressionStatement","src":"2808:53:4"},{"assignments":[956],"declarations":[{"constant":false,"id":956,"mutability":"mutable","name":"remainder","nameLocation":"3125:9:4","nodeType":"VariableDeclaration","scope":1041,"src":"3117:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":955,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":957,"nodeType":"VariableDeclarationStatement","src":"3117:17:4"},{"AST":{"nodeType":"YulBlock","src":"3157:291:4","statements":[{"nodeType":"YulAssignment","src":"3226:38:4","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3246:1:4"},{"name":"y","nodeType":"YulIdentifier","src":"3249:1:4"},{"name":"denominator","nodeType":"YulIdentifier","src":"3252:11:4"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3239:6:4"},"nodeType":"YulFunctionCall","src":"3239:25:4"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3226:9:4"}]},{"nodeType":"YulAssignment","src":"3346:41:4","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3359:5:4"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3369:9:4"},{"name":"prod0","nodeType":"YulIdentifier","src":"3380:5:4"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3366:2:4"},"nodeType":"YulFunctionCall","src":"3366:20:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3355:3:4"},"nodeType":"YulFunctionCall","src":"3355:32:4"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3346:5:4"}]},{"nodeType":"YulAssignment","src":"3404:30:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3417:5:4"},{"name":"remainder","nodeType":"YulIdentifier","src":"3424:9:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3413:3:4"},"nodeType":"YulFunctionCall","src":"3413:21:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3404:5:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":927,"isOffset":false,"isSlot":false,"src":"3252:11:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"3380:5:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"3404:5:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"3417:5:4","valueSize":1},{"declaration":936,"isOffset":false,"isSlot":false,"src":"3346:5:4","valueSize":1},{"declaration":936,"isOffset":false,"isSlot":false,"src":"3359:5:4","valueSize":1},{"declaration":956,"isOffset":false,"isSlot":false,"src":"3226:9:4","valueSize":1},{"declaration":956,"isOffset":false,"isSlot":false,"src":"3369:9:4","valueSize":1},{"declaration":956,"isOffset":false,"isSlot":false,"src":"3424:9:4","valueSize":1},{"declaration":923,"isOffset":false,"isSlot":false,"src":"3246:1:4","valueSize":1},{"declaration":925,"isOffset":false,"isSlot":false,"src":"3249:1:4","valueSize":1}],"id":958,"nodeType":"InlineAssembly","src":"3148:300:4"},{"assignments":[960],"declarations":[{"constant":false,"id":960,"mutability":"mutable","name":"twos","nameLocation":"3763:4:4","nodeType":"VariableDeclaration","scope":1041,"src":"3755:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"3755:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":968,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":961,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"3770:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3785:12:4","subExpression":{"id":962,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"3786:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3800:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3785:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":966,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3784:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3770:32:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3755:47:4"},{"AST":{"nodeType":"YulBlock","src":"3825:362:4","statements":[{"nodeType":"YulAssignment","src":"3890:37:4","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3909:11:4"},{"name":"twos","nodeType":"YulIdentifier","src":"3922:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3905:3:4"},"nodeType":"YulFunctionCall","src":"3905:22:4"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3890:11:4"}]},{"nodeType":"YulAssignment","src":"3994:25:4","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4007:5:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4014:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4003:3:4"},"nodeType":"YulFunctionCall","src":"4003:16:4"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3994:5:4"}]},{"nodeType":"YulAssignment","src":"4134:39:4","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4154:1:4","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4157:4:4"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4150:3:4"},"nodeType":"YulFunctionCall","src":"4150:12:4"},{"name":"twos","nodeType":"YulIdentifier","src":"4164:4:4"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4146:3:4"},"nodeType":"YulFunctionCall","src":"4146:23:4"},{"kind":"number","nodeType":"YulLiteral","src":"4171:1:4","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4142:3:4"},"nodeType":"YulFunctionCall","src":"4142:31:4"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4134:4:4"}]}]},"evmVersion":"london","externalReferences":[{"declaration":927,"isOffset":false,"isSlot":false,"src":"3890:11:4","valueSize":1},{"declaration":927,"isOffset":false,"isSlot":false,"src":"3909:11:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"3994:5:4","valueSize":1},{"declaration":933,"isOffset":false,"isSlot":false,"src":"4007:5:4","valueSize":1},{"declaration":960,"isOffset":false,"isSlot":false,"src":"3922:4:4","valueSize":1},{"declaration":960,"isOffset":false,"isSlot":false,"src":"4014:4:4","valueSize":1},{"declaration":960,"isOffset":false,"isSlot":false,"src":"4134:4:4","valueSize":1},{"declaration":960,"isOffset":false,"isSlot":false,"src":"4157:4:4","valueSize":1},{"declaration":960,"isOffset":false,"isSlot":false,"src":"4164:4:4","valueSize":1}],"id":969,"nodeType":"InlineAssembly","src":"3816:371:4"},{"expression":{"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":970,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"4253:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":971,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":936,"src":"4262:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":972,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"4270:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4262:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4253:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":975,"nodeType":"ExpressionStatement","src":"4253:21:4"},{"assignments":[977],"declarations":[{"constant":false,"id":977,"mutability":"mutable","name":"inverse","nameLocation":"4600:7:4","nodeType":"VariableDeclaration","scope":1041,"src":"4592:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"4592:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":984,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4611:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":979,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"4615:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4611:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":981,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4610:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4630:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4610:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4592:39:4"},{"expression":{"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":985,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4848:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4859:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":987,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"4863:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":988,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4877:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4863:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4859:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4848:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":992,"nodeType":"ExpressionStatement","src":"4848:36:4"},{"expression":{"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":993,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4917:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4928:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":995,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"4932:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":996,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4946:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4932:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4917:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1000,"nodeType":"ExpressionStatement","src":"4917:36:4"},{"expression":{"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1001,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"4987:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4998:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1003,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"5002:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1004,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5016:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5002:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4987:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1008,"nodeType":"ExpressionStatement","src":"4987:36:4"},{"expression":{"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1009,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5057:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5068:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1011,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"5072:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1012,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5086:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5068:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5057:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1016,"nodeType":"ExpressionStatement","src":"5057:36:4"},{"expression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1017,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5127:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5138:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"5142:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1020,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5156:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5127:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1024,"nodeType":"ExpressionStatement","src":"5127:36:4"},{"expression":{"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1025,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5198:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5209:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"5213:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1028,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5227:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5213:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5209:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5198:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1032,"nodeType":"ExpressionStatement","src":"5198:36:4"},{"expression":{"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1033,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"5668:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1034,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"5677:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1035,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"5685:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5677:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5668:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1038,"nodeType":"ExpressionStatement","src":"5668:24:4"},{"expression":{"id":1039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"5713:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":931,"id":1040,"nodeType":"Return","src":"5706:13:4"}]}]},"documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"1213:305:4","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1532:6:4","nodeType":"FunctionDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"x","nameLocation":"1547:1:4","nodeType":"VariableDeclaration","scope":1043,"src":"1539:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":925,"mutability":"mutable","name":"y","nameLocation":"1558:1:4","nodeType":"VariableDeclaration","scope":1043,"src":"1550:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":927,"mutability":"mutable","name":"denominator","nameLocation":"1569:11:4","nodeType":"VariableDeclaration","scope":1043,"src":"1561:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":926,"name":"uint256","nodeType":"ElementaryTypeName","src":"1561:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1538:43:4"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"result","nameLocation":"1613:6:4","nodeType":"VariableDeclaration","scope":1043,"src":"1605:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1605:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1604:16:4"},"scope":1695,"src":"1523:4213:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1086,"nodeType":"Block","src":"5978:189:4","statements":[{"assignments":[1059],"declarations":[{"constant":false,"id":1059,"mutability":"mutable","name":"result","nameLocation":"5996:6:4","nodeType":"VariableDeclaration","scope":1086,"src":"5988:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"5988:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1065,"initialValue":{"arguments":[{"id":1061,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"6012:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1062,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6015:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1063,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6018:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1060,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1043,1087],"referencedDeclaration":1043,"src":"6005:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6005:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5988:42:4"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"6044:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1067,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"6056:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$836_$","typeString":"type(enum Math.Rounding)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":834,"src":"6056:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"src":"6044:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1071,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"6078:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1072,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6081:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1073,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6084:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1070,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6071:6:4","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6071:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6099:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6071:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6044:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1083,"nodeType":"IfStatement","src":"6040:98:4","trueBody":{"id":1082,"nodeType":"Block","src":"6102:36:4","statements":[{"expression":{"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1078,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6116:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6116:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1081,"nodeType":"ExpressionStatement","src":"6116:11:4"}]}},{"expression":{"id":1084,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6154:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1057,"id":1085,"nodeType":"Return","src":"6147:13:4"}]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"5742:121:4","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1087,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5877:6:4","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"x","nameLocation":"5892:1:4","nodeType":"VariableDeclaration","scope":1087,"src":"5884:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"5884:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"y","nameLocation":"5903:1:4","nodeType":"VariableDeclaration","scope":1087,"src":"5895:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"5895:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"denominator","nameLocation":"5914:11:4","nodeType":"VariableDeclaration","scope":1087,"src":"5906:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"5906:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"rounding","nameLocation":"5936:8:4","nodeType":"VariableDeclaration","scope":1087,"src":"5927:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"typeName":{"id":1052,"nodeType":"UserDefinedTypeName","pathNode":{"id":1051,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":836,"src":"5927:8:4"},"referencedDeclaration":836,"src":"5927:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5883:62:4"},"returnParameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1087,"src":"5969:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1055,"name":"uint256","nodeType":"ElementaryTypeName","src":"5969:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5968:9:4"},"scope":1695,"src":"5868:299:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1198,"nodeType":"Block","src":"6443:1585:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"6457:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6462:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6457:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1101,"nodeType":"IfStatement","src":"6453:45:4","trueBody":{"id":1100,"nodeType":"Block","src":"6465:33:4","statements":[{"expression":{"hexValue":"30","id":1098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6486:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1094,"id":1099,"nodeType":"Return","src":"6479:8:4"}]}},{"assignments":[1103],"declarations":[{"constant":false,"id":1103,"mutability":"mutable","name":"result","nameLocation":"7185:6:4","nodeType":"VariableDeclaration","scope":1198,"src":"7177:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1102,"name":"uint256","nodeType":"ElementaryTypeName","src":"7177:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1112,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7194:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1106,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7205:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1105,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1367,1403],"referencedDeclaration":1367,"src":"7200:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7200:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7211:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7200:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7199:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7194:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7177:36:4"},{"id":1197,"nodeType":"UncheckedBlock","src":"7614:408:4","statements":[{"expression":{"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1113,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7638:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7648:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1115,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7657:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1116,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7661:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7657:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7648:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1119,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7647:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7672:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7647:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7638:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1123,"nodeType":"ExpressionStatement","src":"7638:35:4"},{"expression":{"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7687:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7697:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1126,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7706:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1127,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7710:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7706:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7697:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1130,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7696:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7721:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7696:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7687:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1134,"nodeType":"ExpressionStatement","src":"7687:35:4"},{"expression":{"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1135,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7736:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7746:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7755:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7759:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7755:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7746:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1141,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7745:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7770:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7745:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7736:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1145,"nodeType":"ExpressionStatement","src":"7736:35:4"},{"expression":{"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1146,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7785:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7795:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1148,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7804:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7808:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7804:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7795:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7794:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7819:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7794:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7785:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1156,"nodeType":"ExpressionStatement","src":"7785:35:4"},{"expression":{"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1157,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7834:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7844:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1159,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7853:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7857:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7853:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7844:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1163,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7843:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7868:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7843:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7834:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1167,"nodeType":"ExpressionStatement","src":"7834:35:4"},{"expression":{"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1168,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7883:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7893:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7902:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7906:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7902:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7893:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1174,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7892:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7917:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7892:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7883:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1178,"nodeType":"ExpressionStatement","src":"7883:35:4"},{"expression":{"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1179,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7932:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7942:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1181,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"7951:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7955:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7951:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7942:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1185,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7941:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7966:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7941:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7932:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1189,"nodeType":"ExpressionStatement","src":"7932:35:4"},{"expression":{"arguments":[{"id":1191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"7992:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1192,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"8000:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1193,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"8004:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8000:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1190,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"7988:3:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7988:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1094,"id":1196,"nodeType":"Return","src":"7981:30:4"}]}]},"documentation":{"id":1088,"nodeType":"StructuredDocumentation","src":"6173:208:4","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1199,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6395:4:4","nodeType":"FunctionDefinition","parameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"a","nameLocation":"6408:1:4","nodeType":"VariableDeclaration","scope":1199,"src":"6400:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"6400:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6399:11:4"},"returnParameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1199,"src":"6434:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1092,"name":"uint256","nodeType":"ElementaryTypeName","src":"6434:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6433:9:4"},"scope":1695,"src":"6386:1642:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1234,"nodeType":"Block","src":"8204:161:4","statements":[{"id":1233,"nodeType":"UncheckedBlock","src":"8214:145:4","statements":[{"assignments":[1211],"declarations":[{"constant":false,"id":1211,"mutability":"mutable","name":"result","nameLocation":"8246:6:4","nodeType":"VariableDeclaration","scope":1233,"src":"8238:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"8238:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1215,"initialValue":{"arguments":[{"id":1213,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"8260:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1212,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1199,1235],"referencedDeclaration":1199,"src":"8255:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8255:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8238:24:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"8283:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1217,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"8293:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1218,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"8305:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$836_$","typeString":"type(enum Math.Rounding)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":834,"src":"8305:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"src":"8293:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1221,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"8320:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1222,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"8329:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8320:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1224,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"8338:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8320:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8293:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8346:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8293:54:4","trueExpression":{"hexValue":"31","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8342:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8292:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8283:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1209,"id":1232,"nodeType":"Return","src":"8276:72:4"}]}]},"documentation":{"id":1200,"nodeType":"StructuredDocumentation","src":"8034:89:4","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1235,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8137:4:4","nodeType":"FunctionDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"a","nameLocation":"8150:1:4","nodeType":"VariableDeclaration","scope":1235,"src":"8142:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"8142:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"rounding","nameLocation":"8162:8:4","nodeType":"VariableDeclaration","scope":1235,"src":"8153:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"typeName":{"id":1204,"nodeType":"UserDefinedTypeName","pathNode":{"id":1203,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":836,"src":"8153:8:4"},"referencedDeclaration":836,"src":"8153:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8141:30:4"},"returnParameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1235,"src":"8195:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"8195:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8194:9:4"},"scope":1695,"src":"8128:237:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1366,"nodeType":"Block","src":"8550:922:4","statements":[{"assignments":[1244],"declarations":[{"constant":false,"id":1244,"mutability":"mutable","name":"result","nameLocation":"8568:6:4","nodeType":"VariableDeclaration","scope":1366,"src":"8560:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"8560:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1246,"initialValue":{"hexValue":"30","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8577:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8560:18:4"},{"id":1363,"nodeType":"UncheckedBlock","src":"8588:855:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8616:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8625:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8616:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8616:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1261,"nodeType":"IfStatement","src":"8612:99:4","trueBody":{"id":1260,"nodeType":"Block","src":"8634:77:4","statements":[{"expression":{"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1252,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8652:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8662:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8652:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1255,"nodeType":"ExpressionStatement","src":"8652:13:4"},{"expression":{"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1256,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"8683:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8693:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8683:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1259,"nodeType":"ExpressionStatement","src":"8683:13:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8728:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8737:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8728:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8728:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1276,"nodeType":"IfStatement","src":"8724:96:4","trueBody":{"id":1275,"nodeType":"Block","src":"8745:75:4","statements":[{"expression":{"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8763:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8773:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8763:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1270,"nodeType":"ExpressionStatement","src":"8763:12:4"},{"expression":{"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"8793:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8803:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8793:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1274,"nodeType":"ExpressionStatement","src":"8793:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8837:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8846:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8837:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8851:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8837:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1291,"nodeType":"IfStatement","src":"8833:96:4","trueBody":{"id":1290,"nodeType":"Block","src":"8854:75:4","statements":[{"expression":{"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8872:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8882:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8872:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1285,"nodeType":"ExpressionStatement","src":"8872:12:4"},{"expression":{"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1286,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"8902:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8912:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8902:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1289,"nodeType":"ExpressionStatement","src":"8902:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1292,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8946:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8955:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8946:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8960:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8946:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1306,"nodeType":"IfStatement","src":"8942:96:4","trueBody":{"id":1305,"nodeType":"Block","src":"8963:75:4","statements":[{"expression":{"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1297,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"8981:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8991:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8981:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1300,"nodeType":"ExpressionStatement","src":"8981:12:4"},{"expression":{"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9011:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9021:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9011:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1304,"nodeType":"ExpressionStatement","src":"9011:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9055:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9055:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1321,"nodeType":"IfStatement","src":"9051:93:4","trueBody":{"id":1320,"nodeType":"Block","src":"9071:73:4","statements":[{"expression":{"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9089:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9089:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1315,"nodeType":"ExpressionStatement","src":"9089:11:4"},{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1316,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9118:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9118:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1319,"nodeType":"ExpressionStatement","src":"9118:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9161:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9161:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1336,"nodeType":"IfStatement","src":"9157:93:4","trueBody":{"id":1335,"nodeType":"Block","src":"9177:73:4","statements":[{"expression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9195:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9195:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1330,"nodeType":"ExpressionStatement","src":"9195:11:4"},{"expression":{"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1331,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9224:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9224:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1334,"nodeType":"ExpressionStatement","src":"9224:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9267:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9267:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1351,"nodeType":"IfStatement","src":"9263:93:4","trueBody":{"id":1350,"nodeType":"Block","src":"9283:73:4","statements":[{"expression":{"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9301:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9301:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1345,"nodeType":"ExpressionStatement","src":"9301:11:4"},{"expression":{"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9330:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9340:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9330:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1349,"nodeType":"ExpressionStatement","src":"9330:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"9373:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9382:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9373:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9386:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9373:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1362,"nodeType":"IfStatement","src":"9369:64:4","trueBody":{"id":1361,"nodeType":"Block","src":"9389:44:4","statements":[{"expression":{"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9407:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9417:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9407:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1360,"nodeType":"ExpressionStatement","src":"9407:11:4"}]}}]},{"expression":{"id":1364,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9459:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1242,"id":1365,"nodeType":"Return","src":"9452:13:4"}]},"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"8371:113:4","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1367,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8498:4:4","nodeType":"FunctionDefinition","parameters":{"id":1239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"value","nameLocation":"8511:5:4","nodeType":"VariableDeclaration","scope":1367,"src":"8503:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"8503:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8502:15:4"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1367,"src":"8541:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"8541:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8540:9:4"},"scope":1695,"src":"8489:983:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1402,"nodeType":"Block","src":"9705:165:4","statements":[{"id":1401,"nodeType":"UncheckedBlock","src":"9715:149:4","statements":[{"assignments":[1379],"declarations":[{"constant":false,"id":1379,"mutability":"mutable","name":"result","nameLocation":"9747:6:4","nodeType":"VariableDeclaration","scope":1401,"src":"9739:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1378,"name":"uint256","nodeType":"ElementaryTypeName","src":"9739:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1383,"initialValue":{"arguments":[{"id":1381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"9761:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1380,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1367,1403],"referencedDeclaration":1367,"src":"9756:4:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9756:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9739:28:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"9788:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1385,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"9798:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1386,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"9810:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$836_$","typeString":"type(enum Math.Rounding)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":834,"src":"9810:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"src":"9798:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9825:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1390,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"9830:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9825:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1392,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"9839:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9825:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9798:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9851:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9798:54:4","trueExpression":{"hexValue":"31","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9847:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9797:56:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9788:65:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1377,"id":1400,"nodeType":"Return","src":"9781:72:4"}]}]},"documentation":{"id":1368,"nodeType":"StructuredDocumentation","src":"9478:142:4","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1403,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9634:4:4","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"mutability":"mutable","name":"value","nameLocation":"9647:5:4","nodeType":"VariableDeclaration","scope":1403,"src":"9639:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1369,"name":"uint256","nodeType":"ElementaryTypeName","src":"9639:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"rounding","nameLocation":"9663:8:4","nodeType":"VariableDeclaration","scope":1403,"src":"9654:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"typeName":{"id":1372,"nodeType":"UserDefinedTypeName","pathNode":{"id":1371,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":836,"src":"9654:8:4"},"referencedDeclaration":836,"src":"9654:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9638:34:4"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1403,"src":"9696:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"9696:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9695:9:4"},"scope":1695,"src":"9625:245:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1531,"nodeType":"Block","src":"10057:854:4","statements":[{"assignments":[1412],"declarations":[{"constant":false,"id":1412,"mutability":"mutable","name":"result","nameLocation":"10075:6:4","nodeType":"VariableDeclaration","scope":1531,"src":"10067:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"10067:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1414,"initialValue":{"hexValue":"30","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10084:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10067:18:4"},{"id":1528,"nodeType":"UncheckedBlock","src":"10095:787:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10123:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10132:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10132:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10123:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1431,"nodeType":"IfStatement","src":"10119:103:4","trueBody":{"id":1430,"nodeType":"Block","src":"10142:80:4","statements":[{"expression":{"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1420,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10160:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10175:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10169:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10160:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1425,"nodeType":"ExpressionStatement","src":"10160:17:4"},{"expression":{"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10195:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10205:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10195:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1429,"nodeType":"ExpressionStatement","src":"10195:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10239:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10248:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10248:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10239:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1448,"nodeType":"IfStatement","src":"10235:103:4","trueBody":{"id":1447,"nodeType":"Block","src":"10258:80:4","statements":[{"expression":{"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10276:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1440,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10291:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10285:8:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10276:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1442,"nodeType":"ExpressionStatement","src":"10276:17:4"},{"expression":{"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1443,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10311:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10321:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10311:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1446,"nodeType":"ExpressionStatement","src":"10311:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10355:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10364:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10370:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10364:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10355:17:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1465,"nodeType":"IfStatement","src":"10351:103:4","trueBody":{"id":1464,"nodeType":"Block","src":"10374:80:4","statements":[{"expression":{"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10392:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10401:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10407:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10401:8:4","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10392:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1459,"nodeType":"ExpressionStatement","src":"10392:17:4"},{"expression":{"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1460,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10427:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10437:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10427:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1463,"nodeType":"ExpressionStatement","src":"10427:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10471:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10480:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10486:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10480:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10471:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1482,"nodeType":"IfStatement","src":"10467:100:4","trueBody":{"id":1481,"nodeType":"Block","src":"10489:78:4","statements":[{"expression":{"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1471,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10507:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10516:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10522:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10516:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10507:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1476,"nodeType":"ExpressionStatement","src":"10507:16:4"},{"expression":{"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10541:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10541:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1480,"nodeType":"ExpressionStatement","src":"10541:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10584:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10593:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10599:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10593:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10584:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1499,"nodeType":"IfStatement","src":"10580:100:4","trueBody":{"id":1498,"nodeType":"Block","src":"10602:78:4","statements":[{"expression":{"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1488,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10620:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10629:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10629:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10620:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1493,"nodeType":"ExpressionStatement","src":"10620:16:4"},{"expression":{"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10654:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10664:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10654:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1497,"nodeType":"ExpressionStatement","src":"10654:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10697:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10712:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10706:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10697:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1516,"nodeType":"IfStatement","src":"10693:100:4","trueBody":{"id":1515,"nodeType":"Block","src":"10715:78:4","statements":[{"expression":{"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1505,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10733:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10742:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10742:7:4","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10733:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1510,"nodeType":"ExpressionStatement","src":"10733:16:4"},{"expression":{"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1511,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10767:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10777:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10767:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1514,"nodeType":"ExpressionStatement","src":"10767:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"10810:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10825:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10819:7:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10810:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1527,"nodeType":"IfStatement","src":"10806:66:4","trueBody":{"id":1526,"nodeType":"Block","src":"10828:44:4","statements":[{"expression":{"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10846:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10846:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1525,"nodeType":"ExpressionStatement","src":"10846:11:4"}]}}]},{"expression":{"id":1529,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1412,"src":"10898:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1410,"id":1530,"nodeType":"Return","src":"10891:13:4"}]},"documentation":{"id":1404,"nodeType":"StructuredDocumentation","src":"9876:114:4","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1532,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10004:5:4","nodeType":"FunctionDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"value","nameLocation":"10018:5:4","nodeType":"VariableDeclaration","scope":1532,"src":"10010:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"10010:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10009:15:4"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1532,"src":"10048:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"10048:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10047:9:4"},"scope":1695,"src":"9995:916:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1567,"nodeType":"Block","src":"11146:167:4","statements":[{"id":1566,"nodeType":"UncheckedBlock","src":"11156:151:4","statements":[{"assignments":[1544],"declarations":[{"constant":false,"id":1544,"mutability":"mutable","name":"result","nameLocation":"11188:6:4","nodeType":"VariableDeclaration","scope":1566,"src":"11180:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1543,"name":"uint256","nodeType":"ElementaryTypeName","src":"11180:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1548,"initialValue":{"arguments":[{"id":1546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"11203:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1545,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1532,1568],"referencedDeclaration":1532,"src":"11197:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11197:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11180:29:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1549,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"11230:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1550,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"11240:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1551,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"11252:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$836_$","typeString":"type(enum Math.Rounding)"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":834,"src":"11252:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"src":"11240:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11267:2:4","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"11273:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11267:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"11282:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11267:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11240:47:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11294:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11240:55:4","trueExpression":{"hexValue":"31","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11290:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1563,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11239:57:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11230:66:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1542,"id":1565,"nodeType":"Return","src":"11223:73:4"}]}]},"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"10917:143:4","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11074:5:4","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"value","nameLocation":"11088:5:4","nodeType":"VariableDeclaration","scope":1568,"src":"11080:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"11080:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1538,"mutability":"mutable","name":"rounding","nameLocation":"11104:8:4","nodeType":"VariableDeclaration","scope":1568,"src":"11095:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"typeName":{"id":1537,"nodeType":"UserDefinedTypeName","pathNode":{"id":1536,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":836,"src":"11095:8:4"},"referencedDeclaration":836,"src":"11095:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11079:34:4"},"returnParameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1568,"src":"11137:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1540,"name":"uint256","nodeType":"ElementaryTypeName","src":"11137:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11136:9:4"},"scope":1695,"src":"11065:248:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"11627:600:4","statements":[{"assignments":[1577],"declarations":[{"constant":false,"id":1577,"mutability":"mutable","name":"result","nameLocation":"11645:6:4","nodeType":"VariableDeclaration","scope":1654,"src":"11637:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1576,"name":"uint256","nodeType":"ElementaryTypeName","src":"11637:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1579,"initialValue":{"hexValue":"30","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11654:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11637:18:4"},{"id":1651,"nodeType":"UncheckedBlock","src":"11665:533:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1580,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11693:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11702:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11693:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11708:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11693:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1594,"nodeType":"IfStatement","src":"11689:98:4","trueBody":{"id":1593,"nodeType":"Block","src":"11711:76:4","statements":[{"expression":{"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11729:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11739:3:4","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11729:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1588,"nodeType":"ExpressionStatement","src":"11729:13:4"},{"expression":{"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1589,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"11760:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11770:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11760:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1592,"nodeType":"ExpressionStatement","src":"11760:12:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11804:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11813:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11804:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11818:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11804:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1609,"nodeType":"IfStatement","src":"11800:95:4","trueBody":{"id":1608,"nodeType":"Block","src":"11821:74:4","statements":[{"expression":{"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11839:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11849:2:4","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11839:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1603,"nodeType":"ExpressionStatement","src":"11839:12:4"},{"expression":{"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"11869:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11879:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11869:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1607,"nodeType":"ExpressionStatement","src":"11869:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11912:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11921:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11912:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11926:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11912:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1624,"nodeType":"IfStatement","src":"11908:95:4","trueBody":{"id":1623,"nodeType":"Block","src":"11929:74:4","statements":[{"expression":{"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1615,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"11947:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11947:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1618,"nodeType":"ExpressionStatement","src":"11947:12:4"},{"expression":{"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1619,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"11977:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11987:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11977:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1622,"nodeType":"ExpressionStatement","src":"11977:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"12020:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12029:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12020:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12020:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1639,"nodeType":"IfStatement","src":"12016:95:4","trueBody":{"id":1638,"nodeType":"Block","src":"12037:74:4","statements":[{"expression":{"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"12055:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:4","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12055:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1633,"nodeType":"ExpressionStatement","src":"12055:12:4"},{"expression":{"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"12085:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12095:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12085:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1637,"nodeType":"ExpressionStatement","src":"12085:11:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"12128:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12137:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12128:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12141:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12128:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1650,"nodeType":"IfStatement","src":"12124:64:4","trueBody":{"id":1649,"nodeType":"Block","src":"12144:44:4","statements":[{"expression":{"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"12162:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12172:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12162:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1648,"nodeType":"ExpressionStatement","src":"12162:11:4"}]}}]},{"expression":{"id":1652,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1577,"src":"12214:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1575,"id":1653,"nodeType":"Return","src":"12207:13:4"}]},"documentation":{"id":1569,"nodeType":"StructuredDocumentation","src":"11319:240:4","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11573:6:4","nodeType":"FunctionDefinition","parameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"value","nameLocation":"11588:5:4","nodeType":"VariableDeclaration","scope":1655,"src":"11580:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1570,"name":"uint256","nodeType":"ElementaryTypeName","src":"11580:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11579:15:4"},"returnParameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1655,"src":"11618:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"11618:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11617:9:4"},"scope":1695,"src":"11564:663:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1693,"nodeType":"Block","src":"12464:174:4","statements":[{"id":1692,"nodeType":"UncheckedBlock","src":"12474:158:4","statements":[{"assignments":[1667],"declarations":[{"constant":false,"id":1667,"mutability":"mutable","name":"result","nameLocation":"12506:6:4","nodeType":"VariableDeclaration","scope":1692,"src":"12498:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"12498:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1671,"initialValue":{"arguments":[{"id":1669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"12522:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1668,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1655,1694],"referencedDeclaration":1655,"src":"12515:6:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12515:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12498:30:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"12549:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1673,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"12559:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1674,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"12571:8:4","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$836_$","typeString":"type(enum Math.Rounding)"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":834,"src":"12571:11:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"src":"12559:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12586:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"12592:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12602:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12592:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12591:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12586:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"12607:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12586:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12559:53:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12619:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12559:61:4","trueExpression":{"hexValue":"31","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12615:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1689,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12558:63:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12549:72:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1665,"id":1691,"nodeType":"Return","src":"12542:79:4"}]}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"12233:144:4","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1694,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12391:6:4","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"value","nameLocation":"12406:5:4","nodeType":"VariableDeclaration","scope":1694,"src":"12398:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"12398:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1661,"mutability":"mutable","name":"rounding","nameLocation":"12422:8:4","nodeType":"VariableDeclaration","scope":1694,"src":"12413:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"},"typeName":{"id":1660,"nodeType":"UserDefinedTypeName","pathNode":{"id":1659,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":836,"src":"12413:8:4"},"referencedDeclaration":836,"src":"12413:8:4","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$836","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12397:34:4"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1694,"src":"12455:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1663,"name":"uint256","nodeType":"ElementaryTypeName","src":"12455:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12454:9:4"},"scope":1695,"src":"12382:256:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1696,"src":"58:12582:4","usedErrors":[]}],"src":"33:12608:4"},"id":4},"contracts/all/Ownable.sol":{"ast":{"absolutePath":"contracts/all/Ownable.sol","exportedSymbols":{"Context":[21],"Ownable":[1807]},"id":1808,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1697,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:5"},{"absolutePath":"contracts/all/Context.sol","file":"./Context.sol","id":1698,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1808,"sourceUnit":22,"src":"58:23:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1699,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":21,"src":"112:7:5"},"id":1700,"nodeType":"InheritanceSpecifier","src":"112:7:5"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1807,"linearizedBaseContracts":[1807,21],"name":"Ownable","nameLocation":"101:7:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1702,"mutability":"mutable","name":"_owner","nameLocation":"142:6:5","nodeType":"VariableDeclaration","scope":1807,"src":"126:22:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1701,"name":"address","nodeType":"ElementaryTypeName","src":"126:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":1708,"name":"OwnershipTransferred","nameLocation":"161:20:5","nodeType":"EventDefinition","parameters":{"id":1707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1704,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"198:13:5","nodeType":"VariableDeclaration","scope":1708,"src":"182:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1703,"name":"address","nodeType":"ElementaryTypeName","src":"182:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1706,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"229:8:5","nodeType":"VariableDeclaration","scope":1708,"src":"213:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1705,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"181:57:5"},"src":"155:84:5"},{"body":{"id":1717,"nodeType":"Block","src":"355:49:5","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1713,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"384:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"384:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1712,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"365:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"365:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1716,"nodeType":"ExpressionStatement","src":"365:32:5"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"245:91:5","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":1718,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[],"src":"352:2:5"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[],"src":"355:0:5"},"scope":1807,"src":"341:63:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1725,"nodeType":"Block","src":"513:41:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1721,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"523:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"523:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1723,"nodeType":"ExpressionStatement","src":"523:13:5"},{"id":1724,"nodeType":"PlaceholderStatement","src":"546:1:5"}]},"documentation":{"id":1719,"nodeType":"StructuredDocumentation","src":"410:77:5","text":" @dev Throws if called by any account other than the owner."},"id":1726,"name":"onlyOwner","nameLocation":"501:9:5","nodeType":"ModifierDefinition","parameters":{"id":1720,"nodeType":"ParameterList","parameters":[],"src":"510:2:5"},"src":"492:62:5","virtual":false,"visibility":"internal"},{"body":{"id":1734,"nodeType":"Block","src":"685:30:5","statements":[{"expression":{"id":1732,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"702:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1731,"id":1733,"nodeType":"Return","src":"695:13:5"}]},"documentation":{"id":1727,"nodeType":"StructuredDocumentation","src":"560:65:5","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":1735,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"639:5:5","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[],"src":"644:2:5"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"676:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1729,"name":"address","nodeType":"ElementaryTypeName","src":"676:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"675:9:5"},"scope":1807,"src":"630:85:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1748,"nodeType":"Block","src":"833:85:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1740,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"851:5:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"851:7:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1742,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"862:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"862:12:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"851:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"876:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":1739,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"843:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"843:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1747,"nodeType":"ExpressionStatement","src":"843:68:5"}]},"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"721:62:5","text":" @dev Throws if the sender is not the owner."},"id":1749,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"797:11:5","nodeType":"FunctionDefinition","parameters":{"id":1737,"nodeType":"ParameterList","parameters":[],"src":"808:2:5"},"returnParameters":{"id":1738,"nodeType":"ParameterList","parameters":[],"src":"833:0:5"},"scope":1807,"src":"788:130:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1762,"nodeType":"Block","src":"1307:47:5","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1344:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1336:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"1336:7:5","typeDescriptions":{}}},"id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1755,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"1317:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1317:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1761,"nodeType":"ExpressionStatement","src":"1317:30:5"}]},"documentation":{"id":1750,"nodeType":"StructuredDocumentation","src":"924:324:5","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":1763,"implemented":true,"kind":"function","modifiers":[{"id":1753,"kind":"modifierInvocation","modifierName":{"id":1752,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"1297:9:5"},"nodeType":"ModifierInvocation","src":"1297:9:5"}],"name":"renounceOwnership","nameLocation":"1262:17:5","nodeType":"FunctionDefinition","parameters":{"id":1751,"nodeType":"ParameterList","parameters":[],"src":"1279:2:5"},"returnParameters":{"id":1754,"nodeType":"ParameterList","parameters":[],"src":"1307:0:5"},"scope":1807,"src":"1253:101:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1785,"nodeType":"Block","src":"1573:128:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1772,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1591:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1611:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1603:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"1603:7:5","typeDescriptions":{}}},"id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1603:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1591:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1615:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":1771,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1583:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1583:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1780,"nodeType":"ExpressionStatement","src":"1583:73:5"},{"expression":{"arguments":[{"id":1782,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1685:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1781,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"1666:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1666:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"ExpressionStatement","src":"1666:28:5"}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"1360:138:5","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":1786,"implemented":true,"kind":"function","modifiers":[{"id":1769,"kind":"modifierInvocation","modifierName":{"id":1768,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"1563:9:5"},"nodeType":"ModifierInvocation","src":"1563:9:5"}],"name":"transferOwnership","nameLocation":"1512:17:5","nodeType":"FunctionDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"newOwner","nameLocation":"1538:8:5","nodeType":"VariableDeclaration","scope":1786,"src":"1530:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1765,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1529:18:5"},"returnParameters":{"id":1770,"nodeType":"ParameterList","parameters":[],"src":"1573:0:5"},"scope":1807,"src":"1503:198:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1805,"nodeType":"Block","src":"1918:124:5","statements":[{"assignments":[1793],"declarations":[{"constant":false,"id":1793,"mutability":"mutable","name":"oldOwner","nameLocation":"1936:8:5","nodeType":"VariableDeclaration","scope":1805,"src":"1928:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1792,"name":"address","nodeType":"ElementaryTypeName","src":"1928:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1795,"initialValue":{"id":1794,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"1947:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1928:25:5"},{"expression":{"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1796,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"1963:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1797,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"1972:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1963:17:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1799,"nodeType":"ExpressionStatement","src":"1963:17:5"},{"eventCall":{"arguments":[{"id":1801,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"2016:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1802,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"2026:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1800,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"1995:20:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1995:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1804,"nodeType":"EmitStatement","src":"1990:45:5"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"1707:143:5","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":1806,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1864:18:5","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"newOwner","nameLocation":"1891:8:5","nodeType":"VariableDeclaration","scope":1806,"src":"1883:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1788,"name":"address","nodeType":"ElementaryTypeName","src":"1883:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1882:18:5"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[],"src":"1918:0:5"},"scope":1807,"src":"1855:187:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1808,"src":"83:1961:5","usedErrors":[]}],"src":"33:2012:5"},"id":5},"contracts/all/Pausable.sol":{"ast":{"absolutePath":"contracts/all/Pausable.sol","exportedSymbols":{"Context":[21],"Pausable":[1914]},"id":1915,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1809,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:6"},{"absolutePath":"contracts/all/Context.sol","file":"./Context.sol","id":1810,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1915,"sourceUnit":22,"src":"58:23:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1811,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":21,"src":"113:7:6"},"id":1812,"nodeType":"InheritanceSpecifier","src":"113:7:6"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1914,"linearizedBaseContracts":[1914,21],"name":"Pausable","nameLocation":"101:8:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1813,"nodeType":"StructuredDocumentation","src":"127:73:6","text":" @dev Emitted when the pause is triggered by `account`."},"id":1817,"name":"Paused","nameLocation":"211:6:6","nodeType":"EventDefinition","parameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1815,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"226:7:6","nodeType":"VariableDeclaration","scope":1817,"src":"218:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1814,"name":"address","nodeType":"ElementaryTypeName","src":"218:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"217:17:6"},"src":"205:30:6"},{"anonymous":false,"documentation":{"id":1818,"nodeType":"StructuredDocumentation","src":"241:70:6","text":" @dev Emitted when the pause is lifted by `account`."},"id":1822,"name":"Unpaused","nameLocation":"322:8:6","nodeType":"EventDefinition","parameters":{"id":1821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"339:7:6","nodeType":"VariableDeclaration","scope":1822,"src":"331:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"330:17:6"},"src":"316:32:6"},{"constant":false,"id":1824,"mutability":"mutable","name":"_paused","nameLocation":"367:7:6","nodeType":"VariableDeclaration","scope":1914,"src":"354:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1823,"name":"bool","nodeType":"ElementaryTypeName","src":"354:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":1832,"nodeType":"Block","src":"467:32:6","statements":[{"expression":{"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1828,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"477:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"487:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"477:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1831,"nodeType":"ExpressionStatement","src":"477:15:6"}]},"documentation":{"id":1825,"nodeType":"StructuredDocumentation","src":"381:67:6","text":" @dev Initializes the contract in unpaused state."},"id":1833,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[],"src":"464:2:6"},"returnParameters":{"id":1827,"nodeType":"ParameterList","parameters":[],"src":"467:0:6"},"scope":1914,"src":"453:46:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1840,"nodeType":"Block","src":"710:47:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1836,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"720:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"720:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1838,"nodeType":"ExpressionStatement","src":"720:19:6"},{"id":1839,"nodeType":"PlaceholderStatement","src":"749:1:6"}]},"documentation":{"id":1834,"nodeType":"StructuredDocumentation","src":"505:175:6","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1841,"name":"whenNotPaused","nameLocation":"694:13:6","nodeType":"ModifierDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[],"src":"707:2:6"},"src":"685:72:6","virtual":false,"visibility":"internal"},{"body":{"id":1848,"nodeType":"Block","src":"957:44:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1844,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"967:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"967:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1846,"nodeType":"ExpressionStatement","src":"967:16:6"},{"id":1847,"nodeType":"PlaceholderStatement","src":"993:1:6"}]},"documentation":{"id":1842,"nodeType":"StructuredDocumentation","src":"763:167:6","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1849,"name":"whenPaused","nameLocation":"944:10:6","nodeType":"ModifierDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[],"src":"954:2:6"},"src":"935:66:6","virtual":false,"visibility":"internal"},{"body":{"id":1857,"nodeType":"Block","src":"1149:31:6","statements":[{"expression":{"id":1855,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"1166:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1854,"id":1856,"nodeType":"Return","src":"1159:14:6"}]},"documentation":{"id":1850,"nodeType":"StructuredDocumentation","src":"1007:84:6","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1858,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1105:6:6","nodeType":"FunctionDefinition","parameters":{"id":1851,"nodeType":"ParameterList","parameters":[],"src":"1111:2:6"},"returnParameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1858,"src":"1143:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1852,"name":"bool","nodeType":"ElementaryTypeName","src":"1143:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1142:6:6"},"scope":1914,"src":"1096:84:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1869,"nodeType":"Block","src":"1299:55:6","statements":[{"expression":{"arguments":[{"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1317:9:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1863,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1318:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1318:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":1866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1328:18:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":1862,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1309:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1309:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1868,"nodeType":"ExpressionStatement","src":"1309:38:6"}]},"documentation":{"id":1859,"nodeType":"StructuredDocumentation","src":"1186:57:6","text":" @dev Throws if the contract is paused."},"id":1870,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1257:17:6","nodeType":"FunctionDefinition","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[],"src":"1274:2:6"},"returnParameters":{"id":1861,"nodeType":"ParameterList","parameters":[],"src":"1299:0:6"},"scope":1914,"src":"1248:106:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1880,"nodeType":"Block","src":"1474:58:6","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1875,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"1492:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1492:8:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1502:22:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":1874,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1484:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1484:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1879,"nodeType":"ExpressionStatement","src":"1484:41:6"}]},"documentation":{"id":1871,"nodeType":"StructuredDocumentation","src":"1360:61:6","text":" @dev Throws if the contract is not paused."},"id":1881,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"1435:14:6","nodeType":"FunctionDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[],"src":"1449:2:6"},"returnParameters":{"id":1873,"nodeType":"ParameterList","parameters":[],"src":"1474:0:6"},"scope":1914,"src":"1426:106:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1896,"nodeType":"Block","src":"1716:66:6","statements":[{"expression":{"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1887,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"1726:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1736:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1726:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1890,"nodeType":"ExpressionStatement","src":"1726:14:6"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1892,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1762:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1762:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1891,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"1755:6:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1755:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1895,"nodeType":"EmitStatement","src":"1750:25:6"}]},"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"1538:124:6","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1897,"implemented":true,"kind":"function","modifiers":[{"id":1885,"kind":"modifierInvocation","modifierName":{"id":1884,"name":"whenNotPaused","nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"1702:13:6"},"nodeType":"ModifierInvocation","src":"1702:13:6"}],"name":"_pause","nameLocation":"1676:6:6","nodeType":"FunctionDefinition","parameters":{"id":1883,"nodeType":"ParameterList","parameters":[],"src":"1682:2:6"},"returnParameters":{"id":1886,"nodeType":"ParameterList","parameters":[],"src":"1716:0:6"},"scope":1914,"src":"1667:115:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1912,"nodeType":"Block","src":"1962:69:6","statements":[{"expression":{"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1903,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"1972:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1982:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1972:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1906,"nodeType":"ExpressionStatement","src":"1972:15:6"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1908,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"2011:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2011:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1907,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"2002:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2002:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1911,"nodeType":"EmitStatement","src":"1997:27:6"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"1788:121:6","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1913,"implemented":true,"kind":"function","modifiers":[{"id":1901,"kind":"modifierInvocation","modifierName":{"id":1900,"name":"whenPaused","nodeType":"IdentifierPath","referencedDeclaration":1849,"src":"1951:10:6"},"nodeType":"ModifierInvocation","src":"1951:10:6"}],"name":"_unpause","nameLocation":"1923:8:6","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[],"src":"1931:2:6"},"returnParameters":{"id":1902,"nodeType":"ParameterList","parameters":[],"src":"1962:0:6"},"scope":1914,"src":"1914:117:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1915,"src":"83:1950:6","usedErrors":[]}],"src":"33:2000:6"},"id":6},"contracts/all/ReentrancyGuard.sol":{"ast":{"absolutePath":"contracts/all/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1978]},"id":1979,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1916,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:7"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1978,"linearizedBaseContracts":[1978],"name":"ReentrancyGuard","nameLocation":"76:15:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1919,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"871:12:7","nodeType":"VariableDeclaration","scope":1978,"src":"846:41:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1917,"name":"uint256","nodeType":"ElementaryTypeName","src":"846:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"886:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1922,"mutability":"constant","name":"_ENTERED","nameLocation":"918:8:7","nodeType":"VariableDeclaration","scope":1978,"src":"893:37:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1920,"name":"uint256","nodeType":"ElementaryTypeName","src":"893:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"929:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1924,"mutability":"mutable","name":"_status","nameLocation":"953:7:7","nodeType":"VariableDeclaration","scope":1978,"src":"937:23:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1923,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":1931,"nodeType":"Block","src":"981:39:7","statements":[{"expression":{"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1927,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"991:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1928,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"1001:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"991:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1930,"nodeType":"ExpressionStatement","src":"991:22:7"}]},"id":1932,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1925,"nodeType":"ParameterList","parameters":[],"src":"978:2:7"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[],"src":"981:0:7"},"scope":1978,"src":"967:53:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1942,"nodeType":"Block","src":"1421:79:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1935,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1958,"src":"1431:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1431:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1937,"nodeType":"ExpressionStatement","src":"1431:21:7"},{"id":1938,"nodeType":"PlaceholderStatement","src":"1462:1:7"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1939,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"1473:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1473:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1941,"nodeType":"ExpressionStatement","src":"1473:20:7"}]},"documentation":{"id":1933,"nodeType":"StructuredDocumentation","src":"1026:366:7","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1943,"name":"nonReentrant","nameLocation":"1406:12:7","nodeType":"ModifierDefinition","parameters":{"id":1934,"nodeType":"ParameterList","parameters":[],"src":"1418:2:7"},"src":"1397:103:7","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"1545:248:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"1638:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1948,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"1649:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1638:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1659:33:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":1946,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1630:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1630:63:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1952,"nodeType":"ExpressionStatement","src":"1630:63:7"},{"expression":{"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1953,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"1768:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1954,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"1778:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1768:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1956,"nodeType":"ExpressionStatement","src":"1768:18:7"}]},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"1515:19:7","nodeType":"FunctionDefinition","parameters":{"id":1944,"nodeType":"ParameterList","parameters":[],"src":"1534:2:7"},"returnParameters":{"id":1945,"nodeType":"ParameterList","parameters":[],"src":"1545:0:7"},"scope":1978,"src":"1506:287:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1965,"nodeType":"Block","src":"1837:171:7","statements":[{"expression":{"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1961,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"1979:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1962,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"1989:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1979:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1964,"nodeType":"ExpressionStatement","src":"1979:22:7"}]},"id":1966,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"1808:18:7","nodeType":"FunctionDefinition","parameters":{"id":1959,"nodeType":"ParameterList","parameters":[],"src":"1826:2:7"},"returnParameters":{"id":1960,"nodeType":"ParameterList","parameters":[],"src":"1837:0:7"},"scope":1978,"src":"1799:209:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1976,"nodeType":"Block","src":"2251:43:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1972,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1924,"src":"2268:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1973,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"2279:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2268:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1971,"id":1975,"nodeType":"Return","src":"2261:26:7"}]},"documentation":{"id":1967,"nodeType":"StructuredDocumentation","src":"2014:168:7","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"2196:23:7","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[],"src":"2219:2:7"},"returnParameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"2245:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1969,"name":"bool","nodeType":"ElementaryTypeName","src":"2245:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2244:6:7"},"scope":1978,"src":"2187:107:7","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1979,"src":"58:2238:7","usedErrors":[]}],"src":"33:2264:7"},"id":7},"contracts/all/SignedMath.sol":{"ast":{"absolutePath":"contracts/all/SignedMath.sol","exportedSymbols":{"SignedMath":[2082]},"id":2083,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1980,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2082,"linearizedBaseContracts":[2082],"name":"SignedMath","nameLocation":"66:10:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1997,"nodeType":"Block","src":"218:37:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1990,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"235:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1991,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"239:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"235:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1994,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"247:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"235:13:8","trueExpression":{"id":1993,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"243:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1989,"id":1996,"nodeType":"Return","src":"228:20:8"}]},"documentation":{"id":1981,"nodeType":"StructuredDocumentation","src":"83:66:8","text":" @dev Returns the largest of two signed numbers."},"id":1998,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"163:3:8","nodeType":"FunctionDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1983,"mutability":"mutable","name":"a","nameLocation":"174:1:8","nodeType":"VariableDeclaration","scope":1998,"src":"167:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1982,"name":"int256","nodeType":"ElementaryTypeName","src":"167:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1985,"mutability":"mutable","name":"b","nameLocation":"184:1:8","nodeType":"VariableDeclaration","scope":1998,"src":"177:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1984,"name":"int256","nodeType":"ElementaryTypeName","src":"177:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"166:20:8"},"returnParameters":{"id":1989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1998,"src":"210:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1987,"name":"int256","nodeType":"ElementaryTypeName","src":"210:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"209:8:8"},"scope":2082,"src":"154:101:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2015,"nodeType":"Block","src":"397:37:8","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"414:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2009,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"418:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"414:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2012,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"426:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"414:13:8","trueExpression":{"id":2011,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"422:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2007,"id":2014,"nodeType":"Return","src":"407:20:8"}]},"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"261:67:8","text":" @dev Returns the smallest of two signed numbers."},"id":2016,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"342:3:8","nodeType":"FunctionDefinition","parameters":{"id":2004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"a","nameLocation":"353:1:8","nodeType":"VariableDeclaration","scope":2016,"src":"346:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2000,"name":"int256","nodeType":"ElementaryTypeName","src":"346:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2003,"mutability":"mutable","name":"b","nameLocation":"363:1:8","nodeType":"VariableDeclaration","scope":2016,"src":"356:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2002,"name":"int256","nodeType":"ElementaryTypeName","src":"356:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"345:20:8"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2016,"src":"389:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2005,"name":"int256","nodeType":"ElementaryTypeName","src":"389:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"388:8:8"},"scope":2082,"src":"333:101:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2059,"nodeType":"Block","src":"639:162:8","statements":[{"assignments":[2027],"declarations":[{"constant":false,"id":2027,"mutability":"mutable","name":"x","nameLocation":"708:1:8","nodeType":"VariableDeclaration","scope":2059,"src":"701:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2026,"name":"int256","nodeType":"ElementaryTypeName","src":"701:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2040,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"713:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2029,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"717:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"713:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"712:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"724:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2033,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"728:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"724:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"723:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"734:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"723:12:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"722:14:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"712:24:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"701:35:8"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2041,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"753:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2046,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"773:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"765:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"765:7:8","typeDescriptions":{}}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"765:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"765:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"758:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2042,"name":"int256","nodeType":"ElementaryTypeName","src":"758:6:8","typeDescriptions":{}}},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"758:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2051,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"787:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2052,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"791:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"787:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"786:7:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"758:35:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2056,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"757:37:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"753:41:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2025,"id":2058,"nodeType":"Return","src":"746:48:8"}]},"documentation":{"id":2017,"nodeType":"StructuredDocumentation","src":"440:126:8","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2060,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"580:7:8","nodeType":"FunctionDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"a","nameLocation":"595:1:8","nodeType":"VariableDeclaration","scope":2060,"src":"588:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2018,"name":"int256","nodeType":"ElementaryTypeName","src":"588:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"b","nameLocation":"605:1:8","nodeType":"VariableDeclaration","scope":2060,"src":"598:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2020,"name":"int256","nodeType":"ElementaryTypeName","src":"598:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"587:20:8"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2060,"src":"631:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2023,"name":"int256","nodeType":"ElementaryTypeName","src":"631:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"630:8:8"},"scope":2082,"src":"571:230:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2080,"nodeType":"Block","src":"945:158:8","statements":[{"id":2079,"nodeType":"UncheckedBlock","src":"955:142:8","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"1070:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1075:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1070:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1083:2:8","subExpression":{"id":2074,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"1084:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1070:15:8","trueExpression":{"id":2073,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"1079:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2068,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:8","typeDescriptions":{}}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1062:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2067,"id":2078,"nodeType":"Return","src":"1055:31:8"}]}]},"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"807:78:8","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2081,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"899:3:8","nodeType":"FunctionDefinition","parameters":{"id":2064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"n","nameLocation":"910:1:8","nodeType":"VariableDeclaration","scope":2081,"src":"903:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2062,"name":"int256","nodeType":"ElementaryTypeName","src":"903:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"902:10:8"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2081,"src":"936:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2065,"name":"uint256","nodeType":"ElementaryTypeName","src":"936:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"935:9:8"},"scope":2082,"src":"890:213:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2083,"src":"58:1047:8","usedErrors":[]}],"src":"33:1073:8"},"id":8},"contracts/all/Strings.sol":{"ast":{"absolutePath":"contracts/all/Strings.sol","exportedSymbols":{"Math":[1695],"SignedMath":[2082],"Strings":[2310]},"id":2311,"license":"MIT","nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/all/Math.sol","file":"./Math.sol","id":2084,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2311,"sourceUnit":1696,"src":"33:20:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/all/SignedMath.sol","file":"./SignedMath.sol","id":2085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2311,"sourceUnit":2083,"src":"54:26:9","symbolAliases":[],"unitAlias":""},{"id":2086,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"82:23:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2310,"linearizedBaseContracts":[2310],"name":"Strings","nameLocation":"115:7:9","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2089,"mutability":"constant","name":"_SYMBOLS","nameLocation":"154:8:9","nodeType":"VariableDeclaration","scope":2310,"src":"129:54:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2087,"name":"bytes16","nodeType":"ElementaryTypeName","src":"129:7:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"165:18:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2092,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"212:15:9","nodeType":"VariableDeclaration","scope":2310,"src":"189:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2090,"name":"uint8","nodeType":"ElementaryTypeName","src":"189:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"230:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2139,"nodeType":"Block","src":"405:625:9","statements":[{"id":2138,"nodeType":"UncheckedBlock","src":"415:609:9","statements":[{"assignments":[2101],"declarations":[{"constant":false,"id":2101,"mutability":"mutable","name":"length","nameLocation":"447:6:9","nodeType":"VariableDeclaration","scope":2138,"src":"439:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"439:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2108,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"467:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2102,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"456:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1695_$","typeString":"type(library Math)"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1532,"src":"456:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"456:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"476:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"456:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"439:38:9"},{"assignments":[2110],"declarations":[{"constant":false,"id":2110,"mutability":"mutable","name":"buffer","nameLocation":"505:6:9","nodeType":"VariableDeclaration","scope":2138,"src":"491:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2109,"name":"string","nodeType":"ElementaryTypeName","src":"491:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2115,"initialValue":{"arguments":[{"id":2113,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"525:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"514:10:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2111,"name":"string","nodeType":"ElementaryTypeName","src":"518:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"514:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"491:41:9"},{"assignments":[2117],"declarations":[{"constant":false,"id":2117,"mutability":"mutable","name":"ptr","nameLocation":"554:3:9","nodeType":"VariableDeclaration","scope":2138,"src":"546:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"546:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2118,"nodeType":"VariableDeclarationStatement","src":"546:11:9"},{"AST":{"nodeType":"YulBlock","src":"627:67:9","statements":[{"nodeType":"YulAssignment","src":"645:35:9","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"656:6:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"668:2:9","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"672:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"664:3:9"},"nodeType":"YulFunctionCall","src":"664:15:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:9"},"nodeType":"YulFunctionCall","src":"652:28:9"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"645:3:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2110,"isOffset":false,"isSlot":false,"src":"656:6:9","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"672:6:9","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"645:3:9","valueSize":1}],"id":2119,"nodeType":"InlineAssembly","src":"618:76:9"},{"body":{"id":2134,"nodeType":"Block","src":"720:267:9","statements":[{"expression":{"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"738:5:9","subExpression":{"id":2121,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"738:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2123,"nodeType":"ExpressionStatement","src":"738:5:9"},{"AST":{"nodeType":"YulBlock","src":"821:84:9","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"851:3:9"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"865:5:9"},{"kind":"number","nodeType":"YulLiteral","src":"872:2:9","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"861:3:9"},"nodeType":"YulFunctionCall","src":"861:14:9"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"877:8:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"856:4:9"},"nodeType":"YulFunctionCall","src":"856:30:9"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"843:7:9"},"nodeType":"YulFunctionCall","src":"843:44:9"},"nodeType":"YulExpressionStatement","src":"843:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2089,"isOffset":false,"isSlot":false,"src":"877:8:9","valueSize":1},{"declaration":2117,"isOffset":false,"isSlot":false,"src":"851:3:9","valueSize":1},{"declaration":2095,"isOffset":false,"isSlot":false,"src":"865:5:9","valueSize":1}],"id":2124,"nodeType":"InlineAssembly","src":"812:93:9"},{"expression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"922:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"931:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"922:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2128,"nodeType":"ExpressionStatement","src":"922:11:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"955:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"964:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"955:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2133,"nodeType":"IfStatement","src":"951:21:9","trueBody":{"id":2132,"nodeType":"Break","src":"967:5:9"}}]},"condition":{"hexValue":"74727565","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"714:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2135,"nodeType":"WhileStatement","src":"707:280:9"},{"expression":{"id":2136,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"1007:6:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2099,"id":2137,"nodeType":"Return","src":"1000:13:9"}]}]},"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"239:90:9","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2140,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"343:8:9","nodeType":"FunctionDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"value","nameLocation":"360:5:9","nodeType":"VariableDeclaration","scope":2140,"src":"352:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"352:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"351:15:9"},"returnParameters":{"id":2099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2140,"src":"390:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2097,"name":"string","nodeType":"ElementaryTypeName","src":"390:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"389:15:9"},"scope":2310,"src":"334:696:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2167,"nodeType":"Block","src":"1200:103:9","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"1241:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1249:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1241:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1259:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1241:20:9","trueExpression":{"hexValue":"2d","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1253:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"1287:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2159,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"1272:10:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2082_$","typeString":"type(library SignedMath)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2081,"src":"1272:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1272:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2158,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[2140,2168],"referencedDeclaration":2140,"src":"1263:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1263:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2150,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1224:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1224:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1224:71:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1217:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2148,"name":"string","nodeType":"ElementaryTypeName","src":"1217:6:9","typeDescriptions":{}}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1217:79:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2147,"id":2166,"nodeType":"Return","src":"1210:86:9"}]},"documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"1036:89:9","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2168,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1139:8:9","nodeType":"FunctionDefinition","parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"value","nameLocation":"1155:5:9","nodeType":"VariableDeclaration","scope":2168,"src":"1148:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2142,"name":"int256","nodeType":"ElementaryTypeName","src":"1148:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1147:14:9"},"returnParameters":{"id":2147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2168,"src":"1185:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2145,"name":"string","nodeType":"ElementaryTypeName","src":"1185:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1184:15:9"},"scope":2310,"src":"1130:173:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2187,"nodeType":"Block","src":"1482:100:9","statements":[{"id":2186,"nodeType":"UncheckedBlock","src":"1492:84:9","statements":[{"expression":{"arguments":[{"id":2177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"1535:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2171,"src":"1554:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2178,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"1542:4:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1695_$","typeString":"type(library Math)"}},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1655,"src":"1542:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1542:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1563:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1542:22:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2176,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2188,2264,2284],"referencedDeclaration":2264,"src":"1523:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1523:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2175,"id":2185,"nodeType":"Return","src":"1516:49:9"}]}]},"documentation":{"id":2169,"nodeType":"StructuredDocumentation","src":"1309:94:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2188,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1417:11:9","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"value","nameLocation":"1437:5:9","nodeType":"VariableDeclaration","scope":2188,"src":"1429:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1429:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1428:15:9"},"returnParameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2188,"src":"1467:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2173,"name":"string","nodeType":"ElementaryTypeName","src":"1467:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1466:15:9"},"scope":2310,"src":"1408:174:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2263,"nodeType":"Block","src":"1795:347:9","statements":[{"assignments":[2199],"declarations":[{"constant":false,"id":2199,"mutability":"mutable","name":"buffer","nameLocation":"1818:6:9","nodeType":"VariableDeclaration","scope":2263,"src":"1805:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2198,"name":"bytes","nodeType":"ElementaryTypeName","src":"1805:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2208,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1837:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2203,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1841:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1837:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1850:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1837:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1827:9:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2200,"name":"bytes","nodeType":"ElementaryTypeName","src":"1831:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1805:47:9"},{"expression":{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2209,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"1862:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2211,"indexExpression":{"hexValue":"30","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1869:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1862:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1874:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1862:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2214,"nodeType":"ExpressionStatement","src":"1862:15:9"},{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2215,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"1887:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2217,"indexExpression":{"hexValue":"31","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1894:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1887:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1899:3:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1887:15:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2220,"nodeType":"ExpressionStatement","src":"1887:15:9"},{"body":{"id":2249,"nodeType":"Block","src":"1957:83:9","statements":[{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2235,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"1971:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2237,"indexExpression":{"id":2236,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1978:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1971:9:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2238,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"1983:8:9","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2242,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"1992:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2000:3:9","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1992:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1983:21:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1971:33:9","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2244,"nodeType":"ExpressionStatement","src":"1971:33:9"},{"expression":{"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"2018:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2028:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2018:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2248,"nodeType":"ExpressionStatement","src":"2018:11:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1945:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1949:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1945:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2250,"initializationExpression":{"assignments":[2222],"declarations":[{"constant":false,"id":2222,"mutability":"mutable","name":"i","nameLocation":"1925:1:9","nodeType":"VariableDeclaration","scope":2250,"src":"1917:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"1917:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2228,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1929:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2224,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1933:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1929:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1942:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1929:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1917:26:9"},"loopExpression":{"expression":{"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1952:3:9","subExpression":{"id":2232,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1954:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2234,"nodeType":"ExpressionStatement","src":"1952:3:9"},"nodeType":"ForStatement","src":"1912:128:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2252,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"2057:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2066:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2057:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2069:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2251,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2049:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2049:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2257,"nodeType":"ExpressionStatement","src":"2049:55:9"},{"expression":{"arguments":[{"id":2260,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"2128:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2121:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2258,"name":"string","nodeType":"ElementaryTypeName","src":"2121:6:9","typeDescriptions":{}}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2121:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2197,"id":2262,"nodeType":"Return","src":"2114:21:9"}]},"documentation":{"id":2189,"nodeType":"StructuredDocumentation","src":"1588:112:9","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2264,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1714:11:9","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"value","nameLocation":"1734:5:9","nodeType":"VariableDeclaration","scope":2264,"src":"1726:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1726:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"length","nameLocation":"1749:6:9","nodeType":"VariableDeclaration","scope":2264,"src":"1741:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1741:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1725:31:9"},"returnParameters":{"id":2197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2264,"src":"1780:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2195,"name":"string","nodeType":"ElementaryTypeName","src":"1780:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1779:15:9"},"scope":2310,"src":"1705:437:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2283,"nodeType":"Block","src":"2367:76:9","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2277,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"2412:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2404:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2275,"name":"uint160","nodeType":"ElementaryTypeName","src":"2404:7:9","typeDescriptions":{}}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2404:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2396:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2273,"name":"uint256","nodeType":"ElementaryTypeName","src":"2396:7:9","typeDescriptions":{}}},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2396:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2280,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"2420:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2272,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2188,2264,2284],"referencedDeclaration":2264,"src":"2384:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2384:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2271,"id":2282,"nodeType":"Return","src":"2377:59:9"}]},"documentation":{"id":2265,"nodeType":"StructuredDocumentation","src":"2148:141:9","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2284,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2303:11:9","nodeType":"FunctionDefinition","parameters":{"id":2268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2267,"mutability":"mutable","name":"addr","nameLocation":"2323:4:9","nodeType":"VariableDeclaration","scope":2284,"src":"2315:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2266,"name":"address","nodeType":"ElementaryTypeName","src":"2315:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2314:14:9"},"returnParameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2284,"src":"2352:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2269,"name":"string","nodeType":"ElementaryTypeName","src":"2352:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2351:15:9"},"scope":2310,"src":"2294:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2308,"nodeType":"Block","src":"2598:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2297,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"2631:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2625:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2295,"name":"bytes","nodeType":"ElementaryTypeName","src":"2625:5:9","typeDescriptions":{}}},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2625:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2294,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2615:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2615:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2303,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"2654:1:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2648:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2301,"name":"bytes","nodeType":"ElementaryTypeName","src":"2648:5:9","typeDescriptions":{}}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2648:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2300,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2638:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2638:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2615:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2293,"id":2307,"nodeType":"Return","src":"2608:49:9"}]},"documentation":{"id":2285,"nodeType":"StructuredDocumentation","src":"2449:66:9","text":" @dev Returns true if the two strings are equal."},"id":2309,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2529:5:9","nodeType":"FunctionDefinition","parameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"a","nameLocation":"2549:1:9","nodeType":"VariableDeclaration","scope":2309,"src":"2535:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2286,"name":"string","nodeType":"ElementaryTypeName","src":"2535:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2289,"mutability":"mutable","name":"b","nameLocation":"2566:1:9","nodeType":"VariableDeclaration","scope":2309,"src":"2552:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2288,"name":"string","nodeType":"ElementaryTypeName","src":"2552:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2534:34:9"},"returnParameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2309,"src":"2592:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2291,"name":"bool","nodeType":"ElementaryTypeName","src":"2592:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2591:6:9"},"scope":2310,"src":"2520:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2311,"src":"107:2559:9","usedErrors":[]}],"src":"33:2634:9"},"id":9}},"contracts":{"contracts/all/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030473157dfb84ed0df2bd917e621749508d2dd86c8a9ff63e9b32d44012ce0a864736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS SELFBALANCE BALANCE JUMPI 0xDF 0xB8 0x4E 0xD0 0xDF 0x2B 0xD9 OR 0xE6 0x21 PUSH21 0x9508D2DD86C8A9FF63E9B32D44012CE0A864736F6C PUSH4 0x43000807 STOP CALLER ","sourceMap":"83:8761:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030473157dfb84ed0df2bd917e621749508d2dd86c8a9ff63e9b32d44012ce0a864736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS SELFBALANCE BALANCE JUMPI 0xDF 0xB8 0x4E 0xD0 0xDF 0x2B 0xD9 OR 0xE6 0x21 PUSH21 0x9508D2DD86C8A9FF63E9B32D44012CE0A864736F6C PUSH4 0x43000807 STOP CALLER ","sourceMap":"83:8761:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Strings.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x27fbb7a2b9ca955ae2e571964420b7360e266458173fdeebee74faa021d9dcd5\",\"license\":\"MIT\"},\"contracts/all/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc622fe67e6cfe4cc9f42437c03a6410094e396bb301237af9eace51b006e8e4f\",\"license\":\"MIT\"},\"contracts/all/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x340d9ad36f6ce25fcd20f4b29820f0b116452e675f827e0313fa07ab5170aa11\",\"license\":\"MIT\"},\"contracts/all/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SignedMath.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x5a1ee005ab149d5bfd739b90e60857000d7cc7787a91042691c92348021191b9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/EcoMarket.sol":{"EcoMarket":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_hashedMessage","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"}],"name":"VerifyTRXMessage","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"addToEscrow","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"msgHashes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"company","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"redeemPaymentFromEscrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"removeFromEscrow","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"sig","type":"bytes"}],"name":"splitSignature","outputs":[{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"},{"internalType":"uint8","name":"v","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAdress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"withdrawTRC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"to","type":"address"}],"name":"withdrawTRX","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1718":{"entryPoint":null,"id":1718,"parameterSlots":0,"returnSlots":0},"@_1833":{"entryPoint":null,"id":1833,"parameterSlots":0,"returnSlots":0},"@_1932":{"entryPoint":null,"id":1932,"parameterSlots":0,"returnSlots":0},"@_msgSender_11":{"entryPoint":83,"id":11,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_1806":{"entryPoint":91,"id":1806,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060008060006101000a81548160ff02191690831515021790555061004761003c61005360201b60201c565b61005b60201b60201c565b60018081905550610120565b600033905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e868061012f6000396000f3fe6080604052600436106100e15760003560e01c80638456cb591161007f578063a7bb580311610059578063a7bb58031461024a578063d0466d5214610289578063d3259a3c146102c6578063f2fde38b146102ef576100e8565b80638456cb59146101cb5780638da5cb5b146101e2578063a4af9d611461020d576100e8565b80635c975abb116100bb5780635c975abb146101565780636f3c00ff14610181578063715018a61461018b5780637aea7b1b146101a2576100e8565b80632801273b146100ed5780633f4ba83a1461011657806353ff09281461012d576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f91906110bc565b610318565b005b34801561012257600080fd5b5061012b61040e565b005b34801561013957600080fd5b50610154600480360381019061014f91906111ec565b610420565b005b34801561016257600080fd5b5061016b6105b8565b6040516101789190611658565b60405180910390f35b6101896105ce565b005b34801561019757600080fd5b506101a0610671565b005b3480156101ae57600080fd5b506101c960048036038101906101c49190611219565b610685565b005b3480156101d757600080fd5b506101e0610760565b005b3480156101ee57600080fd5b506101f7610772565b6040516102049190611614565b60405180910390f35b34801561021957600080fd5b50610234600480360381019061022f91906111a3565b61079b565b6040516102419190611658565b60405180910390f35b34801561025657600080fd5b50610271600480360381019061026c91906111a3565b6107d1565b60405161028093929190611673565b60405180910390f35b34801561029557600080fd5b506102b060048036038101906102ab919061113c565b610839565b6040516102bd9190611614565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e89190611259565b610902565b005b3480156102fb57600080fd5b506103166004803603810190610311919061108f565b610bea565b005b610320610c6e565b610328610cec565b610330610d36565b60008211610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a9061180f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82846040518363ffffffff1660e01b81526004016103ae92919061162f565b602060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610400919061110f565b50610409610d86565b505050565b610416610c6e565b61041e610d8f565b565b610428610cec565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a09061174f565b60405180910390fd5b8047116104eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e2906117ef565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053a9190611982565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050506105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac9061186f565b60405180910390fd5b50565b60008060009054906101000a900460ff16905090565b6105d6610cec565b60003411610619576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106109061174f565b60405180910390fd5b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610668919061192c565b92505081905550565b610679610c6e565b6106836000610df1565b565b61068d610c6e565b610695610cec565b61069d610d36565b600082116106e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d79061180f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074b9061182f565b60405180910390fd5b61075c610d86565b5050565b610768610c6e565b610770610eb6565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6002818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6000806000604184511461081a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108119061184f565b60405180910390fd5b6020840151925060408401519150606084015160001a90509193909250565b6000806040518060400160405280601881526020017f1954524f4e205369676e6564204d6573736167653a0a333200000000000000008152509050600081876040516020016108899291906115ec565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516108c694939291906116aa565b6020604051602081039080840390855afa1580156108e8573d6000803e3d6000fd5b505050602060405103519050809350505050949350505050565b61090a610cec565b610912610d36565b834711610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b906117ef565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba906117af565b60405180910390fd5b600015156002826040516109d791906115d5565b908152602001604051809103902060009054906101000a900460ff16151514610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c906116ef565b60405180910390fd5b6000610a42858585610f18565b90506000806000610a52856107d1565b9250925092506000610a6685838686610839565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd9061176f565b60405180910390fd5b6001600287604051610ae891906115d5565b908152602001604051809103902060006101000a81548160ff02191690831515021790555088600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b5c9190611982565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8a9081150290604051600060405180830381858888f19350505050610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce9061186f565b60405180910390fd5b5050505050610be4610d86565b50505050565b610bf2610c6e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c599061172f565b60405180910390fd5b610c6b81610df1565b50565b610c76610f50565b73ffffffffffffffffffffffffffffffffffffffff16610c94610772565b73ffffffffffffffffffffffffffffffffffffffff1614610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce1906117cf565b60405180910390fd5b565b610cf46105b8565b15610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b9061178f565b60405180910390fd5b565b60026001541415610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d739061188f565b60405180910390fd5b6002600181905550565b60018081905550565b610d97610f58565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610dda610f50565b604051610de79190611614565b60405180910390a1565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ebe610cec565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f01610f50565b604051610f0e9190611614565b60405180910390a1565b600033848484604051602001610f319493929190611587565b6040516020818303038152906040528051906020012090509392505050565b600033905090565b610f606105b8565b610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f969061170f565b60405180910390fd5b565b6000610fb4610faf846118d4565b6118af565b905082815260208101848484011115610fd057610fcf611b35565b5b610fdb848285611a27565b509392505050565b600081359050610ff281611dc6565b92915050565b60008135905061100781611ddd565b92915050565b60008151905061101c81611df4565b92915050565b60008135905061103181611e0b565b92915050565b600082601f83011261104c5761104b611b30565b5b813561105c848260208601610fa1565b91505092915050565b60008135905061107481611e22565b92915050565b60008135905061108981611e39565b92915050565b6000602082840312156110a5576110a4611b3f565b5b60006110b384828501610fe3565b91505092915050565b6000806000606084860312156110d5576110d4611b3f565b5b60006110e386828701610fe3565b93505060206110f486828701611065565b925050604061110586828701610fe3565b9150509250925092565b60006020828403121561112557611124611b3f565b5b60006111338482850161100d565b91505092915050565b6000806000806080858703121561115657611155611b3f565b5b600061116487828801611022565b94505060206111758782880161107a565b935050604061118687828801611022565b925050606061119787828801611022565b91505092959194509250565b6000602082840312156111b9576111b8611b3f565b5b600082013567ffffffffffffffff8111156111d7576111d6611b3a565b5b6111e384828501611037565b91505092915050565b60006020828403121561120257611201611b3f565b5b600061121084828501611065565b91505092915050565b600080604083850312156112305761122f611b3f565b5b600061123e85828601611065565b925050602061124f85828601610ff8565b9150509250929050565b6000806000806080858703121561127357611272611b3f565b5b600061128187828801611065565b945050602061129287828801611065565b93505060406112a387828801610fe3565b925050606085013567ffffffffffffffff8111156112c4576112c3611b3a565b5b6112d087828801611037565b91505092959194509250565b6112e5816119b6565b82525050565b6112fc6112f7826119b6565b611a9a565b82525050565b61130b816119da565b82525050565b61131a816119e6565b82525050565b61133161132c826119e6565b611aac565b82525050565b600061134282611905565b61134c8185611910565b935061135c818560208601611a36565b80840191505092915050565b600061137560088361191b565b915061138082611b62565b602082019050919050565b600061139860148361191b565b91506113a382611b8b565b602082019050919050565b60006113bb60268361191b565b91506113c682611bb4565b604082019050919050565b60006113de600e8361191b565b91506113e982611c03565b602082019050919050565b6000611401600d8361191b565b915061140c82611c2c565b602082019050919050565b600061142460108361191b565b915061142f82611c55565b602082019050919050565b6000611447600c8361191b565b915061145282611c7e565b602082019050919050565b600061146a60208361191b565b915061147582611ca7565b602082019050919050565b600061148d60158361191b565b915061149882611cd0565b602082019050919050565b60006114b060198361191b565b91506114bb82611cf9565b602082019050919050565b60006114d3601d8361191b565b91506114de82611d22565b602082019050919050565b60006114f660188361191b565b915061150182611d4b565b602082019050919050565b600061151960058361191b565b915061152482611d74565b602082019050919050565b600061153c601f8361191b565b915061154782611d9d565b602082019050919050565b61155b81611a10565b82525050565b61157261156d82611a10565b611ac8565b82525050565b61158181611a1a565b82525050565b600061159382876112eb565b6014820191506115a38286611561565b6020820191506115b38285611561565b6020820191506115c382846112eb565b60148201915081905095945050505050565b60006115e18284611337565b915081905092915050565b60006115f88285611337565b91506116048284611320565b6020820191508190509392505050565b600060208201905061162960008301846112dc565b92915050565b600060408201905061164460008301856112dc565b6116516020830184611552565b9392505050565b600060208201905061166d6000830184611302565b92915050565b60006060820190506116886000830186611311565b6116956020830185611311565b6116a26040830184611578565b949350505050565b60006080820190506116bf6000830187611311565b6116cc6020830186611578565b6116d96040830185611311565b6116e66060830184611311565b95945050505050565b6000602082019050818103600083015261170881611368565b9050919050565b600060208201905081810360008301526117288161138b565b9050919050565b60006020820190508181036000830152611748816113ae565b9050919050565b60006020820190508181036000830152611768816113d1565b9050919050565b60006020820190508181036000830152611788816113f4565b9050919050565b600060208201905081810360008301526117a881611417565b9050919050565b600060208201905081810360008301526117c88161143a565b9050919050565b600060208201905081810360008301526117e88161145d565b9050919050565b6000602082019050818103600083015261180881611480565b9050919050565b60006020820190508181036000830152611828816114a3565b9050919050565b60006020820190508181036000830152611848816114c6565b9050919050565b60006020820190508181036000830152611868816114e9565b9050919050565b600060208201905081810360008301526118888161150c565b9050919050565b600060208201905081810360008301526118a88161152f565b9050919050565b60006118b96118ca565b90506118c58282611a69565b919050565b6000604051905090565b600067ffffffffffffffff8211156118ef576118ee611b01565b5b6118f882611b44565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061193782611a10565b915061194283611a10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561197757611976611ad2565b5b828201905092915050565b600061198d82611a10565b915061199883611a10565b9250828210156119ab576119aa611ad2565b5b828203905092915050565b60006119c1826119f0565b9050919050565b60006119d3826119f0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611a54578082015181840152602081019050611a39565b83811115611a63576000848401525b50505050565b611a7282611b44565b810181811067ffffffffffffffff82111715611a9157611a90611b01565b5b80604052505050565b6000611aa582611ab6565b9050919050565b6000819050919050565b6000611ac182611b55565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f496e76616c696421000000000000000000000000000000000000000000000000600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f556e617574686f72697a65642100000000000000000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4e6f7420616c6c6f776564210000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e73756666696369656e742062616c616e6365210000000000000000000000600082015250565b7f45636f4d61726b65743a20496e76616c696420616d6f756e7400000000000000600082015250565b7f45636f4d61726b65743a204e6f7420656e6f7567682062616c616e6365000000600082015250565b7f696e76616c6964207369676e6174757265206c656e6774680000000000000000600082015250565b7f4572726f72000000000000000000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b611dcf816119b6565b8114611dda57600080fd5b50565b611de6816119c8565b8114611df157600080fd5b50565b611dfd816119da565b8114611e0857600080fd5b50565b611e14816119e6565b8114611e1f57600080fd5b50565b611e2b81611a10565b8114611e3657600080fd5b50565b611e4281611a1a565b8114611e4d57600080fd5b5056fea2646970667358221220061ab99a6aa5e577c1fdc344a8a2602a1df0c9af8f12c499965ffd51890d4f8864736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x47 PUSH2 0x3C PUSH2 0x53 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x5B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP PUSH2 0x120 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x1E86 DUP1 PUSH2 0x12F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA7BB5803 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA7BB5803 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xD0466D52 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xD3259A3C EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2EF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xA4AF9D61 EQ PUSH2 0x20D JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x6F3C00FF EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x7AEA7B1B EQ PUSH2 0x1A2 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x2801273B EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x53FF0928 EQ PUSH2 0x12D JUMPI PUSH2 0xE8 JUMP JUMPDEST CALLDATASIZE PUSH2 0xE8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x318 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x40E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x189 PUSH2 0x5CE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A0 PUSH2 0x671 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x1219 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH2 0x760 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x79B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x280 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AB SWAP2 SWAP1 PUSH2 0x113C JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BD SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x1259 JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x316 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x108F JUMP JUMPDEST PUSH2 0xBEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x328 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x330 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36A SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3AE SWAP3 SWAP2 SWAP1 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x400 SWAP2 SWAP1 PUSH2 0x110F JUMP JUMPDEST POP PUSH2 0x409 PUSH2 0xD86 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x416 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x41E PUSH2 0xD8F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x428 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 GT PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A0 SWAP1 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SELFBALANCE GT PUSH2 0x4EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E2 SWAP1 PUSH2 0x17EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x1982 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AC SWAP1 PUSH2 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x619 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x610 SWAP1 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x668 SWAP2 SWAP1 PUSH2 0x192C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x679 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x683 PUSH1 0x0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x68D PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x695 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x69D PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D7 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x754 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74B SWAP1 PUSH2 0x182F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x75C PUSH2 0xD86 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x768 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x770 PUSH2 0xEB6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x41 DUP5 MLOAD EQ PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x811 SWAP1 PUSH2 0x184F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1954524F4E205369676E6564204D6573736167653A0A33320000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP2 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x889 SWAP3 SWAP2 SWAP1 PUSH2 0x15EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x8C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x90A PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x912 PUSH2 0xD36 JUMP JUMPDEST DUP4 SELFBALANCE GT PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94B SWAP1 PUSH2 0x17EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BA SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9D7 SWAP2 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xA35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2C SWAP1 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA42 DUP6 DUP6 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA52 DUP6 PUSH2 0x7D1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH2 0xA66 DUP6 DUP4 DUP7 DUP7 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACD SWAP1 PUSH2 0x176F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP8 PUSH1 0x40 MLOAD PUSH2 0xAE8 SWAP2 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP9 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x1982 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP11 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP1 PUSH2 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xBE4 PUSH2 0xD86 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xBF2 PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC59 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC6B DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC76 PUSH2 0xF50 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC94 PUSH2 0x772 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCE1 SWAP1 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xCF4 PUSH2 0x5B8 JUMP JUMPDEST ISZERO PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2B SWAP1 PUSH2 0x178F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xD7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD73 SWAP1 PUSH2 0x188F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD97 PUSH2 0xF58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xDDA PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE7 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xEBE PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF01 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0E SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF31 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1587 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF60 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0xF9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF96 SWAP1 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB4 PUSH2 0xFAF DUP5 PUSH2 0x18D4 JUMP JUMPDEST PUSH2 0x18AF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xFD0 JUMPI PUSH2 0xFCF PUSH2 0x1B35 JUMP JUMPDEST JUMPDEST PUSH2 0xFDB DUP5 DUP3 DUP6 PUSH2 0x1A27 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFF2 DUP2 PUSH2 0x1DC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1007 DUP2 PUSH2 0x1DDD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x101C DUP2 PUSH2 0x1DF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1031 DUP2 PUSH2 0x1E0B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x104C JUMPI PUSH2 0x104B PUSH2 0x1B30 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x105C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xFA1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1074 DUP2 PUSH2 0x1E22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1089 DUP2 PUSH2 0x1E39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10A5 JUMPI PUSH2 0x10A4 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10B3 DUP5 DUP3 DUP6 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10D5 JUMPI PUSH2 0x10D4 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10E3 DUP7 DUP3 DUP8 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10F4 DUP7 DUP3 DUP8 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1105 DUP7 DUP3 DUP8 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1125 JUMPI PUSH2 0x1124 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1133 DUP5 DUP3 DUP6 ADD PUSH2 0x100D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1156 JUMPI PUSH2 0x1155 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1164 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1175 DUP8 DUP3 DUP9 ADD PUSH2 0x107A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1186 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1197 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B8 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11D7 JUMPI PUSH2 0x11D6 PUSH2 0x1B3A JUMP JUMPDEST JUMPDEST PUSH2 0x11E3 DUP5 DUP3 DUP6 ADD PUSH2 0x1037 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1210 DUP5 DUP3 DUP6 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1230 JUMPI PUSH2 0x122F PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x123E DUP6 DUP3 DUP7 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x124F DUP6 DUP3 DUP7 ADD PUSH2 0xFF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1273 JUMPI PUSH2 0x1272 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1281 DUP8 DUP3 DUP9 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1292 DUP8 DUP3 DUP9 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x12A3 DUP8 DUP3 DUP9 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C4 JUMPI PUSH2 0x12C3 PUSH2 0x1B3A JUMP JUMPDEST JUMPDEST PUSH2 0x12D0 DUP8 DUP3 DUP9 ADD PUSH2 0x1037 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x12E5 DUP2 PUSH2 0x19B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x12FC PUSH2 0x12F7 DUP3 PUSH2 0x19B6 JUMP JUMPDEST PUSH2 0x1A9A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x130B DUP2 PUSH2 0x19DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x131A DUP2 PUSH2 0x19E6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1331 PUSH2 0x132C DUP3 PUSH2 0x19E6 JUMP JUMPDEST PUSH2 0x1AAC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1342 DUP3 PUSH2 0x1905 JUMP JUMPDEST PUSH2 0x134C DUP2 DUP6 PUSH2 0x1910 JUMP JUMPDEST SWAP4 POP PUSH2 0x135C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A36 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1375 PUSH1 0x8 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1380 DUP3 PUSH2 0x1B62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1398 PUSH1 0x14 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13A3 DUP3 PUSH2 0x1B8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BB PUSH1 0x26 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13C6 DUP3 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13DE PUSH1 0xE DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13E9 DUP3 PUSH2 0x1C03 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1401 PUSH1 0xD DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x140C DUP3 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1424 PUSH1 0x10 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x142F DUP3 PUSH2 0x1C55 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1447 PUSH1 0xC DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1452 DUP3 PUSH2 0x1C7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146A PUSH1 0x20 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1475 DUP3 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x148D PUSH1 0x15 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1498 DUP3 PUSH2 0x1CD0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B0 PUSH1 0x19 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x14BB DUP3 PUSH2 0x1CF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D3 PUSH1 0x1D DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x14DE DUP3 PUSH2 0x1D22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14F6 PUSH1 0x18 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1501 DUP3 PUSH2 0x1D4B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1519 PUSH1 0x5 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1524 DUP3 PUSH2 0x1D74 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x153C PUSH1 0x1F DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1547 DUP3 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x155B DUP2 PUSH2 0x1A10 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1572 PUSH2 0x156D DUP3 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x1AC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1581 DUP2 PUSH2 0x1A1A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1593 DUP3 DUP8 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x15A3 DUP3 DUP7 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x15B3 DUP3 DUP6 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x15C3 DUP3 DUP5 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E1 DUP3 DUP5 PUSH2 0x1337 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F8 DUP3 DUP6 PUSH2 0x1337 JUMP JUMPDEST SWAP2 POP PUSH2 0x1604 DUP3 DUP5 PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1629 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1644 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x12DC JUMP JUMPDEST PUSH2 0x1651 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1552 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x166D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1302 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1688 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x1695 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16A2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1578 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x16BF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16CC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x16D9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1311 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1708 DUP2 PUSH2 0x1368 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1728 DUP2 PUSH2 0x138B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1748 DUP2 PUSH2 0x13AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1768 DUP2 PUSH2 0x13D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1788 DUP2 PUSH2 0x13F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17A8 DUP2 PUSH2 0x1417 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17C8 DUP2 PUSH2 0x143A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17E8 DUP2 PUSH2 0x145D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1808 DUP2 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1828 DUP2 PUSH2 0x14A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1848 DUP2 PUSH2 0x14C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1868 DUP2 PUSH2 0x14E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1888 DUP2 PUSH2 0x150C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18A8 DUP2 PUSH2 0x152F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B9 PUSH2 0x18CA JUMP JUMPDEST SWAP1 POP PUSH2 0x18C5 DUP3 DUP3 PUSH2 0x1A69 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EF JUMPI PUSH2 0x18EE PUSH2 0x1B01 JUMP JUMPDEST JUMPDEST PUSH2 0x18F8 DUP3 PUSH2 0x1B44 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1937 DUP3 PUSH2 0x1A10 JUMP JUMPDEST SWAP2 POP PUSH2 0x1942 DUP4 PUSH2 0x1A10 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1977 JUMPI PUSH2 0x1976 PUSH2 0x1AD2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198D DUP3 PUSH2 0x1A10 JUMP JUMPDEST SWAP2 POP PUSH2 0x1998 DUP4 PUSH2 0x1A10 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x19AB JUMPI PUSH2 0x19AA PUSH2 0x1AD2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19C1 DUP3 PUSH2 0x19F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D3 DUP3 PUSH2 0x19F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A54 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A39 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1A63 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1A72 DUP3 PUSH2 0x1B44 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A91 JUMPI PUSH2 0x1A90 PUSH2 0x1B01 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA5 DUP3 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC1 DUP3 PUSH2 0x1B55 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696421000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E76616C696420616D6F756E74000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x556E617574686F72697A65642100000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4E6F7420616C6C6F776564210000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365210000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45636F4D61726B65743A20496E76616C696420616D6F756E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45636F4D61726B65743A204E6F7420656E6F7567682062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x696E76616C6964207369676E6174757265206C656E6774680000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4572726F72000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1DCF DUP2 PUSH2 0x19B6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1DE6 DUP2 PUSH2 0x19C8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1DFD DUP2 PUSH2 0x19DA JUMP JUMPDEST DUP2 EQ PUSH2 0x1E08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E14 DUP2 PUSH2 0x19E6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E2B DUP2 PUSH2 0x1A10 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E42 DUP2 PUSH2 0x1A1A JUMP JUMPDEST DUP2 EQ PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD BYTE 0xB9 SWAP11 PUSH11 0xA5E577C1FDC344A8A2602A SAR CREATE 0xC9 0xAF DUP16 SLT 0xC4 SWAP10 SWAP7 0x5F REVERT MLOAD DUP10 0xD 0x4F DUP9 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"189:3526:2:-:0;;;;;;;;;;;;;487:5:6;477:7;;:15;;;;;;;;;;;;;;;;;;365:32:5;384:12;:10;;;:12;;:::i;:::-;365:18;;;:32;;:::i;:::-;886:1:7;991:7;:22;;;;189:3526:2;;587:96:0;640:7;666:10;659:17;;587:96;:::o;1855:187:5:-;1928:16;1947:6;;;;;;;;;;;1928:25;;1972:8;1963:6;;:17;;;;;;;;;;;;;;;;;;2026:8;1995:40;;2016:8;1995:40;;;;;;;;;;;;1918:124;1855:187;:::o;189:3526:2:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@VerifyTRXMessage_644":{"entryPoint":2105,"id":644,"parameterSlots":4,"returnSlots":1},"@_752":{"entryPoint":null,"id":752,"parameterSlots":0,"returnSlots":0},"@_checkOwner_1749":{"entryPoint":3182,"id":1749,"parameterSlots":0,"returnSlots":0},"@_getHash_605":{"entryPoint":3864,"id":605,"parameterSlots":3,"returnSlots":1},"@_msgSender_11":{"entryPoint":3920,"id":11,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_1966":{"entryPoint":3462,"id":1966,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_1958":{"entryPoint":3382,"id":1958,"parameterSlots":0,"returnSlots":0},"@_pause_1897":{"entryPoint":3766,"id":1897,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_1870":{"entryPoint":3308,"id":1870,"parameterSlots":0,"returnSlots":0},"@_requirePaused_1881":{"entryPoint":3928,"id":1881,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_1806":{"entryPoint":3569,"id":1806,"parameterSlots":1,"returnSlots":0},"@_unpause_1913":{"entryPoint":3471,"id":1913,"parameterSlots":0,"returnSlots":0},"@addToEscrow_534":{"entryPoint":1486,"id":534,"parameterSlots":0,"returnSlots":0},"@msgHashes_406":{"entryPoint":1947,"id":406,"parameterSlots":0,"returnSlots":0},"@owner_1735":{"entryPoint":1906,"id":1735,"parameterSlots":0,"returnSlots":1},"@pause_679":{"entryPoint":1888,"id":679,"parameterSlots":0,"returnSlots":0},"@paused_1858":{"entryPoint":1464,"id":1858,"parameterSlots":0,"returnSlots":1},"@redeemPaymentFromEscrow_512":{"entryPoint":2306,"id":512,"parameterSlots":4,"returnSlots":0},"@removeFromEscrow_582":{"entryPoint":1056,"id":582,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_1763":{"entryPoint":1649,"id":1763,"parameterSlots":0,"returnSlots":0},"@splitSignature_670":{"entryPoint":2001,"id":670,"parameterSlots":1,"returnSlots":3},"@transferOwnership_1786":{"entryPoint":3050,"id":1786,"parameterSlots":1,"returnSlots":0},"@unpause_688":{"entryPoint":1038,"id":688,"parameterSlots":0,"returnSlots":0},"@withdrawTRC20_748":{"entryPoint":792,"id":748,"parameterSlots":3,"returnSlots":0},"@withdrawTRX_717":{"entryPoint":1669,"id":717,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":4001,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":4067,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_payable":{"entryPoint":4088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":4109,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":4130,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":4151,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4197,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":4218,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4239,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_address":{"entryPoint":4284,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4367,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint8t_bytes32t_bytes32":{"entryPoint":4412,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":4515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4588,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address_payable":{"entryPoint":4633,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_memory_ptr":{"entryPoint":4697,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4828,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack":{"entryPoint":4843,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4866,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":4881,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":4896,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87_to_t_string_memory_ptr_fromStack":{"entryPoint":4968,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack":{"entryPoint":5003,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":5038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1_to_t_string_memory_ptr_fromStack":{"entryPoint":5073,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b_to_t_string_memory_ptr_fromStack":{"entryPoint":5108,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack":{"entryPoint":5143,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127_to_t_string_memory_ptr_fromStack":{"entryPoint":5178,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":5213,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91_to_t_string_memory_ptr_fromStack":{"entryPoint":5248,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad_to_t_string_memory_ptr_fromStack":{"entryPoint":5283,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6_to_t_string_memory_ptr_fromStack":{"entryPoint":5318,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87_to_t_string_memory_ptr_fromStack":{"entryPoint":5353,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1_to_t_string_memory_ptr_fromStack":{"entryPoint":5388,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":5423,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5458,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack":{"entryPoint":5473,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":5496,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":5511,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5589,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes32__to_t_bytes_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":5612,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5652,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":5679,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5720,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__fromStack_reversed":{"entryPoint":5747,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":5802,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5871,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5903,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5935,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5999,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6031,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6063,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6095,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6127,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6159,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6191,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6223,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6255,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6287,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":6319,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6346,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6356,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":6405,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":6416,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6427,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6444,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6530,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6582,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address_payable":{"entryPoint":6600,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6618,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":6630,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6640,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":6672,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":6682,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":6695,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":6710,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":6761,"id":null,"parameterSlots":2,"returnSlots":0},"leftAlign_t_address":{"entryPoint":6810,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":6828,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint160":{"entryPoint":6838,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint256":{"entryPoint":6856,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6866,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6913,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6960,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6965,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6970,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6975,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":6980,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_96":{"entryPoint":6997,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87":{"entryPoint":7010,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a":{"entryPoint":7051,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":7092,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1":{"entryPoint":7171,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b":{"entryPoint":7212,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a":{"entryPoint":7253,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127":{"entryPoint":7294,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":7335,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91":{"entryPoint":7376,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad":{"entryPoint":7417,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6":{"entryPoint":7458,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87":{"entryPoint":7499,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1":{"entryPoint":7540,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":7581,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":7622,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address_payable":{"entryPoint":7645,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7668,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":7691,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":7714,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":7737,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:29468:10","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:10","statements":[{"nodeType":"YulAssignment","src":"100:74:10","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:10"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:10"},"nodeType":"YulFunctionCall","src":"125:48:10"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:10"},"nodeType":"YulFunctionCall","src":"109:65:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:10"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:10"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:10"},"nodeType":"YulFunctionCall","src":"183:21:10"},"nodeType":"YulExpressionStatement","src":"183:21:10"},{"nodeType":"YulVariableDeclaration","src":"213:27:10","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:10"},"nodeType":"YulFunctionCall","src":"224:16:10"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:10"},"nodeType":"YulFunctionCall","src":"280:79:10"},"nodeType":"YulExpressionStatement","src":"280:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:10"},"nodeType":"YulFunctionCall","src":"255:16:10"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:10"},"nodeType":"YulFunctionCall","src":"252:25:10"},"nodeType":"YulIf","src":"249:112:10"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:10"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:10"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:10"},"nodeType":"YulFunctionCall","src":"370:41:10"},"nodeType":"YulExpressionStatement","src":"370:41:10"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:10","type":""}],"src":"7:410:10"},{"body":{"nodeType":"YulBlock","src":"475:87:10","statements":[{"nodeType":"YulAssignment","src":"485:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:10"},"nodeType":"YulFunctionCall","src":"494:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:10"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:10"},"nodeType":"YulFunctionCall","src":"523:33:10"},"nodeType":"YulExpressionStatement","src":"523:33:10"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:10","type":""}],"src":"423:139:10"},{"body":{"nodeType":"YulBlock","src":"628:95:10","statements":[{"nodeType":"YulAssignment","src":"638:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"660:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"647:12:10"},"nodeType":"YulFunctionCall","src":"647:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"638:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"711:5:10"}],"functionName":{"name":"validator_revert_t_address_payable","nodeType":"YulIdentifier","src":"676:34:10"},"nodeType":"YulFunctionCall","src":"676:41:10"},"nodeType":"YulExpressionStatement","src":"676:41:10"}]},"name":"abi_decode_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"606:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"614:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"622:5:10","type":""}],"src":"568:155:10"},{"body":{"nodeType":"YulBlock","src":"789:77:10","statements":[{"nodeType":"YulAssignment","src":"799:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"814:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"808:5:10"},"nodeType":"YulFunctionCall","src":"808:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"799:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"854:5:10"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"830:23:10"},"nodeType":"YulFunctionCall","src":"830:30:10"},"nodeType":"YulExpressionStatement","src":"830:30:10"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"767:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"775:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"783:5:10","type":""}],"src":"729:137:10"},{"body":{"nodeType":"YulBlock","src":"924:87:10","statements":[{"nodeType":"YulAssignment","src":"934:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"956:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"943:12:10"},"nodeType":"YulFunctionCall","src":"943:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"934:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"999:5:10"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"972:26:10"},"nodeType":"YulFunctionCall","src":"972:33:10"},"nodeType":"YulExpressionStatement","src":"972:33:10"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"902:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"910:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"918:5:10","type":""}],"src":"872:139:10"},{"body":{"nodeType":"YulBlock","src":"1091:277:10","statements":[{"body":{"nodeType":"YulBlock","src":"1140:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1142:77:10"},"nodeType":"YulFunctionCall","src":"1142:79:10"},"nodeType":"YulExpressionStatement","src":"1142:79:10"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1119:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1127:4:10","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1115:3:10"},"nodeType":"YulFunctionCall","src":"1115:17:10"},{"name":"end","nodeType":"YulIdentifier","src":"1134:3:10"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1111:3:10"},"nodeType":"YulFunctionCall","src":"1111:27:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1104:6:10"},"nodeType":"YulFunctionCall","src":"1104:35:10"},"nodeType":"YulIf","src":"1101:122:10"},{"nodeType":"YulVariableDeclaration","src":"1232:34:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1259:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1246:12:10"},"nodeType":"YulFunctionCall","src":"1246:20:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1236:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1275:87:10","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1335:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1343:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1331:3:10"},"nodeType":"YulFunctionCall","src":"1331:17:10"},{"name":"length","nodeType":"YulIdentifier","src":"1350:6:10"},{"name":"end","nodeType":"YulIdentifier","src":"1358:3:10"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1284:46:10"},"nodeType":"YulFunctionCall","src":"1284:78:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1275:5:10"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1069:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1077:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1085:5:10","type":""}],"src":"1030:338:10"},{"body":{"nodeType":"YulBlock","src":"1426:87:10","statements":[{"nodeType":"YulAssignment","src":"1436:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1458:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1445:12:10"},"nodeType":"YulFunctionCall","src":"1445:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1436:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1501:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1474:26:10"},"nodeType":"YulFunctionCall","src":"1474:33:10"},"nodeType":"YulExpressionStatement","src":"1474:33:10"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1404:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1412:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1420:5:10","type":""}],"src":"1374:139:10"},{"body":{"nodeType":"YulBlock","src":"1569:85:10","statements":[{"nodeType":"YulAssignment","src":"1579:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1601:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1588:12:10"},"nodeType":"YulFunctionCall","src":"1588:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1579:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1642:5:10"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"1617:24:10"},"nodeType":"YulFunctionCall","src":"1617:31:10"},"nodeType":"YulExpressionStatement","src":"1617:31:10"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1547:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1555:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1563:5:10","type":""}],"src":"1519:135:10"},{"body":{"nodeType":"YulBlock","src":"1726:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"1772:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1774:77:10"},"nodeType":"YulFunctionCall","src":"1774:79:10"},"nodeType":"YulExpressionStatement","src":"1774:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1747:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"1756:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1743:3:10"},"nodeType":"YulFunctionCall","src":"1743:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"1768:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1739:3:10"},"nodeType":"YulFunctionCall","src":"1739:32:10"},"nodeType":"YulIf","src":"1736:119:10"},{"nodeType":"YulBlock","src":"1865:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1880:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1894:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1884:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1909:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1944:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1955:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1940:3:10"},"nodeType":"YulFunctionCall","src":"1940:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1964:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1919:20:10"},"nodeType":"YulFunctionCall","src":"1919:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1909:6:10"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1696:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1707:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1719:6:10","type":""}],"src":"1660:329:10"},{"body":{"nodeType":"YulBlock","src":"2095:519:10","statements":[{"body":{"nodeType":"YulBlock","src":"2141:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2143:77:10"},"nodeType":"YulFunctionCall","src":"2143:79:10"},"nodeType":"YulExpressionStatement","src":"2143:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2116:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"2125:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2112:3:10"},"nodeType":"YulFunctionCall","src":"2112:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"2137:2:10","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2108:3:10"},"nodeType":"YulFunctionCall","src":"2108:32:10"},"nodeType":"YulIf","src":"2105:119:10"},{"nodeType":"YulBlock","src":"2234:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2249:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2263:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2253:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2278:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2313:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2324:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2309:3:10"},"nodeType":"YulFunctionCall","src":"2309:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2333:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2288:20:10"},"nodeType":"YulFunctionCall","src":"2288:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2278:6:10"}]}]},{"nodeType":"YulBlock","src":"2361:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2376:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2390:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2380:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2406:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2441:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2452:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2437:3:10"},"nodeType":"YulFunctionCall","src":"2437:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2461:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2416:20:10"},"nodeType":"YulFunctionCall","src":"2416:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2406:6:10"}]}]},{"nodeType":"YulBlock","src":"2489:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2518:2:10","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2508:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2534:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2569:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2580:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2565:3:10"},"nodeType":"YulFunctionCall","src":"2565:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2589:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2544:20:10"},"nodeType":"YulFunctionCall","src":"2544:53:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2534:6:10"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2049:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2060:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2072:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2080:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2088:6:10","type":""}],"src":"1995:619:10"},{"body":{"nodeType":"YulBlock","src":"2694:271:10","statements":[{"body":{"nodeType":"YulBlock","src":"2740:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2742:77:10"},"nodeType":"YulFunctionCall","src":"2742:79:10"},"nodeType":"YulExpressionStatement","src":"2742:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2715:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"2724:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2711:3:10"},"nodeType":"YulFunctionCall","src":"2711:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"2736:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2707:3:10"},"nodeType":"YulFunctionCall","src":"2707:32:10"},"nodeType":"YulIf","src":"2704:119:10"},{"nodeType":"YulBlock","src":"2833:125:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2848:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2862:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2852:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2877:71:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2920:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2931:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2916:3:10"},"nodeType":"YulFunctionCall","src":"2916:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2940:7:10"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"2887:28:10"},"nodeType":"YulFunctionCall","src":"2887:61:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2877:6:10"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2664:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2675:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2687:6:10","type":""}],"src":"2620:345:10"},{"body":{"nodeType":"YulBlock","src":"3086:646:10","statements":[{"body":{"nodeType":"YulBlock","src":"3133:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3135:77:10"},"nodeType":"YulFunctionCall","src":"3135:79:10"},"nodeType":"YulExpressionStatement","src":"3135:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3107:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"3116:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3103:3:10"},"nodeType":"YulFunctionCall","src":"3103:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3128:3:10","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3099:3:10"},"nodeType":"YulFunctionCall","src":"3099:33:10"},"nodeType":"YulIf","src":"3096:120:10"},{"nodeType":"YulBlock","src":"3226:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3241:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3255:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3245:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3270:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3305:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3316:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3301:3:10"},"nodeType":"YulFunctionCall","src":"3301:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3325:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3280:20:10"},"nodeType":"YulFunctionCall","src":"3280:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3270:6:10"}]}]},{"nodeType":"YulBlock","src":"3353:116:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3368:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3382:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3372:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3398:61:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3431:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3442:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3427:3:10"},"nodeType":"YulFunctionCall","src":"3427:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3451:7:10"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"3408:18:10"},"nodeType":"YulFunctionCall","src":"3408:51:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3398:6:10"}]}]},{"nodeType":"YulBlock","src":"3479:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3494:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3508:2:10","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3498:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3524:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3559:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3570:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3555:3:10"},"nodeType":"YulFunctionCall","src":"3555:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3579:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3534:20:10"},"nodeType":"YulFunctionCall","src":"3534:53:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3524:6:10"}]}]},{"nodeType":"YulBlock","src":"3607:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3622:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3636:2:10","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3626:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3652:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3687:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3698:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3683:3:10"},"nodeType":"YulFunctionCall","src":"3683:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3707:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3662:20:10"},"nodeType":"YulFunctionCall","src":"3662:53:10"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3652:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3032:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3043:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3055:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3063:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3071:6:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3079:6:10","type":""}],"src":"2971:761:10"},{"body":{"nodeType":"YulBlock","src":"3813:432:10","statements":[{"body":{"nodeType":"YulBlock","src":"3859:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3861:77:10"},"nodeType":"YulFunctionCall","src":"3861:79:10"},"nodeType":"YulExpressionStatement","src":"3861:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3834:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"3843:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3830:3:10"},"nodeType":"YulFunctionCall","src":"3830:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3855:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3826:3:10"},"nodeType":"YulFunctionCall","src":"3826:32:10"},"nodeType":"YulIf","src":"3823:119:10"},{"nodeType":"YulBlock","src":"3952:286:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3967:45:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3998:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"4009:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3994:3:10"},"nodeType":"YulFunctionCall","src":"3994:17:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3981:12:10"},"nodeType":"YulFunctionCall","src":"3981:31:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3971:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"4059:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4061:77:10"},"nodeType":"YulFunctionCall","src":"4061:79:10"},"nodeType":"YulExpressionStatement","src":"4061:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4031:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"4039:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4028:2:10"},"nodeType":"YulFunctionCall","src":"4028:30:10"},"nodeType":"YulIf","src":"4025:117:10"},{"nodeType":"YulAssignment","src":"4156:72:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4200:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4211:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4196:3:10"},"nodeType":"YulFunctionCall","src":"4196:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4220:7:10"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"4166:29:10"},"nodeType":"YulFunctionCall","src":"4166:62:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4156:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3783:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3794:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3806:6:10","type":""}],"src":"3738:507:10"},{"body":{"nodeType":"YulBlock","src":"4317:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"4363:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4365:77:10"},"nodeType":"YulFunctionCall","src":"4365:79:10"},"nodeType":"YulExpressionStatement","src":"4365:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4338:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"4347:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4334:3:10"},"nodeType":"YulFunctionCall","src":"4334:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4359:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4330:3:10"},"nodeType":"YulFunctionCall","src":"4330:32:10"},"nodeType":"YulIf","src":"4327:119:10"},{"nodeType":"YulBlock","src":"4456:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4471:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4485:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4475:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4500:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4535:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4546:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4531:3:10"},"nodeType":"YulFunctionCall","src":"4531:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4555:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4510:20:10"},"nodeType":"YulFunctionCall","src":"4510:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4500:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4287:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4298:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4310:6:10","type":""}],"src":"4251:329:10"},{"body":{"nodeType":"YulBlock","src":"4677:399:10","statements":[{"body":{"nodeType":"YulBlock","src":"4723:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4725:77:10"},"nodeType":"YulFunctionCall","src":"4725:79:10"},"nodeType":"YulExpressionStatement","src":"4725:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4698:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"4707:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4694:3:10"},"nodeType":"YulFunctionCall","src":"4694:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4719:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4690:3:10"},"nodeType":"YulFunctionCall","src":"4690:32:10"},"nodeType":"YulIf","src":"4687:119:10"},{"nodeType":"YulBlock","src":"4816:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4831:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4845:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4835:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4860:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4895:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4906:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:10"},"nodeType":"YulFunctionCall","src":"4891:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4915:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4870:20:10"},"nodeType":"YulFunctionCall","src":"4870:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4860:6:10"}]}]},{"nodeType":"YulBlock","src":"4943:126:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4958:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4972:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4962:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4988:71:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5031:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5042:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5027:3:10"},"nodeType":"YulFunctionCall","src":"5027:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5051:7:10"}],"functionName":{"name":"abi_decode_t_address_payable","nodeType":"YulIdentifier","src":"4998:28:10"},"nodeType":"YulFunctionCall","src":"4998:61:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4988:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4639:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4650:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4662:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4670:6:10","type":""}],"src":"4586:490:10"},{"body":{"nodeType":"YulBlock","src":"5208:817:10","statements":[{"body":{"nodeType":"YulBlock","src":"5255:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5257:77:10"},"nodeType":"YulFunctionCall","src":"5257:79:10"},"nodeType":"YulExpressionStatement","src":"5257:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5229:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"5238:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5225:3:10"},"nodeType":"YulFunctionCall","src":"5225:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"5250:3:10","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5221:3:10"},"nodeType":"YulFunctionCall","src":"5221:33:10"},"nodeType":"YulIf","src":"5218:120:10"},{"nodeType":"YulBlock","src":"5348:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5363:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"5377:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5367:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5392:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5427:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5438:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5423:3:10"},"nodeType":"YulFunctionCall","src":"5423:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5447:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5402:20:10"},"nodeType":"YulFunctionCall","src":"5402:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5392:6:10"}]}]},{"nodeType":"YulBlock","src":"5475:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5490:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"5504:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5494:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5520:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5555:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5566:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5551:3:10"},"nodeType":"YulFunctionCall","src":"5551:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5530:20:10"},"nodeType":"YulFunctionCall","src":"5530:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5520:6:10"}]}]},{"nodeType":"YulBlock","src":"5603:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5618:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"5632:2:10","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5622:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5648:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5683:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5694:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5679:3:10"},"nodeType":"YulFunctionCall","src":"5679:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5703:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5658:20:10"},"nodeType":"YulFunctionCall","src":"5658:53:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5648:6:10"}]}]},{"nodeType":"YulBlock","src":"5731:287:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5746:46:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5777:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5788:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5773:3:10"},"nodeType":"YulFunctionCall","src":"5773:18:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5760:12:10"},"nodeType":"YulFunctionCall","src":"5760:32:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5750:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"5839:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5841:77:10"},"nodeType":"YulFunctionCall","src":"5841:79:10"},"nodeType":"YulExpressionStatement","src":"5841:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"5819:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5808:2:10"},"nodeType":"YulFunctionCall","src":"5808:30:10"},"nodeType":"YulIf","src":"5805:117:10"},{"nodeType":"YulAssignment","src":"5936:72:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5980:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5991:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5976:3:10"},"nodeType":"YulFunctionCall","src":"5976:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6000:7:10"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5946:29:10"},"nodeType":"YulFunctionCall","src":"5946:62:10"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5936:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5154:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5165:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5177:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5185:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5193:6:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5201:6:10","type":""}],"src":"5082:943:10"},{"body":{"nodeType":"YulBlock","src":"6096:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6113:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6136:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6118:17:10"},"nodeType":"YulFunctionCall","src":"6118:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6106:6:10"},"nodeType":"YulFunctionCall","src":"6106:37:10"},"nodeType":"YulExpressionStatement","src":"6106:37:10"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6084:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6091:3:10","type":""}],"src":"6031:118:10"},{"body":{"nodeType":"YulBlock","src":"6238:74:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6255:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6298:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6280:17:10"},"nodeType":"YulFunctionCall","src":"6280:24:10"}],"functionName":{"name":"leftAlign_t_address","nodeType":"YulIdentifier","src":"6260:19:10"},"nodeType":"YulFunctionCall","src":"6260:45:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6248:6:10"},"nodeType":"YulFunctionCall","src":"6248:58:10"},"nodeType":"YulExpressionStatement","src":"6248:58:10"}]},"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6226:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6233:3:10","type":""}],"src":"6155:157:10"},{"body":{"nodeType":"YulBlock","src":"6377:50:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6394:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6414:5:10"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6399:14:10"},"nodeType":"YulFunctionCall","src":"6399:21:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6387:6:10"},"nodeType":"YulFunctionCall","src":"6387:34:10"},"nodeType":"YulExpressionStatement","src":"6387:34:10"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6365:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6372:3:10","type":""}],"src":"6318:109:10"},{"body":{"nodeType":"YulBlock","src":"6498:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6515:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6538:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"6520:17:10"},"nodeType":"YulFunctionCall","src":"6520:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6508:6:10"},"nodeType":"YulFunctionCall","src":"6508:37:10"},"nodeType":"YulExpressionStatement","src":"6508:37:10"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6486:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6493:3:10","type":""}],"src":"6433:118:10"},{"body":{"nodeType":"YulBlock","src":"6640:74:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6657:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6700:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"6682:17:10"},"nodeType":"YulFunctionCall","src":"6682:24:10"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"6662:19:10"},"nodeType":"YulFunctionCall","src":"6662:45:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6650:6:10"},"nodeType":"YulFunctionCall","src":"6650:58:10"},"nodeType":"YulExpressionStatement","src":"6650:58:10"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6628:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6635:3:10","type":""}],"src":"6557:157:10"},{"body":{"nodeType":"YulBlock","src":"6828:265:10","statements":[{"nodeType":"YulVariableDeclaration","src":"6838:52:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6884:5:10"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6852:31:10"},"nodeType":"YulFunctionCall","src":"6852:38:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6842:6:10","type":""}]},{"nodeType":"YulAssignment","src":"6899:95:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6982:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"6987:6:10"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6906:75:10"},"nodeType":"YulFunctionCall","src":"6906:88:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6899:3:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7029:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"7036:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7025:3:10"},"nodeType":"YulFunctionCall","src":"7025:16:10"},{"name":"pos","nodeType":"YulIdentifier","src":"7043:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"7048:6:10"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7003:21:10"},"nodeType":"YulFunctionCall","src":"7003:52:10"},"nodeType":"YulExpressionStatement","src":"7003:52:10"},{"nodeType":"YulAssignment","src":"7064:23:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7075:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"7080:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7071:3:10"},"nodeType":"YulFunctionCall","src":"7071:16:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7064:3:10"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6809:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6816:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6824:3:10","type":""}],"src":"6720:373:10"},{"body":{"nodeType":"YulBlock","src":"7245:219:10","statements":[{"nodeType":"YulAssignment","src":"7255:73:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7321:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7326:1:10","type":"","value":"8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7262:58:10"},"nodeType":"YulFunctionCall","src":"7262:66:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7255:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7426:3:10"}],"functionName":{"name":"store_literal_in_memory_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87","nodeType":"YulIdentifier","src":"7337:88:10"},"nodeType":"YulFunctionCall","src":"7337:93:10"},"nodeType":"YulExpressionStatement","src":"7337:93:10"},{"nodeType":"YulAssignment","src":"7439:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7450:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7455:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7446:3:10"},"nodeType":"YulFunctionCall","src":"7446:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7439:3:10"}]}]},"name":"abi_encode_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7233:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7241:3:10","type":""}],"src":"7099:365:10"},{"body":{"nodeType":"YulBlock","src":"7616:220:10","statements":[{"nodeType":"YulAssignment","src":"7626:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7692:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7697:2:10","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7633:58:10"},"nodeType":"YulFunctionCall","src":"7633:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7626:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7798:3:10"}],"functionName":{"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulIdentifier","src":"7709:88:10"},"nodeType":"YulFunctionCall","src":"7709:93:10"},"nodeType":"YulExpressionStatement","src":"7709:93:10"},{"nodeType":"YulAssignment","src":"7811:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7822:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7827:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7818:3:10"},"nodeType":"YulFunctionCall","src":"7818:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7811:3:10"}]}]},"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7604:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7612:3:10","type":""}],"src":"7470:366:10"},{"body":{"nodeType":"YulBlock","src":"7988:220:10","statements":[{"nodeType":"YulAssignment","src":"7998:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8064:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8069:2:10","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8005:58:10"},"nodeType":"YulFunctionCall","src":"8005:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7998:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8170:3:10"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"8081:88:10"},"nodeType":"YulFunctionCall","src":"8081:93:10"},"nodeType":"YulExpressionStatement","src":"8081:93:10"},{"nodeType":"YulAssignment","src":"8183:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8194:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8199:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8190:3:10"},"nodeType":"YulFunctionCall","src":"8190:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8183:3:10"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7976:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7984:3:10","type":""}],"src":"7842:366:10"},{"body":{"nodeType":"YulBlock","src":"8360:220:10","statements":[{"nodeType":"YulAssignment","src":"8370:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8436:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8441:2:10","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8377:58:10"},"nodeType":"YulFunctionCall","src":"8377:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8370:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8542:3:10"}],"functionName":{"name":"store_literal_in_memory_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","nodeType":"YulIdentifier","src":"8453:88:10"},"nodeType":"YulFunctionCall","src":"8453:93:10"},"nodeType":"YulExpressionStatement","src":"8453:93:10"},{"nodeType":"YulAssignment","src":"8555:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8566:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8571:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8562:3:10"},"nodeType":"YulFunctionCall","src":"8562:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8555:3:10"}]}]},"name":"abi_encode_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8348:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8356:3:10","type":""}],"src":"8214:366:10"},{"body":{"nodeType":"YulBlock","src":"8732:220:10","statements":[{"nodeType":"YulAssignment","src":"8742:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8808:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8813:2:10","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8749:58:10"},"nodeType":"YulFunctionCall","src":"8749:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8742:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8914:3:10"}],"functionName":{"name":"store_literal_in_memory_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b","nodeType":"YulIdentifier","src":"8825:88:10"},"nodeType":"YulFunctionCall","src":"8825:93:10"},"nodeType":"YulExpressionStatement","src":"8825:93:10"},{"nodeType":"YulAssignment","src":"8927:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8938:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8943:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8934:3:10"},"nodeType":"YulFunctionCall","src":"8934:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8927:3:10"}]}]},"name":"abi_encode_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8720:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8728:3:10","type":""}],"src":"8586:366:10"},{"body":{"nodeType":"YulBlock","src":"9104:220:10","statements":[{"nodeType":"YulAssignment","src":"9114:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9180:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9185:2:10","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9121:58:10"},"nodeType":"YulFunctionCall","src":"9121:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9114:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9286:3:10"}],"functionName":{"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulIdentifier","src":"9197:88:10"},"nodeType":"YulFunctionCall","src":"9197:93:10"},"nodeType":"YulExpressionStatement","src":"9197:93:10"},{"nodeType":"YulAssignment","src":"9299:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9310:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9315:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9306:3:10"},"nodeType":"YulFunctionCall","src":"9306:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9299:3:10"}]}]},"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9092:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9100:3:10","type":""}],"src":"8958:366:10"},{"body":{"nodeType":"YulBlock","src":"9476:220:10","statements":[{"nodeType":"YulAssignment","src":"9486:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9552:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9557:2:10","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9493:58:10"},"nodeType":"YulFunctionCall","src":"9493:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9486:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9658:3:10"}],"functionName":{"name":"store_literal_in_memory_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127","nodeType":"YulIdentifier","src":"9569:88:10"},"nodeType":"YulFunctionCall","src":"9569:93:10"},"nodeType":"YulExpressionStatement","src":"9569:93:10"},{"nodeType":"YulAssignment","src":"9671:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9682:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9687:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9678:3:10"},"nodeType":"YulFunctionCall","src":"9678:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9671:3:10"}]}]},"name":"abi_encode_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9464:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9472:3:10","type":""}],"src":"9330:366:10"},{"body":{"nodeType":"YulBlock","src":"9848:220:10","statements":[{"nodeType":"YulAssignment","src":"9858:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9924:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"9929:2:10","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9865:58:10"},"nodeType":"YulFunctionCall","src":"9865:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9858:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10030:3:10"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"9941:88:10"},"nodeType":"YulFunctionCall","src":"9941:93:10"},"nodeType":"YulExpressionStatement","src":"9941:93:10"},{"nodeType":"YulAssignment","src":"10043:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10054:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10059:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10050:3:10"},"nodeType":"YulFunctionCall","src":"10050:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10043:3:10"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9836:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9844:3:10","type":""}],"src":"9702:366:10"},{"body":{"nodeType":"YulBlock","src":"10220:220:10","statements":[{"nodeType":"YulAssignment","src":"10230:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10296:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10301:2:10","type":"","value":"21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10237:58:10"},"nodeType":"YulFunctionCall","src":"10237:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10230:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10402:3:10"}],"functionName":{"name":"store_literal_in_memory_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","nodeType":"YulIdentifier","src":"10313:88:10"},"nodeType":"YulFunctionCall","src":"10313:93:10"},"nodeType":"YulExpressionStatement","src":"10313:93:10"},{"nodeType":"YulAssignment","src":"10415:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10426:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10431:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10422:3:10"},"nodeType":"YulFunctionCall","src":"10422:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10415:3:10"}]}]},"name":"abi_encode_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10208:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10216:3:10","type":""}],"src":"10074:366:10"},{"body":{"nodeType":"YulBlock","src":"10592:220:10","statements":[{"nodeType":"YulAssignment","src":"10602:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10668:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10673:2:10","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10609:58:10"},"nodeType":"YulFunctionCall","src":"10609:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10602:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10774:3:10"}],"functionName":{"name":"store_literal_in_memory_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","nodeType":"YulIdentifier","src":"10685:88:10"},"nodeType":"YulFunctionCall","src":"10685:93:10"},"nodeType":"YulExpressionStatement","src":"10685:93:10"},{"nodeType":"YulAssignment","src":"10787:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10798:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"10803:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10794:3:10"},"nodeType":"YulFunctionCall","src":"10794:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10787:3:10"}]}]},"name":"abi_encode_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10580:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10588:3:10","type":""}],"src":"10446:366:10"},{"body":{"nodeType":"YulBlock","src":"10964:220:10","statements":[{"nodeType":"YulAssignment","src":"10974:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11040:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11045:2:10","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10981:58:10"},"nodeType":"YulFunctionCall","src":"10981:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10974:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11146:3:10"}],"functionName":{"name":"store_literal_in_memory_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6","nodeType":"YulIdentifier","src":"11057:88:10"},"nodeType":"YulFunctionCall","src":"11057:93:10"},"nodeType":"YulExpressionStatement","src":"11057:93:10"},{"nodeType":"YulAssignment","src":"11159:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11170:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11175:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11166:3:10"},"nodeType":"YulFunctionCall","src":"11166:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11159:3:10"}]}]},"name":"abi_encode_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10952:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10960:3:10","type":""}],"src":"10818:366:10"},{"body":{"nodeType":"YulBlock","src":"11336:220:10","statements":[{"nodeType":"YulAssignment","src":"11346:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11412:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11417:2:10","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11353:58:10"},"nodeType":"YulFunctionCall","src":"11353:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11346:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11518:3:10"}],"functionName":{"name":"store_literal_in_memory_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87","nodeType":"YulIdentifier","src":"11429:88:10"},"nodeType":"YulFunctionCall","src":"11429:93:10"},"nodeType":"YulExpressionStatement","src":"11429:93:10"},{"nodeType":"YulAssignment","src":"11531:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11542:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11547:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11538:3:10"},"nodeType":"YulFunctionCall","src":"11538:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11531:3:10"}]}]},"name":"abi_encode_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11324:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11332:3:10","type":""}],"src":"11190:366:10"},{"body":{"nodeType":"YulBlock","src":"11708:219:10","statements":[{"nodeType":"YulAssignment","src":"11718:73:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11784:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11789:1:10","type":"","value":"5"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11725:58:10"},"nodeType":"YulFunctionCall","src":"11725:66:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11718:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11889:3:10"}],"functionName":{"name":"store_literal_in_memory_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","nodeType":"YulIdentifier","src":"11800:88:10"},"nodeType":"YulFunctionCall","src":"11800:93:10"},"nodeType":"YulExpressionStatement","src":"11800:93:10"},{"nodeType":"YulAssignment","src":"11902:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11913:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11918:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11909:3:10"},"nodeType":"YulFunctionCall","src":"11909:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11902:3:10"}]}]},"name":"abi_encode_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11696:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11704:3:10","type":""}],"src":"11562:365:10"},{"body":{"nodeType":"YulBlock","src":"12079:220:10","statements":[{"nodeType":"YulAssignment","src":"12089:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12155:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"12160:2:10","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12096:58:10"},"nodeType":"YulFunctionCall","src":"12096:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12089:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12261:3:10"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"12172:88:10"},"nodeType":"YulFunctionCall","src":"12172:93:10"},"nodeType":"YulExpressionStatement","src":"12172:93:10"},{"nodeType":"YulAssignment","src":"12274:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12285:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"12290:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12281:3:10"},"nodeType":"YulFunctionCall","src":"12281:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12274:3:10"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12067:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12075:3:10","type":""}],"src":"11933:366:10"},{"body":{"nodeType":"YulBlock","src":"12370:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12387:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12410:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12392:17:10"},"nodeType":"YulFunctionCall","src":"12392:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12380:6:10"},"nodeType":"YulFunctionCall","src":"12380:37:10"},"nodeType":"YulExpressionStatement","src":"12380:37:10"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12358:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12365:3:10","type":""}],"src":"12305:118:10"},{"body":{"nodeType":"YulBlock","src":"12512:74:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12529:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12572:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"12554:17:10"},"nodeType":"YulFunctionCall","src":"12554:24:10"}],"functionName":{"name":"leftAlign_t_uint256","nodeType":"YulIdentifier","src":"12534:19:10"},"nodeType":"YulFunctionCall","src":"12534:45:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12522:6:10"},"nodeType":"YulFunctionCall","src":"12522:58:10"},"nodeType":"YulExpressionStatement","src":"12522:58:10"}]},"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12500:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12507:3:10","type":""}],"src":"12429:157:10"},{"body":{"nodeType":"YulBlock","src":"12653:51:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12670:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12691:5:10"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"12675:15:10"},"nodeType":"YulFunctionCall","src":"12675:22:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12663:6:10"},"nodeType":"YulFunctionCall","src":"12663:35:10"},"nodeType":"YulExpressionStatement","src":"12663:35:10"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12641:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12648:3:10","type":""}],"src":"12592:112:10"},{"body":{"nodeType":"YulBlock","src":"12910:479:10","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12983:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"12992:3:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"12921:61:10"},"nodeType":"YulFunctionCall","src":"12921:75:10"},"nodeType":"YulExpressionStatement","src":"12921:75:10"},{"nodeType":"YulAssignment","src":"13005:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13016:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13021:2:10","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13012:3:10"},"nodeType":"YulFunctionCall","src":"13012:12:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13005:3:10"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13096:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"13105:3:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13034:61:10"},"nodeType":"YulFunctionCall","src":"13034:75:10"},"nodeType":"YulExpressionStatement","src":"13034:75:10"},{"nodeType":"YulAssignment","src":"13118:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13129:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13134:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13125:3:10"},"nodeType":"YulFunctionCall","src":"13125:12:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13118:3:10"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"13209:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"13218:3:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13147:61:10"},"nodeType":"YulFunctionCall","src":"13147:75:10"},"nodeType":"YulExpressionStatement","src":"13147:75:10"},{"nodeType":"YulAssignment","src":"13231:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13242:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13247:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13238:3:10"},"nodeType":"YulFunctionCall","src":"13238:12:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13231:3:10"}]},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13322:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"13331:3:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13260:61:10"},"nodeType":"YulFunctionCall","src":"13260:75:10"},"nodeType":"YulExpressionStatement","src":"13260:75:10"},{"nodeType":"YulAssignment","src":"13344:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13355:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"13360:2:10","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13351:3:10"},"nodeType":"YulFunctionCall","src":"13351:12:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13344:3:10"}]},{"nodeType":"YulAssignment","src":"13373:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"13380:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13373:3:10"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12865:3:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12871:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12879:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12887:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12895:6:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12906:3:10","type":""}],"src":"12710:679:10"},{"body":{"nodeType":"YulBlock","src":"13529:137:10","statements":[{"nodeType":"YulAssignment","src":"13540:100:10","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13627:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"13636:3:10"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13547:79:10"},"nodeType":"YulFunctionCall","src":"13547:93:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13540:3:10"}]},{"nodeType":"YulAssignment","src":"13650:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"13657:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13650:3:10"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13508:3:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13514:6:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13525:3:10","type":""}],"src":"13395:271:10"},{"body":{"nodeType":"YulBlock","src":"13834:250:10","statements":[{"nodeType":"YulAssignment","src":"13845:100:10","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13932:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"13941:3:10"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13852:79:10"},"nodeType":"YulFunctionCall","src":"13852:93:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13845:3:10"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14017:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"14026:3:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"13955:61:10"},"nodeType":"YulFunctionCall","src":"13955:75:10"},"nodeType":"YulExpressionStatement","src":"13955:75:10"},{"nodeType":"YulAssignment","src":"14039:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14050:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"14055:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14046:3:10"},"nodeType":"YulFunctionCall","src":"14046:12:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14039:3:10"}]},{"nodeType":"YulAssignment","src":"14068:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"14075:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14068:3:10"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes32__to_t_bytes_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13805:3:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13811:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13819:6:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13830:3:10","type":""}],"src":"13672:412:10"},{"body":{"nodeType":"YulBlock","src":"14188:124:10","statements":[{"nodeType":"YulAssignment","src":"14198:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14210:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14221:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14206:3:10"},"nodeType":"YulFunctionCall","src":"14206:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14198:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14278:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14291:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14302:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14287:3:10"},"nodeType":"YulFunctionCall","src":"14287:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"14234:43:10"},"nodeType":"YulFunctionCall","src":"14234:71:10"},"nodeType":"YulExpressionStatement","src":"14234:71:10"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14160:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14172:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14183:4:10","type":""}],"src":"14090:222:10"},{"body":{"nodeType":"YulBlock","src":"14444:206:10","statements":[{"nodeType":"YulAssignment","src":"14454:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14466:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14477:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14462:3:10"},"nodeType":"YulFunctionCall","src":"14462:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14454:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14534:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14547:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14558:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14543:3:10"},"nodeType":"YulFunctionCall","src":"14543:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"14490:43:10"},"nodeType":"YulFunctionCall","src":"14490:71:10"},"nodeType":"YulExpressionStatement","src":"14490:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14615:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14628:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14639:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14624:3:10"},"nodeType":"YulFunctionCall","src":"14624:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"14571:43:10"},"nodeType":"YulFunctionCall","src":"14571:72:10"},"nodeType":"YulExpressionStatement","src":"14571:72:10"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14408:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14420:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14428:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14439:4:10","type":""}],"src":"14318:332:10"},{"body":{"nodeType":"YulBlock","src":"14748:118:10","statements":[{"nodeType":"YulAssignment","src":"14758:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14770:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14781:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14766:3:10"},"nodeType":"YulFunctionCall","src":"14766:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14758:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14832:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14845:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"14856:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14841:3:10"},"nodeType":"YulFunctionCall","src":"14841:17:10"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14794:37:10"},"nodeType":"YulFunctionCall","src":"14794:65:10"},"nodeType":"YulExpressionStatement","src":"14794:65:10"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14720:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14732:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14743:4:10","type":""}],"src":"14656:210:10"},{"body":{"nodeType":"YulBlock","src":"15022:284:10","statements":[{"nodeType":"YulAssignment","src":"15032:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15044:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15055:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15040:3:10"},"nodeType":"YulFunctionCall","src":"15040:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15032:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15112:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15125:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15136:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15121:3:10"},"nodeType":"YulFunctionCall","src":"15121:17:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15068:43:10"},"nodeType":"YulFunctionCall","src":"15068:71:10"},"nodeType":"YulExpressionStatement","src":"15068:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15193:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15206:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15217:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15202:3:10"},"nodeType":"YulFunctionCall","src":"15202:18:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15149:43:10"},"nodeType":"YulFunctionCall","src":"15149:72:10"},"nodeType":"YulExpressionStatement","src":"15149:72:10"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15271:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15284:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15295:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15280:3:10"},"nodeType":"YulFunctionCall","src":"15280:18:10"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"15231:39:10"},"nodeType":"YulFunctionCall","src":"15231:68:10"},"nodeType":"YulExpressionStatement","src":"15231:68:10"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14978:9:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14990:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14998:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15006:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15017:4:10","type":""}],"src":"14872:434:10"},{"body":{"nodeType":"YulBlock","src":"15490:367:10","statements":[{"nodeType":"YulAssignment","src":"15500:27:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15512:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15523:3:10","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15508:3:10"},"nodeType":"YulFunctionCall","src":"15508:19:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15500:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15581:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15594:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15605:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15590:3:10"},"nodeType":"YulFunctionCall","src":"15590:17:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15537:43:10"},"nodeType":"YulFunctionCall","src":"15537:71:10"},"nodeType":"YulExpressionStatement","src":"15537:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15658:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15671:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15682:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15667:3:10"},"nodeType":"YulFunctionCall","src":"15667:18:10"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"15618:39:10"},"nodeType":"YulFunctionCall","src":"15618:68:10"},"nodeType":"YulExpressionStatement","src":"15618:68:10"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15740:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15753:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15764:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15749:3:10"},"nodeType":"YulFunctionCall","src":"15749:18:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15696:43:10"},"nodeType":"YulFunctionCall","src":"15696:72:10"},"nodeType":"YulExpressionStatement","src":"15696:72:10"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"15822:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15835:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"15846:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15831:3:10"},"nodeType":"YulFunctionCall","src":"15831:18:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"15778:43:10"},"nodeType":"YulFunctionCall","src":"15778:72:10"},"nodeType":"YulExpressionStatement","src":"15778:72:10"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15438:9:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15450:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15458:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15466:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15474:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15485:4:10","type":""}],"src":"15312:545:10"},{"body":{"nodeType":"YulBlock","src":"16034:248:10","statements":[{"nodeType":"YulAssignment","src":"16044:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16056:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16067:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16052:3:10"},"nodeType":"YulFunctionCall","src":"16052:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16044:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16091:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16102:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16087:3:10"},"nodeType":"YulFunctionCall","src":"16087:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16110:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"16116:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16106:3:10"},"nodeType":"YulFunctionCall","src":"16106:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16080:6:10"},"nodeType":"YulFunctionCall","src":"16080:47:10"},"nodeType":"YulExpressionStatement","src":"16080:47:10"},{"nodeType":"YulAssignment","src":"16136:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16270:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16144:124:10"},"nodeType":"YulFunctionCall","src":"16144:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16136:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16014:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16029:4:10","type":""}],"src":"15863:419:10"},{"body":{"nodeType":"YulBlock","src":"16459:248:10","statements":[{"nodeType":"YulAssignment","src":"16469:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16481:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16492:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16477:3:10"},"nodeType":"YulFunctionCall","src":"16477:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16469:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16516:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16527:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16512:3:10"},"nodeType":"YulFunctionCall","src":"16512:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16535:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"16541:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16531:3:10"},"nodeType":"YulFunctionCall","src":"16531:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16505:6:10"},"nodeType":"YulFunctionCall","src":"16505:47:10"},"nodeType":"YulExpressionStatement","src":"16505:47:10"},{"nodeType":"YulAssignment","src":"16561:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16695:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16569:124:10"},"nodeType":"YulFunctionCall","src":"16569:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16561:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16439:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16454:4:10","type":""}],"src":"16288:419:10"},{"body":{"nodeType":"YulBlock","src":"16884:248:10","statements":[{"nodeType":"YulAssignment","src":"16894:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16906:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16917:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16902:3:10"},"nodeType":"YulFunctionCall","src":"16902:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16894:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16941:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"16952:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16937:3:10"},"nodeType":"YulFunctionCall","src":"16937:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16960:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"16966:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16956:3:10"},"nodeType":"YulFunctionCall","src":"16956:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16930:6:10"},"nodeType":"YulFunctionCall","src":"16930:47:10"},"nodeType":"YulExpressionStatement","src":"16930:47:10"},{"nodeType":"YulAssignment","src":"16986:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17120:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16994:124:10"},"nodeType":"YulFunctionCall","src":"16994:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16986:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16864:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16879:4:10","type":""}],"src":"16713:419:10"},{"body":{"nodeType":"YulBlock","src":"17309:248:10","statements":[{"nodeType":"YulAssignment","src":"17319:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17331:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17342:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17327:3:10"},"nodeType":"YulFunctionCall","src":"17327:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17319:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17366:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17377:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17362:3:10"},"nodeType":"YulFunctionCall","src":"17362:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17385:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"17391:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17381:3:10"},"nodeType":"YulFunctionCall","src":"17381:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17355:6:10"},"nodeType":"YulFunctionCall","src":"17355:47:10"},"nodeType":"YulExpressionStatement","src":"17355:47:10"},{"nodeType":"YulAssignment","src":"17411:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17545:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17419:124:10"},"nodeType":"YulFunctionCall","src":"17419:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17411:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17289:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17304:4:10","type":""}],"src":"17138:419:10"},{"body":{"nodeType":"YulBlock","src":"17734:248:10","statements":[{"nodeType":"YulAssignment","src":"17744:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17756:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17767:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17752:3:10"},"nodeType":"YulFunctionCall","src":"17752:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17744:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17791:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"17802:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17787:3:10"},"nodeType":"YulFunctionCall","src":"17787:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17810:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"17816:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17806:3:10"},"nodeType":"YulFunctionCall","src":"17806:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17780:6:10"},"nodeType":"YulFunctionCall","src":"17780:47:10"},"nodeType":"YulExpressionStatement","src":"17780:47:10"},{"nodeType":"YulAssignment","src":"17836:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17970:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17844:124:10"},"nodeType":"YulFunctionCall","src":"17844:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17836:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17714:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17729:4:10","type":""}],"src":"17563:419:10"},{"body":{"nodeType":"YulBlock","src":"18159:248:10","statements":[{"nodeType":"YulAssignment","src":"18169:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18181:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"18192:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18177:3:10"},"nodeType":"YulFunctionCall","src":"18177:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18169:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18216:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"18227:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18212:3:10"},"nodeType":"YulFunctionCall","src":"18212:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18235:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"18241:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18231:3:10"},"nodeType":"YulFunctionCall","src":"18231:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18205:6:10"},"nodeType":"YulFunctionCall","src":"18205:47:10"},"nodeType":"YulExpressionStatement","src":"18205:47:10"},{"nodeType":"YulAssignment","src":"18261:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18395:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18269:124:10"},"nodeType":"YulFunctionCall","src":"18269:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18261:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18139:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18154:4:10","type":""}],"src":"17988:419:10"},{"body":{"nodeType":"YulBlock","src":"18584:248:10","statements":[{"nodeType":"YulAssignment","src":"18594:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18606:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"18617:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18602:3:10"},"nodeType":"YulFunctionCall","src":"18602:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18594:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18641:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"18652:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18637:3:10"},"nodeType":"YulFunctionCall","src":"18637:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18660:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"18666:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18656:3:10"},"nodeType":"YulFunctionCall","src":"18656:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18630:6:10"},"nodeType":"YulFunctionCall","src":"18630:47:10"},"nodeType":"YulExpressionStatement","src":"18630:47:10"},{"nodeType":"YulAssignment","src":"18686:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18820:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18694:124:10"},"nodeType":"YulFunctionCall","src":"18694:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18686:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18564:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18579:4:10","type":""}],"src":"18413:419:10"},{"body":{"nodeType":"YulBlock","src":"19009:248:10","statements":[{"nodeType":"YulAssignment","src":"19019:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19031:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19042:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19027:3:10"},"nodeType":"YulFunctionCall","src":"19027:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19019:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19066:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19077:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19062:3:10"},"nodeType":"YulFunctionCall","src":"19062:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19085:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"19091:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19081:3:10"},"nodeType":"YulFunctionCall","src":"19081:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19055:6:10"},"nodeType":"YulFunctionCall","src":"19055:47:10"},"nodeType":"YulExpressionStatement","src":"19055:47:10"},{"nodeType":"YulAssignment","src":"19111:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19245:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19119:124:10"},"nodeType":"YulFunctionCall","src":"19119:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19111:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18989:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19004:4:10","type":""}],"src":"18838:419:10"},{"body":{"nodeType":"YulBlock","src":"19434:248:10","statements":[{"nodeType":"YulAssignment","src":"19444:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19456:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19467:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19452:3:10"},"nodeType":"YulFunctionCall","src":"19452:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19444:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19491:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19502:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19487:3:10"},"nodeType":"YulFunctionCall","src":"19487:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19510:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"19516:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19506:3:10"},"nodeType":"YulFunctionCall","src":"19506:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19480:6:10"},"nodeType":"YulFunctionCall","src":"19480:47:10"},"nodeType":"YulExpressionStatement","src":"19480:47:10"},{"nodeType":"YulAssignment","src":"19536:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19670:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19544:124:10"},"nodeType":"YulFunctionCall","src":"19544:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19536:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19414:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19429:4:10","type":""}],"src":"19263:419:10"},{"body":{"nodeType":"YulBlock","src":"19859:248:10","statements":[{"nodeType":"YulAssignment","src":"19869:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19881:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19892:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19877:3:10"},"nodeType":"YulFunctionCall","src":"19877:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19869:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19916:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"19927:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19912:3:10"},"nodeType":"YulFunctionCall","src":"19912:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19935:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"19941:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19931:3:10"},"nodeType":"YulFunctionCall","src":"19931:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19905:6:10"},"nodeType":"YulFunctionCall","src":"19905:47:10"},"nodeType":"YulExpressionStatement","src":"19905:47:10"},{"nodeType":"YulAssignment","src":"19961:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20095:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19969:124:10"},"nodeType":"YulFunctionCall","src":"19969:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19961:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19839:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19854:4:10","type":""}],"src":"19688:419:10"},{"body":{"nodeType":"YulBlock","src":"20284:248:10","statements":[{"nodeType":"YulAssignment","src":"20294:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20306:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20317:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20302:3:10"},"nodeType":"YulFunctionCall","src":"20302:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20294:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20341:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20352:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20337:3:10"},"nodeType":"YulFunctionCall","src":"20337:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20360:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"20366:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20356:3:10"},"nodeType":"YulFunctionCall","src":"20356:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20330:6:10"},"nodeType":"YulFunctionCall","src":"20330:47:10"},"nodeType":"YulExpressionStatement","src":"20330:47:10"},{"nodeType":"YulAssignment","src":"20386:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20520:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20394:124:10"},"nodeType":"YulFunctionCall","src":"20394:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20386:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20264:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20279:4:10","type":""}],"src":"20113:419:10"},{"body":{"nodeType":"YulBlock","src":"20709:248:10","statements":[{"nodeType":"YulAssignment","src":"20719:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20731:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20742:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20727:3:10"},"nodeType":"YulFunctionCall","src":"20727:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20719:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20766:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"20777:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20762:3:10"},"nodeType":"YulFunctionCall","src":"20762:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20785:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"20791:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20781:3:10"},"nodeType":"YulFunctionCall","src":"20781:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20755:6:10"},"nodeType":"YulFunctionCall","src":"20755:47:10"},"nodeType":"YulExpressionStatement","src":"20755:47:10"},{"nodeType":"YulAssignment","src":"20811:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20945:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20819:124:10"},"nodeType":"YulFunctionCall","src":"20819:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20811:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20689:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20704:4:10","type":""}],"src":"20538:419:10"},{"body":{"nodeType":"YulBlock","src":"21134:248:10","statements":[{"nodeType":"YulAssignment","src":"21144:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21156:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"21167:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21152:3:10"},"nodeType":"YulFunctionCall","src":"21152:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21144:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21191:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"21202:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21187:3:10"},"nodeType":"YulFunctionCall","src":"21187:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21210:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"21216:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21206:3:10"},"nodeType":"YulFunctionCall","src":"21206:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21180:6:10"},"nodeType":"YulFunctionCall","src":"21180:47:10"},"nodeType":"YulExpressionStatement","src":"21180:47:10"},{"nodeType":"YulAssignment","src":"21236:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21370:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21244:124:10"},"nodeType":"YulFunctionCall","src":"21244:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21236:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21114:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21129:4:10","type":""}],"src":"20963:419:10"},{"body":{"nodeType":"YulBlock","src":"21559:248:10","statements":[{"nodeType":"YulAssignment","src":"21569:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21581:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"21592:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21577:3:10"},"nodeType":"YulFunctionCall","src":"21577:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21569:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21616:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"21627:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21612:3:10"},"nodeType":"YulFunctionCall","src":"21612:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21635:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"21641:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21631:3:10"},"nodeType":"YulFunctionCall","src":"21631:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21605:6:10"},"nodeType":"YulFunctionCall","src":"21605:47:10"},"nodeType":"YulExpressionStatement","src":"21605:47:10"},{"nodeType":"YulAssignment","src":"21661:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21795:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21669:124:10"},"nodeType":"YulFunctionCall","src":"21669:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21661:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21539:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21554:4:10","type":""}],"src":"21388:419:10"},{"body":{"nodeType":"YulBlock","src":"21854:88:10","statements":[{"nodeType":"YulAssignment","src":"21864:30:10","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"21874:18:10"},"nodeType":"YulFunctionCall","src":"21874:20:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21864:6:10"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21923:6:10"},{"name":"size","nodeType":"YulIdentifier","src":"21931:4:10"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"21903:19:10"},"nodeType":"YulFunctionCall","src":"21903:33:10"},"nodeType":"YulExpressionStatement","src":"21903:33:10"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"21838:4:10","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"21847:6:10","type":""}],"src":"21813:129:10"},{"body":{"nodeType":"YulBlock","src":"21988:35:10","statements":[{"nodeType":"YulAssignment","src":"21998:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22014:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22008:5:10"},"nodeType":"YulFunctionCall","src":"22008:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21998:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"21981:6:10","type":""}],"src":"21948:75:10"},{"body":{"nodeType":"YulBlock","src":"22095:241:10","statements":[{"body":{"nodeType":"YulBlock","src":"22200:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"22202:16:10"},"nodeType":"YulFunctionCall","src":"22202:18:10"},"nodeType":"YulExpressionStatement","src":"22202:18:10"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22172:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"22180:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22169:2:10"},"nodeType":"YulFunctionCall","src":"22169:30:10"},"nodeType":"YulIf","src":"22166:56:10"},{"nodeType":"YulAssignment","src":"22232:37:10","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22262:6:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22240:21:10"},"nodeType":"YulFunctionCall","src":"22240:29:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"22232:4:10"}]},{"nodeType":"YulAssignment","src":"22306:23:10","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"22318:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"22324:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22314:3:10"},"nodeType":"YulFunctionCall","src":"22314:15:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"22306:4:10"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"22079:6:10","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"22090:4:10","type":""}],"src":"22029:307:10"},{"body":{"nodeType":"YulBlock","src":"22400:40:10","statements":[{"nodeType":"YulAssignment","src":"22411:22:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22427:5:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22421:5:10"},"nodeType":"YulFunctionCall","src":"22421:12:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22411:6:10"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22383:5:10","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"22393:6:10","type":""}],"src":"22342:98:10"},{"body":{"nodeType":"YulBlock","src":"22559:34:10","statements":[{"nodeType":"YulAssignment","src":"22569:18:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"22584:3:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22569:11:10"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22531:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"22536:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22547:11:10","type":""}],"src":"22446:147:10"},{"body":{"nodeType":"YulBlock","src":"22695:73:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22712:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"22717:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22705:6:10"},"nodeType":"YulFunctionCall","src":"22705:19:10"},"nodeType":"YulExpressionStatement","src":"22705:19:10"},{"nodeType":"YulAssignment","src":"22733:29:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22752:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"22757:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22748:3:10"},"nodeType":"YulFunctionCall","src":"22748:14:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22733:11:10"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22667:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"22672:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22683:11:10","type":""}],"src":"22599:169:10"},{"body":{"nodeType":"YulBlock","src":"22818:261:10","statements":[{"nodeType":"YulAssignment","src":"22828:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22851:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22833:17:10"},"nodeType":"YulFunctionCall","src":"22833:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"22828:1:10"}]},{"nodeType":"YulAssignment","src":"22862:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22885:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22867:17:10"},"nodeType":"YulFunctionCall","src":"22867:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22862:1:10"}]},{"body":{"nodeType":"YulBlock","src":"23025:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23027:16:10"},"nodeType":"YulFunctionCall","src":"23027:18:10"},"nodeType":"YulExpressionStatement","src":"23027:18:10"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22946:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22953:66:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"23021:1:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22949:3:10"},"nodeType":"YulFunctionCall","src":"22949:74:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22943:2:10"},"nodeType":"YulFunctionCall","src":"22943:81:10"},"nodeType":"YulIf","src":"22940:107:10"},{"nodeType":"YulAssignment","src":"23057:16:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23068:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"23071:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23064:3:10"},"nodeType":"YulFunctionCall","src":"23064:9:10"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"23057:3:10"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22805:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"22808:1:10","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22814:3:10","type":""}],"src":"22774:305:10"},{"body":{"nodeType":"YulBlock","src":"23130:146:10","statements":[{"nodeType":"YulAssignment","src":"23140:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23163:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23145:17:10"},"nodeType":"YulFunctionCall","src":"23145:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23140:1:10"}]},{"nodeType":"YulAssignment","src":"23174:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23197:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23179:17:10"},"nodeType":"YulFunctionCall","src":"23179:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23174:1:10"}]},{"body":{"nodeType":"YulBlock","src":"23221:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23223:16:10"},"nodeType":"YulFunctionCall","src":"23223:18:10"},"nodeType":"YulExpressionStatement","src":"23223:18:10"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23215:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"23218:1:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23212:2:10"},"nodeType":"YulFunctionCall","src":"23212:8:10"},"nodeType":"YulIf","src":"23209:34:10"},{"nodeType":"YulAssignment","src":"23253:17:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23265:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"23268:1:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23261:3:10"},"nodeType":"YulFunctionCall","src":"23261:9:10"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"23253:4:10"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23116:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"23119:1:10","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"23125:4:10","type":""}],"src":"23085:191:10"},{"body":{"nodeType":"YulBlock","src":"23327:51:10","statements":[{"nodeType":"YulAssignment","src":"23337:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23366:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"23348:17:10"},"nodeType":"YulFunctionCall","src":"23348:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23337:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23309:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23319:7:10","type":""}],"src":"23282:96:10"},{"body":{"nodeType":"YulBlock","src":"23437:51:10","statements":[{"nodeType":"YulAssignment","src":"23447:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23476:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"23458:17:10"},"nodeType":"YulFunctionCall","src":"23458:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23447:7:10"}]}]},"name":"cleanup_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23419:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23429:7:10","type":""}],"src":"23384:104:10"},{"body":{"nodeType":"YulBlock","src":"23536:48:10","statements":[{"nodeType":"YulAssignment","src":"23546:32:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23571:5:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23564:6:10"},"nodeType":"YulFunctionCall","src":"23564:13:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23557:6:10"},"nodeType":"YulFunctionCall","src":"23557:21:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23546:7:10"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23518:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23528:7:10","type":""}],"src":"23494:90:10"},{"body":{"nodeType":"YulBlock","src":"23635:32:10","statements":[{"nodeType":"YulAssignment","src":"23645:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"23656:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23645:7:10"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23617:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23627:7:10","type":""}],"src":"23590:77:10"},{"body":{"nodeType":"YulBlock","src":"23718:81:10","statements":[{"nodeType":"YulAssignment","src":"23728:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23743:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"23750:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23739:3:10"},"nodeType":"YulFunctionCall","src":"23739:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23728:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23700:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23710:7:10","type":""}],"src":"23673:126:10"},{"body":{"nodeType":"YulBlock","src":"23850:32:10","statements":[{"nodeType":"YulAssignment","src":"23860:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"23871:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23860:7:10"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23832:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23842:7:10","type":""}],"src":"23805:77:10"},{"body":{"nodeType":"YulBlock","src":"23931:43:10","statements":[{"nodeType":"YulAssignment","src":"23941:27:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23956:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"23963:4:10","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23952:3:10"},"nodeType":"YulFunctionCall","src":"23952:16:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23941:7:10"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23913:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23923:7:10","type":""}],"src":"23888:86:10"},{"body":{"nodeType":"YulBlock","src":"24031:103:10","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24054:3:10"},{"name":"src","nodeType":"YulIdentifier","src":"24059:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24064:6:10"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"24041:12:10"},"nodeType":"YulFunctionCall","src":"24041:30:10"},"nodeType":"YulExpressionStatement","src":"24041:30:10"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24112:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24117:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24108:3:10"},"nodeType":"YulFunctionCall","src":"24108:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"24126:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24101:6:10"},"nodeType":"YulFunctionCall","src":"24101:27:10"},"nodeType":"YulExpressionStatement","src":"24101:27:10"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"24013:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"24018:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"24023:6:10","type":""}],"src":"23980:154:10"},{"body":{"nodeType":"YulBlock","src":"24189:258:10","statements":[{"nodeType":"YulVariableDeclaration","src":"24199:10:10","value":{"kind":"number","nodeType":"YulLiteral","src":"24208:1:10","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"24203:1:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"24268:63:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24293:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"24298:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24289:3:10"},"nodeType":"YulFunctionCall","src":"24289:11:10"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24312:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"24317:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24308:3:10"},"nodeType":"YulFunctionCall","src":"24308:11:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24302:5:10"},"nodeType":"YulFunctionCall","src":"24302:18:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24282:6:10"},"nodeType":"YulFunctionCall","src":"24282:39:10"},"nodeType":"YulExpressionStatement","src":"24282:39:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"24229:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"24232:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24226:2:10"},"nodeType":"YulFunctionCall","src":"24226:13:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"24240:19:10","statements":[{"nodeType":"YulAssignment","src":"24242:15:10","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"24251:1:10"},{"kind":"number","nodeType":"YulLiteral","src":"24254:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24247:3:10"},"nodeType":"YulFunctionCall","src":"24247:10:10"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"24242:1:10"}]}]},"pre":{"nodeType":"YulBlock","src":"24222:3:10","statements":[]},"src":"24218:113:10"},{"body":{"nodeType":"YulBlock","src":"24365:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24415:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"24420:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24411:3:10"},"nodeType":"YulFunctionCall","src":"24411:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"24429:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24404:6:10"},"nodeType":"YulFunctionCall","src":"24404:27:10"},"nodeType":"YulExpressionStatement","src":"24404:27:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"24346:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"24349:6:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24343:2:10"},"nodeType":"YulFunctionCall","src":"24343:13:10"},"nodeType":"YulIf","src":"24340:101:10"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"24171:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"24176:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"24181:6:10","type":""}],"src":"24140:307:10"},{"body":{"nodeType":"YulBlock","src":"24496:238:10","statements":[{"nodeType":"YulVariableDeclaration","src":"24506:58:10","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24528:6:10"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"24558:4:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24536:21:10"},"nodeType":"YulFunctionCall","src":"24536:27:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24524:3:10"},"nodeType":"YulFunctionCall","src":"24524:40:10"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"24510:10:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"24675:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24677:16:10"},"nodeType":"YulFunctionCall","src":"24677:18:10"},"nodeType":"YulExpressionStatement","src":"24677:18:10"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24618:10:10"},{"kind":"number","nodeType":"YulLiteral","src":"24630:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24615:2:10"},"nodeType":"YulFunctionCall","src":"24615:34:10"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24654:10:10"},{"name":"memPtr","nodeType":"YulIdentifier","src":"24666:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24651:2:10"},"nodeType":"YulFunctionCall","src":"24651:22:10"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24612:2:10"},"nodeType":"YulFunctionCall","src":"24612:62:10"},"nodeType":"YulIf","src":"24609:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24713:2:10","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24717:10:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24706:6:10"},"nodeType":"YulFunctionCall","src":"24706:22:10"},"nodeType":"YulExpressionStatement","src":"24706:22:10"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24482:6:10","type":""},{"name":"size","nodeType":"YulTypedName","src":"24490:4:10","type":""}],"src":"24453:281:10"},{"body":{"nodeType":"YulBlock","src":"24787:53:10","statements":[{"nodeType":"YulAssignment","src":"24797:37:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24828:5:10"}],"functionName":{"name":"leftAlign_t_uint160","nodeType":"YulIdentifier","src":"24808:19:10"},"nodeType":"YulFunctionCall","src":"24808:26:10"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"24797:7:10"}]}]},"name":"leftAlign_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24769:5:10","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"24779:7:10","type":""}],"src":"24740:100:10"},{"body":{"nodeType":"YulBlock","src":"24893:32:10","statements":[{"nodeType":"YulAssignment","src":"24903:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"24914:5:10"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"24903:7:10"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24875:5:10","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"24885:7:10","type":""}],"src":"24846:79:10"},{"body":{"nodeType":"YulBlock","src":"24978:47:10","statements":[{"nodeType":"YulAssignment","src":"24988:31:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25013:5:10"}],"functionName":{"name":"shift_left_96","nodeType":"YulIdentifier","src":"24999:13:10"},"nodeType":"YulFunctionCall","src":"24999:20:10"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"24988:7:10"}]}]},"name":"leftAlign_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24960:5:10","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"24970:7:10","type":""}],"src":"24931:94:10"},{"body":{"nodeType":"YulBlock","src":"25078:32:10","statements":[{"nodeType":"YulAssignment","src":"25088:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"25099:5:10"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"25088:7:10"}]}]},"name":"leftAlign_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25060:5:10","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"25070:7:10","type":""}],"src":"25031:79:10"},{"body":{"nodeType":"YulBlock","src":"25144:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25161:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25164:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25154:6:10"},"nodeType":"YulFunctionCall","src":"25154:88:10"},"nodeType":"YulExpressionStatement","src":"25154:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25258:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25261:4:10","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25251:6:10"},"nodeType":"YulFunctionCall","src":"25251:15:10"},"nodeType":"YulExpressionStatement","src":"25251:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25282:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25285:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25275:6:10"},"nodeType":"YulFunctionCall","src":"25275:15:10"},"nodeType":"YulExpressionStatement","src":"25275:15:10"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"25116:180:10"},{"body":{"nodeType":"YulBlock","src":"25330:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25347:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25350:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25340:6:10"},"nodeType":"YulFunctionCall","src":"25340:88:10"},"nodeType":"YulExpressionStatement","src":"25340:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25444:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25447:4:10","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25437:6:10"},"nodeType":"YulFunctionCall","src":"25437:15:10"},"nodeType":"YulExpressionStatement","src":"25437:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25468:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25471:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25461:6:10"},"nodeType":"YulFunctionCall","src":"25461:15:10"},"nodeType":"YulExpressionStatement","src":"25461:15:10"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"25302:180:10"},{"body":{"nodeType":"YulBlock","src":"25577:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25594:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25597:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25587:6:10"},"nodeType":"YulFunctionCall","src":"25587:12:10"},"nodeType":"YulExpressionStatement","src":"25587:12:10"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"25488:117:10"},{"body":{"nodeType":"YulBlock","src":"25700:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25717:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25720:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25710:6:10"},"nodeType":"YulFunctionCall","src":"25710:12:10"},"nodeType":"YulExpressionStatement","src":"25710:12:10"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"25611:117:10"},{"body":{"nodeType":"YulBlock","src":"25823:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25840:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25843:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25833:6:10"},"nodeType":"YulFunctionCall","src":"25833:12:10"},"nodeType":"YulExpressionStatement","src":"25833:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"25734:117:10"},{"body":{"nodeType":"YulBlock","src":"25946:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25963:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25966:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25956:6:10"},"nodeType":"YulFunctionCall","src":"25956:12:10"},"nodeType":"YulExpressionStatement","src":"25956:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"25857:117:10"},{"body":{"nodeType":"YulBlock","src":"26028:54:10","statements":[{"nodeType":"YulAssignment","src":"26038:38:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26056:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"26063:2:10","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26052:3:10"},"nodeType":"YulFunctionCall","src":"26052:14:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26072:2:10","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26068:3:10"},"nodeType":"YulFunctionCall","src":"26068:7:10"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26048:3:10"},"nodeType":"YulFunctionCall","src":"26048:28:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"26038:6:10"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26011:5:10","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"26021:6:10","type":""}],"src":"25980:102:10"},{"body":{"nodeType":"YulBlock","src":"26130:52:10","statements":[{"nodeType":"YulAssignment","src":"26140:35:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26165:2:10","type":"","value":"96"},{"name":"value","nodeType":"YulIdentifier","src":"26169:5:10"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"26161:3:10"},"nodeType":"YulFunctionCall","src":"26161:14:10"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"26140:8:10"}]}]},"name":"shift_left_96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26111:5:10","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"26121:8:10","type":""}],"src":"26088:94:10"},{"body":{"nodeType":"YulBlock","src":"26294:52:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26316:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"26324:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26312:3:10"},"nodeType":"YulFunctionCall","src":"26312:14:10"},{"hexValue":"496e76616c696421","kind":"string","nodeType":"YulLiteral","src":"26328:10:10","type":"","value":"Invalid!"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26305:6:10"},"nodeType":"YulFunctionCall","src":"26305:34:10"},"nodeType":"YulExpressionStatement","src":"26305:34:10"}]},"name":"store_literal_in_memory_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26286:6:10","type":""}],"src":"26188:158:10"},{"body":{"nodeType":"YulBlock","src":"26458:64:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26480:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"26488:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26476:3:10"},"nodeType":"YulFunctionCall","src":"26476:14:10"},{"hexValue":"5061757361626c653a206e6f7420706175736564","kind":"string","nodeType":"YulLiteral","src":"26492:22:10","type":"","value":"Pausable: not paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26469:6:10"},"nodeType":"YulFunctionCall","src":"26469:46:10"},"nodeType":"YulExpressionStatement","src":"26469:46:10"}]},"name":"store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26450:6:10","type":""}],"src":"26352:170:10"},{"body":{"nodeType":"YulBlock","src":"26634:119:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26656:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"26664:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26652:3:10"},"nodeType":"YulFunctionCall","src":"26652:14:10"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"26668:34:10","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26645:6:10"},"nodeType":"YulFunctionCall","src":"26645:58:10"},"nodeType":"YulExpressionStatement","src":"26645:58:10"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26724:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"26732:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26720:3:10"},"nodeType":"YulFunctionCall","src":"26720:15:10"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"26737:8:10","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26713:6:10"},"nodeType":"YulFunctionCall","src":"26713:33:10"},"nodeType":"YulExpressionStatement","src":"26713:33:10"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26626:6:10","type":""}],"src":"26528:225:10"},{"body":{"nodeType":"YulBlock","src":"26865:58:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26887:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"26895:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26883:3:10"},"nodeType":"YulFunctionCall","src":"26883:14:10"},{"hexValue":"496e76616c696420616d6f756e74","kind":"string","nodeType":"YulLiteral","src":"26899:16:10","type":"","value":"Invalid amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26876:6:10"},"nodeType":"YulFunctionCall","src":"26876:40:10"},"nodeType":"YulExpressionStatement","src":"26876:40:10"}]},"name":"store_literal_in_memory_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26857:6:10","type":""}],"src":"26759:164:10"},{"body":{"nodeType":"YulBlock","src":"27035:57:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27057:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27065:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27053:3:10"},"nodeType":"YulFunctionCall","src":"27053:14:10"},{"hexValue":"556e617574686f72697a656421","kind":"string","nodeType":"YulLiteral","src":"27069:15:10","type":"","value":"Unauthorized!"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27046:6:10"},"nodeType":"YulFunctionCall","src":"27046:39:10"},"nodeType":"YulExpressionStatement","src":"27046:39:10"}]},"name":"store_literal_in_memory_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27027:6:10","type":""}],"src":"26929:163:10"},{"body":{"nodeType":"YulBlock","src":"27204:60:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27226:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27234:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27222:3:10"},"nodeType":"YulFunctionCall","src":"27222:14:10"},{"hexValue":"5061757361626c653a20706175736564","kind":"string","nodeType":"YulLiteral","src":"27238:18:10","type":"","value":"Pausable: paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27215:6:10"},"nodeType":"YulFunctionCall","src":"27215:42:10"},"nodeType":"YulExpressionStatement","src":"27215:42:10"}]},"name":"store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27196:6:10","type":""}],"src":"27098:166:10"},{"body":{"nodeType":"YulBlock","src":"27376:56:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27398:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27406:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27394:3:10"},"nodeType":"YulFunctionCall","src":"27394:14:10"},{"hexValue":"4e6f7420616c6c6f77656421","kind":"string","nodeType":"YulLiteral","src":"27410:14:10","type":"","value":"Not allowed!"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27387:6:10"},"nodeType":"YulFunctionCall","src":"27387:38:10"},"nodeType":"YulExpressionStatement","src":"27387:38:10"}]},"name":"store_literal_in_memory_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27368:6:10","type":""}],"src":"27270:162:10"},{"body":{"nodeType":"YulBlock","src":"27544:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27566:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27574:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27562:3:10"},"nodeType":"YulFunctionCall","src":"27562:14:10"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"27578:34:10","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27555:6:10"},"nodeType":"YulFunctionCall","src":"27555:58:10"},"nodeType":"YulExpressionStatement","src":"27555:58:10"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27536:6:10","type":""}],"src":"27438:182:10"},{"body":{"nodeType":"YulBlock","src":"27732:65:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27754:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27762:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27750:3:10"},"nodeType":"YulFunctionCall","src":"27750:14:10"},{"hexValue":"496e73756666696369656e742062616c616e636521","kind":"string","nodeType":"YulLiteral","src":"27766:23:10","type":"","value":"Insufficient balance!"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27743:6:10"},"nodeType":"YulFunctionCall","src":"27743:47:10"},"nodeType":"YulExpressionStatement","src":"27743:47:10"}]},"name":"store_literal_in_memory_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27724:6:10","type":""}],"src":"27626:171:10"},{"body":{"nodeType":"YulBlock","src":"27909:69:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27931:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"27939:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27927:3:10"},"nodeType":"YulFunctionCall","src":"27927:14:10"},{"hexValue":"45636f4d61726b65743a20496e76616c696420616d6f756e74","kind":"string","nodeType":"YulLiteral","src":"27943:27:10","type":"","value":"EcoMarket: Invalid amount"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27920:6:10"},"nodeType":"YulFunctionCall","src":"27920:51:10"},"nodeType":"YulExpressionStatement","src":"27920:51:10"}]},"name":"store_literal_in_memory_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27901:6:10","type":""}],"src":"27803:175:10"},{"body":{"nodeType":"YulBlock","src":"28090:73:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28112:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"28120:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28108:3:10"},"nodeType":"YulFunctionCall","src":"28108:14:10"},{"hexValue":"45636f4d61726b65743a204e6f7420656e6f7567682062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"28124:31:10","type":"","value":"EcoMarket: Not enough balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28101:6:10"},"nodeType":"YulFunctionCall","src":"28101:55:10"},"nodeType":"YulExpressionStatement","src":"28101:55:10"}]},"name":"store_literal_in_memory_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28082:6:10","type":""}],"src":"27984:179:10"},{"body":{"nodeType":"YulBlock","src":"28275:68:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28297:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"28305:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28293:3:10"},"nodeType":"YulFunctionCall","src":"28293:14:10"},{"hexValue":"696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"28309:26:10","type":"","value":"invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28286:6:10"},"nodeType":"YulFunctionCall","src":"28286:50:10"},"nodeType":"YulExpressionStatement","src":"28286:50:10"}]},"name":"store_literal_in_memory_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28267:6:10","type":""}],"src":"28169:174:10"},{"body":{"nodeType":"YulBlock","src":"28455:49:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28477:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"28485:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28473:3:10"},"nodeType":"YulFunctionCall","src":"28473:14:10"},{"hexValue":"4572726f72","kind":"string","nodeType":"YulLiteral","src":"28489:7:10","type":"","value":"Error"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28466:6:10"},"nodeType":"YulFunctionCall","src":"28466:31:10"},"nodeType":"YulExpressionStatement","src":"28466:31:10"}]},"name":"store_literal_in_memory_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28447:6:10","type":""}],"src":"28349:155:10"},{"body":{"nodeType":"YulBlock","src":"28616:75:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28638:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"28646:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28634:3:10"},"nodeType":"YulFunctionCall","src":"28634:14:10"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"28650:33:10","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28627:6:10"},"nodeType":"YulFunctionCall","src":"28627:57:10"},"nodeType":"YulExpressionStatement","src":"28627:57:10"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28608:6:10","type":""}],"src":"28510:181:10"},{"body":{"nodeType":"YulBlock","src":"28740:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"28797:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28806:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28809:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28799:6:10"},"nodeType":"YulFunctionCall","src":"28799:12:10"},"nodeType":"YulExpressionStatement","src":"28799:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28763:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28788:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"28770:17:10"},"nodeType":"YulFunctionCall","src":"28770:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28760:2:10"},"nodeType":"YulFunctionCall","src":"28760:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28753:6:10"},"nodeType":"YulFunctionCall","src":"28753:43:10"},"nodeType":"YulIf","src":"28750:63:10"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28733:5:10","type":""}],"src":"28697:122:10"},{"body":{"nodeType":"YulBlock","src":"28876:87:10","statements":[{"body":{"nodeType":"YulBlock","src":"28941:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28950:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28953:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28943:6:10"},"nodeType":"YulFunctionCall","src":"28943:12:10"},"nodeType":"YulExpressionStatement","src":"28943:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28899:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28932:5:10"}],"functionName":{"name":"cleanup_t_address_payable","nodeType":"YulIdentifier","src":"28906:25:10"},"nodeType":"YulFunctionCall","src":"28906:32:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28896:2:10"},"nodeType":"YulFunctionCall","src":"28896:43:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"28889:6:10"},"nodeType":"YulFunctionCall","src":"28889:51:10"},"nodeType":"YulIf","src":"28886:71:10"}]},"name":"validator_revert_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28869:5:10","type":""}],"src":"28825:138:10"},{"body":{"nodeType":"YulBlock","src":"29009:76:10","statements":[{"body":{"nodeType":"YulBlock","src":"29063:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29072:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29075:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29065:6:10"},"nodeType":"YulFunctionCall","src":"29065:12:10"},"nodeType":"YulExpressionStatement","src":"29065:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29032:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29054:5:10"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"29039:14:10"},"nodeType":"YulFunctionCall","src":"29039:21:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29029:2:10"},"nodeType":"YulFunctionCall","src":"29029:32:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29022:6:10"},"nodeType":"YulFunctionCall","src":"29022:40:10"},"nodeType":"YulIf","src":"29019:60:10"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29002:5:10","type":""}],"src":"28969:116:10"},{"body":{"nodeType":"YulBlock","src":"29134:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"29191:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29200:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29203:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29193:6:10"},"nodeType":"YulFunctionCall","src":"29193:12:10"},"nodeType":"YulExpressionStatement","src":"29193:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29157:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29182:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"29164:17:10"},"nodeType":"YulFunctionCall","src":"29164:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29154:2:10"},"nodeType":"YulFunctionCall","src":"29154:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29147:6:10"},"nodeType":"YulFunctionCall","src":"29147:43:10"},"nodeType":"YulIf","src":"29144:63:10"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29127:5:10","type":""}],"src":"29091:122:10"},{"body":{"nodeType":"YulBlock","src":"29262:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"29319:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29328:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29331:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29321:6:10"},"nodeType":"YulFunctionCall","src":"29321:12:10"},"nodeType":"YulExpressionStatement","src":"29321:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29285:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29310:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29292:17:10"},"nodeType":"YulFunctionCall","src":"29292:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29282:2:10"},"nodeType":"YulFunctionCall","src":"29282:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29275:6:10"},"nodeType":"YulFunctionCall","src":"29275:43:10"},"nodeType":"YulIf","src":"29272:63:10"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29255:5:10","type":""}],"src":"29219:122:10"},{"body":{"nodeType":"YulBlock","src":"29388:77:10","statements":[{"body":{"nodeType":"YulBlock","src":"29443:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29452:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"29455:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"29445:6:10"},"nodeType":"YulFunctionCall","src":"29445:12:10"},"nodeType":"YulExpressionStatement","src":"29445:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29411:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29434:5:10"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"29418:15:10"},"nodeType":"YulFunctionCall","src":"29418:22:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"29408:2:10"},"nodeType":"YulFunctionCall","src":"29408:33:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29401:6:10"},"nodeType":"YulFunctionCall","src":"29401:41:10"},"nodeType":"YulIf","src":"29398:61:10"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29381:5:10","type":""}],"src":"29347:118:10"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_payable(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address_payable(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address_payable(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_payable(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_address(cleanup_t_address(value)))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 8)\n        store_literal_in_memory_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 5)\n        store_literal_in_memory_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_packed_t_address_t_uint256_t_uint256_t_address__to_t_address_t_uint256_t_uint256_t_address__nonPadded_inplace_fromStack_reversed(pos , value3, value2, value1, value0) -> end {\n\n        abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 20)\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value2,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value3,  pos)\n        pos := add(pos, 20)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes32__to_t_bytes_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint8__to_t_bytes32_t_bytes32_t_uint8__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_address_payable(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function leftAlign_t_address(value) -> aligned {\n        aligned := leftAlign_t_uint160(value)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function leftAlign_t_uint160(value) -> aligned {\n        aligned := shift_left_96(value)\n    }\n\n    function leftAlign_t_uint256(value) -> aligned {\n        aligned := value\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function shift_left_96(value) -> newValue {\n        newValue :=\n\n        shl(96, value)\n\n    }\n\n    function store_literal_in_memory_0505c0ddbca29dc5effcdcaa4f6c7cee913d944990967f18cc2592d6ec780d87(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid!\")\n\n    }\n\n    function store_literal_in_memory_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: not paused\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1(memPtr) {\n\n        mstore(add(memPtr, 0), \"Invalid amount\")\n\n    }\n\n    function store_literal_in_memory_5019e9bb860959cdda3e1d3eb61165a2a9c9d9818183c266b0f702fe5e27928b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Unauthorized!\")\n\n    }\n\n    function store_literal_in_memory_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Pausable: paused\")\n\n    }\n\n    function store_literal_in_memory_979b4c7dcccc63b5a6fa2aa9d64d100e0dc7ed98f38a98312f5f2dd8c28ea127(memPtr) {\n\n        mstore(add(memPtr, 0), \"Not allowed!\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_9ca6d7d8f4b50884f4b4d7f1090e14ef0c0a197944e02f7d686fb0c2fe397c91(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient balance!\")\n\n    }\n\n    function store_literal_in_memory_a836ced6117d653cc722ac140f334347230e4cb5ff4ea1b5c99a5581653263ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"EcoMarket: Invalid amount\")\n\n    }\n\n    function store_literal_in_memory_d967fae81d422f2376f41c216b7e2ec3e419c1fc677f574f8ed8421e8f2652d6(memPtr) {\n\n        mstore(add(memPtr, 0), \"EcoMarket: Not enough balance\")\n\n    }\n\n    function store_literal_in_memory_e0060b83051574ba40ded2ef248b0d17cb210e5fa4f776d436805ab1ebb12b87(memPtr) {\n\n        mstore(add(memPtr, 0), \"invalid signature length\")\n\n    }\n\n    function store_literal_in_memory_e342daa49723ff3485f4ff5f755a17b8bc9c3c33bbd312ceee37c94eebfe45c1(memPtr) {\n\n        mstore(add(memPtr, 0), \"Error\")\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_address_payable(value) {\n        if iszero(eq(value, cleanup_t_address_payable(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xA7BB5803 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xA7BB5803 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0xD0466D52 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xD3259A3C EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2EF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xA4AF9D61 EQ PUSH2 0x20D JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x5C975ABB GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x6F3C00FF EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x7AEA7B1B EQ PUSH2 0x1A2 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x2801273B EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x53FF0928 EQ PUSH2 0x12D JUMPI PUSH2 0xE8 JUMP JUMPDEST CALLDATASIZE PUSH2 0xE8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x318 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x40E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14F SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16B PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x178 SWAP2 SWAP1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x189 PUSH2 0x5CE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A0 PUSH2 0x671 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x1219 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E0 PUSH2 0x760 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F7 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x79B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1658 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x271 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26C SWAP2 SWAP1 PUSH2 0x11A3 JUMP JUMPDEST PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x280 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AB SWAP2 SWAP1 PUSH2 0x113C JUMP JUMPDEST PUSH2 0x839 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BD SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x1259 JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x316 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x108F JUMP JUMPDEST PUSH2 0xBEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x328 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x330 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36A SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP3 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3AE SWAP3 SWAP2 SWAP1 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x400 SWAP2 SWAP1 PUSH2 0x110F JUMP JUMPDEST POP PUSH2 0x409 PUSH2 0xD86 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x416 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x41E PUSH2 0xD8F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x428 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 GT PUSH2 0x4A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4A0 SWAP1 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SELFBALANCE GT PUSH2 0x4EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E2 SWAP1 PUSH2 0x17EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53A SWAP2 SWAP1 PUSH2 0x1982 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AC SWAP1 PUSH2 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x619 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x610 SWAP1 PUSH2 0x174F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLVALUE PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x668 SWAP2 SWAP1 PUSH2 0x192C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x679 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x683 PUSH1 0x0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x68D PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x695 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x69D PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x6E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D7 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0x754 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x74B SWAP1 PUSH2 0x182F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x75C PUSH2 0xD86 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x768 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x770 PUSH2 0xEB6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP3 ADD DUP1 MLOAD DUP5 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP6 ADD KECCAK256 DUP2 DUP4 MSTORE DUP1 SWAP6 POP POP POP POP POP POP PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x41 DUP5 MLOAD EQ PUSH2 0x81A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x811 SWAP1 PUSH2 0x184F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP5 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1954524F4E205369676E6564204D6573736167653A0A33320000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP2 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x889 SWAP3 SWAP2 SWAP1 PUSH2 0x15EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x8C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x90A PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x912 PUSH2 0xD36 JUMP JUMPDEST DUP4 SELFBALANCE GT PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94B SWAP1 PUSH2 0x17EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x9C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BA SWAP1 PUSH2 0x17AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9D7 SWAP2 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0xA35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2C SWAP1 PUSH2 0x16EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA42 DUP6 DUP6 DUP6 PUSH2 0xF18 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA52 DUP6 PUSH2 0x7D1 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x0 PUSH2 0xA66 DUP6 DUP4 DUP7 DUP7 PUSH2 0x839 JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACD SWAP1 PUSH2 0x176F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP8 PUSH1 0x40 MLOAD PUSH2 0xAE8 SWAP2 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP9 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x1982 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP11 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP PUSH2 0xBD7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCE SWAP1 PUSH2 0x186F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP PUSH2 0xBE4 PUSH2 0xD86 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xBF2 PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC59 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC6B DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xC76 PUSH2 0xF50 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC94 PUSH2 0x772 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCE1 SWAP1 PUSH2 0x17CF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xCF4 PUSH2 0x5B8 JUMP JUMPDEST ISZERO PUSH2 0xD34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2B SWAP1 PUSH2 0x178F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xD7C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD73 SWAP1 PUSH2 0x188F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD97 PUSH2 0xF58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xDDA PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xDE7 SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xEBE PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF01 PUSH2 0xF50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0E SWAP2 SWAP1 PUSH2 0x1614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF31 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1587 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF60 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0xF9F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF96 SWAP1 PUSH2 0x170F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB4 PUSH2 0xFAF DUP5 PUSH2 0x18D4 JUMP JUMPDEST PUSH2 0x18AF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xFD0 JUMPI PUSH2 0xFCF PUSH2 0x1B35 JUMP JUMPDEST JUMPDEST PUSH2 0xFDB DUP5 DUP3 DUP6 PUSH2 0x1A27 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xFF2 DUP2 PUSH2 0x1DC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1007 DUP2 PUSH2 0x1DDD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x101C DUP2 PUSH2 0x1DF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1031 DUP2 PUSH2 0x1E0B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x104C JUMPI PUSH2 0x104B PUSH2 0x1B30 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x105C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xFA1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1074 DUP2 PUSH2 0x1E22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1089 DUP2 PUSH2 0x1E39 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10A5 JUMPI PUSH2 0x10A4 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10B3 DUP5 DUP3 DUP6 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10D5 JUMPI PUSH2 0x10D4 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10E3 DUP7 DUP3 DUP8 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10F4 DUP7 DUP3 DUP8 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1105 DUP7 DUP3 DUP8 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1125 JUMPI PUSH2 0x1124 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1133 DUP5 DUP3 DUP6 ADD PUSH2 0x100D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1156 JUMPI PUSH2 0x1155 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1164 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1175 DUP8 DUP3 DUP9 ADD PUSH2 0x107A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1186 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1197 DUP8 DUP3 DUP9 ADD PUSH2 0x1022 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11B8 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11D7 JUMPI PUSH2 0x11D6 PUSH2 0x1B3A JUMP JUMPDEST JUMPDEST PUSH2 0x11E3 DUP5 DUP3 DUP6 ADD PUSH2 0x1037 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1202 JUMPI PUSH2 0x1201 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1210 DUP5 DUP3 DUP6 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1230 JUMPI PUSH2 0x122F PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x123E DUP6 DUP3 DUP7 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x124F DUP6 DUP3 DUP7 ADD PUSH2 0xFF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1273 JUMPI PUSH2 0x1272 PUSH2 0x1B3F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1281 DUP8 DUP3 DUP9 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1292 DUP8 DUP3 DUP9 ADD PUSH2 0x1065 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x12A3 DUP8 DUP3 DUP9 ADD PUSH2 0xFE3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C4 JUMPI PUSH2 0x12C3 PUSH2 0x1B3A JUMP JUMPDEST JUMPDEST PUSH2 0x12D0 DUP8 DUP3 DUP9 ADD PUSH2 0x1037 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x12E5 DUP2 PUSH2 0x19B6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x12FC PUSH2 0x12F7 DUP3 PUSH2 0x19B6 JUMP JUMPDEST PUSH2 0x1A9A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x130B DUP2 PUSH2 0x19DA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x131A DUP2 PUSH2 0x19E6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1331 PUSH2 0x132C DUP3 PUSH2 0x19E6 JUMP JUMPDEST PUSH2 0x1AAC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1342 DUP3 PUSH2 0x1905 JUMP JUMPDEST PUSH2 0x134C DUP2 DUP6 PUSH2 0x1910 JUMP JUMPDEST SWAP4 POP PUSH2 0x135C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1A36 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1375 PUSH1 0x8 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1380 DUP3 PUSH2 0x1B62 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1398 PUSH1 0x14 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13A3 DUP3 PUSH2 0x1B8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BB PUSH1 0x26 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13C6 DUP3 PUSH2 0x1BB4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13DE PUSH1 0xE DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x13E9 DUP3 PUSH2 0x1C03 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1401 PUSH1 0xD DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x140C DUP3 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1424 PUSH1 0x10 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x142F DUP3 PUSH2 0x1C55 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1447 PUSH1 0xC DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1452 DUP3 PUSH2 0x1C7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146A PUSH1 0x20 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1475 DUP3 PUSH2 0x1CA7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x148D PUSH1 0x15 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1498 DUP3 PUSH2 0x1CD0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B0 PUSH1 0x19 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x14BB DUP3 PUSH2 0x1CF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D3 PUSH1 0x1D DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x14DE DUP3 PUSH2 0x1D22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14F6 PUSH1 0x18 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1501 DUP3 PUSH2 0x1D4B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1519 PUSH1 0x5 DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1524 DUP3 PUSH2 0x1D74 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x153C PUSH1 0x1F DUP4 PUSH2 0x191B JUMP JUMPDEST SWAP2 POP PUSH2 0x1547 DUP3 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x155B DUP2 PUSH2 0x1A10 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1572 PUSH2 0x156D DUP3 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x1AC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1581 DUP2 PUSH2 0x1A1A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1593 DUP3 DUP8 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x15A3 DUP3 DUP7 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x15B3 DUP3 DUP6 PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x15C3 DUP3 DUP5 PUSH2 0x12EB JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E1 DUP3 DUP5 PUSH2 0x1337 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F8 DUP3 DUP6 PUSH2 0x1337 JUMP JUMPDEST SWAP2 POP PUSH2 0x1604 DUP3 DUP5 PUSH2 0x1320 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1629 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x12DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1644 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x12DC JUMP JUMPDEST PUSH2 0x1651 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1552 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x166D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1302 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1688 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x1695 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16A2 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1578 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x16BF PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16CC PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1578 JUMP JUMPDEST PUSH2 0x16D9 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x16E6 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1311 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1708 DUP2 PUSH2 0x1368 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1728 DUP2 PUSH2 0x138B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1748 DUP2 PUSH2 0x13AE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1768 DUP2 PUSH2 0x13D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1788 DUP2 PUSH2 0x13F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17A8 DUP2 PUSH2 0x1417 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17C8 DUP2 PUSH2 0x143A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x17E8 DUP2 PUSH2 0x145D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1808 DUP2 PUSH2 0x1480 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1828 DUP2 PUSH2 0x14A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1848 DUP2 PUSH2 0x14C6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1868 DUP2 PUSH2 0x14E9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1888 DUP2 PUSH2 0x150C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18A8 DUP2 PUSH2 0x152F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18B9 PUSH2 0x18CA JUMP JUMPDEST SWAP1 POP PUSH2 0x18C5 DUP3 DUP3 PUSH2 0x1A69 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EF JUMPI PUSH2 0x18EE PUSH2 0x1B01 JUMP JUMPDEST JUMPDEST PUSH2 0x18F8 DUP3 PUSH2 0x1B44 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1937 DUP3 PUSH2 0x1A10 JUMP JUMPDEST SWAP2 POP PUSH2 0x1942 DUP4 PUSH2 0x1A10 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1977 JUMPI PUSH2 0x1976 PUSH2 0x1AD2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198D DUP3 PUSH2 0x1A10 JUMP JUMPDEST SWAP2 POP PUSH2 0x1998 DUP4 PUSH2 0x1A10 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x19AB JUMPI PUSH2 0x19AA PUSH2 0x1AD2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19C1 DUP3 PUSH2 0x19F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19D3 DUP3 PUSH2 0x19F0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A54 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A39 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1A63 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1A72 DUP3 PUSH2 0x1B44 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1A91 JUMPI PUSH2 0x1A90 PUSH2 0x1B01 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA5 DUP3 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC1 DUP3 PUSH2 0x1B55 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C696421000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E76616C696420616D6F756E74000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x556E617574686F72697A65642100000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4E6F7420616C6C6F776564210000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365210000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45636F4D61726B65743A20496E76616C696420616D6F756E7400000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45636F4D61726B65743A204E6F7420656E6F7567682062616C616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x696E76616C6964207369676E6174757265206C656E6774680000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4572726F72000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x1DCF DUP2 PUSH2 0x19B6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1DE6 DUP2 PUSH2 0x19C8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1DFD DUP2 PUSH2 0x19DA JUMP JUMPDEST DUP2 EQ PUSH2 0x1E08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E14 DUP2 PUSH2 0x19E6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E2B DUP2 PUSH2 0x1A10 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1E42 DUP2 PUSH2 0x1A1A JUMP JUMPDEST DUP2 EQ PUSH2 0x1E4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD BYTE 0xB9 SWAP11 PUSH11 0xA5E577C1FDC344A8A2602A SAR CREATE 0xC9 0xAF DUP16 SLT 0xC4 SWAP10 SWAP7 0x5F REVERT MLOAD DUP10 0xD 0x4F DUP9 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"189:3526:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3413:265;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3083:63;;;;;;;;;;;;;:::i;:::-;;1354:312;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1096:84:6;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1195:153:2;;;:::i;:::-;;1253:101:5;;;;;;;;;;;;;:::i;:::-;;3152:255:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3018:59;;;;;;;;;;;;;:::i;:::-;;630:85:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;328:39:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2238:774;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;1862:366;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;425:764;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1503:198:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3413:265:2;523:13:5;:11;:13::i;:::-;720:19:6::1;:17;:19::i;:::-;1431:21:7::2;:19;:21::i;:::-;3586:1:2::3;3577:6;:10;3569:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;3638:11;3631:28;;;3660:2;3664:6;3631:40;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1473:20:7::2;:18;:20::i;:::-;3413:265:2::0;;;:::o;3083:63::-;523:13:5;:11;:13::i;:::-;3129:10:2::1;:8;:10::i;:::-;3083:63::o:0;1354:312::-;720:19:6;:17;:19::i;:::-;1444:8:2::1;:20;1453:10;1444:20;;;;;;;;;;;;;;;;1435:6;:29;1427:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1525:6;1501:21;:30;1493:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;1592:6;1568:8;:20;1577:10;1568:20;;;;;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;;;;;;;1625:10;1617:24;;:32;1642:6;1617:32;;;;;;;;;;;;;;;;;;;;;;;1609:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;1354:312:::0;:::o;1096:84:6:-;1143:4;1166:7;;;;;;;;;;;1159:14;;1096:84;:::o;1195:153:2:-;720:19:6;:17;:19::i;:::-;1277:1:2::1;1265:9;:13;1257:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1332:9;1308:8;:20;1317:10;1308:20;;;;;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;;;;;1195:153::o:0;1253:101:5:-;523:13;:11;:13::i;:::-;1317:30:::1;1344:1;1317:18;:30::i;:::-;1253:101::o:0;3152:255:2:-;523:13:5;:11;:13::i;:::-;720:19:6::1;:17;:19::i;:::-;1431:21:7::2;:19;:21::i;:::-;3302:1:2::3;3293:6;:10;3285:48;;;;;;;;;;;;:::i;:::-;;;;;;;;;3351:2;:7;;:15;3359:6;3351:15;;;;;;;;;;;;;;;;;;;;;;;3343:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;1473:20:7::2;:18;:20::i;:::-;3152:255:2::0;;:::o;3018:59::-;523:13:5;:11;:13::i;:::-;3062:8:2::1;:6;:8::i;:::-;3018:59::o:0;630:85:5:-;676:7;702:6;;;;;;;;;;;695:13;;630:85;:::o;328:39:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2238:774::-;2301:9;2312;2323:7;2364:2;2350:3;:10;:16;2342:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;2791:2;2786:3;2782:12;2776:19;2771:24;;2859:2;2854:3;2850:12;2844:19;2839:24;;2964:2;2959:3;2955:12;2949:19;2946:1;2941:28;2936:33;;2238:774;;;;;:::o;1862:366::-;1967:7;1986:19;:52;;;;;;;;;;;;;;;;;;;2048:27;2105:6;2113:14;2088:40;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2078:51;;;;;;2048:81;;2139:14;2156:42;2166:19;2187:2;2191;2195;2156:42;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2139:59;;2215:6;2208:13;;;;;1862:366;;;;;;:::o;425:764::-;720:19:6;:17;:19::i;:::-;1431:21:7::1;:19;:21::i;:::-;644:6:2::2;620:21;:30;612:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;708:7;694:21;;:10;:21;;;;686:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;774:5;750:29;;:9;760;750:20;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:29;;;742:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;803:15;821:32;830:6;838:5;845:7;821:8;:32::i;:::-;803:50;;865:9;876::::0;887:7:::2;898:25;913:9;898:14;:25::i;:::-;864:59;;;;;;933:14;950:34;967:7;976:1;979;982;950:16;:34::i;:::-;933:51;;1021:7;1011:17;;:6;:17;;;1003:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;1080:4;1057:9;1067;1057:20;;;;;;:::i;:::-;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;1115:6;1094:8;:17;1103:7;1094:17;;;;;;;;;;;;;;;;:27;;;;;;;:::i;:::-;;;;;;;;1148:10;1140:24;;:32;1165:6;1140:32;;;;;;;;;;;;;;;;;;;;;;;1132:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;602:587;;;;;1473:20:7::1;:18;:20::i;:::-;425:764:2::0;;;;:::o;1503:198:5:-;523:13;:11;:13::i;:::-;1611:1:::1;1591:22;;:8;:22;;;;1583:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;1666:28;1685:8;1666:18;:28::i;:::-;1503:198:::0;:::o;788:130::-;862:12;:10;:12::i;:::-;851:23;;:7;:5;:7::i;:::-;:23;;;843:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;788:130::o;1248:106:6:-;1318:8;:6;:8::i;:::-;1317:9;1309:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1248:106::o;1506:287:7:-;929:1;1638:7;;:19;;1630:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;929:1;1768:7;:18;;;;1506:287::o;1799:209::-;886:1;1979:7;:22;;;;1799:209::o;1914:117:6:-;967:16;:14;:16::i;:::-;1982:5:::1;1972:7:::0;::::1;:15;;;;;;;;;;;;;;;;;;2002:22;2011:12;:10;:12::i;:::-;2002:22;;;;;;:::i;:::-;;;;;;;;1914:117::o:0;1855:187:5:-;1928:16;1947:6;;;;;;;;;;;1928:25;;1972:8;1963:6;;:17;;;;;;;;;;;;;;;;;;2026:8;1995:40;;2016:8;1995:40;;;;;;;;;;;;1918:124;1855:187;:::o;1667:115:6:-;720:19;:17;:19::i;:::-;1736:4:::1;1726:7;::::0;:14:::1;;;;;;;;;;;;;;;;;;1755:20;1762:12;:10;:12::i;:::-;1755:20;;;;;;:::i;:::-;;;;;;;;1667:115::o:0;1672:184:2:-;1760:7;1813:10;1825:6;1833:5;1840:7;1796:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1786:63;;;;;;1779:70;;1672:184;;;;;:::o;587:96:0:-;640:7;666:10;659:17;;587:96;:::o;1426:106:6:-;1492:8;:6;:8::i;:::-;1484:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;1426:106::o;7:410:10:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:155::-;622:5;660:6;647:20;638:29;;676:41;711:5;676:41;:::i;:::-;568:155;;;;:::o;729:137::-;783:5;814:6;808:13;799:22;;830:30;854:5;830:30;:::i;:::-;729:137;;;;:::o;872:139::-;918:5;956:6;943:20;934:29;;972:33;999:5;972:33;:::i;:::-;872:139;;;;:::o;1030:338::-;1085:5;1134:3;1127:4;1119:6;1115:17;1111:27;1101:122;;1142:79;;:::i;:::-;1101:122;1259:6;1246:20;1284:78;1358:3;1350:6;1343:4;1335:6;1331:17;1284:78;:::i;:::-;1275:87;;1091:277;1030:338;;;;:::o;1374:139::-;1420:5;1458:6;1445:20;1436:29;;1474:33;1501:5;1474:33;:::i;:::-;1374:139;;;;:::o;1519:135::-;1563:5;1601:6;1588:20;1579:29;;1617:31;1642:5;1617:31;:::i;:::-;1519:135;;;;:::o;1660:329::-;1719:6;1768:2;1756:9;1747:7;1743:23;1739:32;1736:119;;;1774:79;;:::i;:::-;1736:119;1894:1;1919:53;1964:7;1955:6;1944:9;1940:22;1919:53;:::i;:::-;1909:63;;1865:117;1660:329;;;;:::o;1995:619::-;2072:6;2080;2088;2137:2;2125:9;2116:7;2112:23;2108:32;2105:119;;;2143:79;;:::i;:::-;2105:119;2263:1;2288:53;2333:7;2324:6;2313:9;2309:22;2288:53;:::i;:::-;2278:63;;2234:117;2390:2;2416:53;2461:7;2452:6;2441:9;2437:22;2416:53;:::i;:::-;2406:63;;2361:118;2518:2;2544:53;2589:7;2580:6;2569:9;2565:22;2544:53;:::i;:::-;2534:63;;2489:118;1995:619;;;;;:::o;2620:345::-;2687:6;2736:2;2724:9;2715:7;2711:23;2707:32;2704:119;;;2742:79;;:::i;:::-;2704:119;2862:1;2887:61;2940:7;2931:6;2920:9;2916:22;2887:61;:::i;:::-;2877:71;;2833:125;2620:345;;;;:::o;2971:761::-;3055:6;3063;3071;3079;3128:3;3116:9;3107:7;3103:23;3099:33;3096:120;;;3135:79;;:::i;:::-;3096:120;3255:1;3280:53;3325:7;3316:6;3305:9;3301:22;3280:53;:::i;:::-;3270:63;;3226:117;3382:2;3408:51;3451:7;3442:6;3431:9;3427:22;3408:51;:::i;:::-;3398:61;;3353:116;3508:2;3534:53;3579:7;3570:6;3559:9;3555:22;3534:53;:::i;:::-;3524:63;;3479:118;3636:2;3662:53;3707:7;3698:6;3687:9;3683:22;3662:53;:::i;:::-;3652:63;;3607:118;2971:761;;;;;;;:::o;3738:507::-;3806:6;3855:2;3843:9;3834:7;3830:23;3826:32;3823:119;;;3861:79;;:::i;:::-;3823:119;4009:1;3998:9;3994:17;3981:31;4039:18;4031:6;4028:30;4025:117;;;4061:79;;:::i;:::-;4025:117;4166:62;4220:7;4211:6;4200:9;4196:22;4166:62;:::i;:::-;4156:72;;3952:286;3738:507;;;;:::o;4251:329::-;4310:6;4359:2;4347:9;4338:7;4334:23;4330:32;4327:119;;;4365:79;;:::i;:::-;4327:119;4485:1;4510:53;4555:7;4546:6;4535:9;4531:22;4510:53;:::i;:::-;4500:63;;4456:117;4251:329;;;;:::o;4586:490::-;4662:6;4670;4719:2;4707:9;4698:7;4694:23;4690:32;4687:119;;;4725:79;;:::i;:::-;4687:119;4845:1;4870:53;4915:7;4906:6;4895:9;4891:22;4870:53;:::i;:::-;4860:63;;4816:117;4972:2;4998:61;5051:7;5042:6;5031:9;5027:22;4998:61;:::i;:::-;4988:71;;4943:126;4586:490;;;;;:::o;5082:943::-;5177:6;5185;5193;5201;5250:3;5238:9;5229:7;5225:23;5221:33;5218:120;;;5257:79;;:::i;:::-;5218:120;5377:1;5402:53;5447:7;5438:6;5427:9;5423:22;5402:53;:::i;:::-;5392:63;;5348:117;5504:2;5530:53;5575:7;5566:6;5555:9;5551:22;5530:53;:::i;:::-;5520:63;;5475:118;5632:2;5658:53;5703:7;5694:6;5683:9;5679:22;5658:53;:::i;:::-;5648:63;;5603:118;5788:2;5777:9;5773:18;5760:32;5819:18;5811:6;5808:30;5805:117;;;5841:79;;:::i;:::-;5805:117;5946:62;6000:7;5991:6;5980:9;5976:22;5946:62;:::i;:::-;5936:72;;5731:287;5082:943;;;;;;;:::o;6031:118::-;6118:24;6136:5;6118:24;:::i;:::-;6113:3;6106:37;6031:118;;:::o;6155:157::-;6260:45;6280:24;6298:5;6280:24;:::i;:::-;6260:45;:::i;:::-;6255:3;6248:58;6155:157;;:::o;6318:109::-;6399:21;6414:5;6399:21;:::i;:::-;6394:3;6387:34;6318:109;;:::o;6433:118::-;6520:24;6538:5;6520:24;:::i;:::-;6515:3;6508:37;6433:118;;:::o;6557:157::-;6662:45;6682:24;6700:5;6682:24;:::i;:::-;6662:45;:::i;:::-;6657:3;6650:58;6557:157;;:::o;6720:373::-;6824:3;6852:38;6884:5;6852:38;:::i;:::-;6906:88;6987:6;6982:3;6906:88;:::i;:::-;6899:95;;7003:52;7048:6;7043:3;7036:4;7029:5;7025:16;7003:52;:::i;:::-;7080:6;7075:3;7071:16;7064:23;;6828:265;6720:373;;;;:::o;7099:365::-;7241:3;7262:66;7326:1;7321:3;7262:66;:::i;:::-;7255:73;;7337:93;7426:3;7337:93;:::i;:::-;7455:2;7450:3;7446:12;7439:19;;7099:365;;;:::o;7470:366::-;7612:3;7633:67;7697:2;7692:3;7633:67;:::i;:::-;7626:74;;7709:93;7798:3;7709:93;:::i;:::-;7827:2;7822:3;7818:12;7811:19;;7470:366;;;:::o;7842:::-;7984:3;8005:67;8069:2;8064:3;8005:67;:::i;:::-;7998:74;;8081:93;8170:3;8081:93;:::i;:::-;8199:2;8194:3;8190:12;8183:19;;7842:366;;;:::o;8214:::-;8356:3;8377:67;8441:2;8436:3;8377:67;:::i;:::-;8370:74;;8453:93;8542:3;8453:93;:::i;:::-;8571:2;8566:3;8562:12;8555:19;;8214:366;;;:::o;8586:::-;8728:3;8749:67;8813:2;8808:3;8749:67;:::i;:::-;8742:74;;8825:93;8914:3;8825:93;:::i;:::-;8943:2;8938:3;8934:12;8927:19;;8586:366;;;:::o;8958:::-;9100:3;9121:67;9185:2;9180:3;9121:67;:::i;:::-;9114:74;;9197:93;9286:3;9197:93;:::i;:::-;9315:2;9310:3;9306:12;9299:19;;8958:366;;;:::o;9330:::-;9472:3;9493:67;9557:2;9552:3;9493:67;:::i;:::-;9486:74;;9569:93;9658:3;9569:93;:::i;:::-;9687:2;9682:3;9678:12;9671:19;;9330:366;;;:::o;9702:::-;9844:3;9865:67;9929:2;9924:3;9865:67;:::i;:::-;9858:74;;9941:93;10030:3;9941:93;:::i;:::-;10059:2;10054:3;10050:12;10043:19;;9702:366;;;:::o;10074:::-;10216:3;10237:67;10301:2;10296:3;10237:67;:::i;:::-;10230:74;;10313:93;10402:3;10313:93;:::i;:::-;10431:2;10426:3;10422:12;10415:19;;10074:366;;;:::o;10446:::-;10588:3;10609:67;10673:2;10668:3;10609:67;:::i;:::-;10602:74;;10685:93;10774:3;10685:93;:::i;:::-;10803:2;10798:3;10794:12;10787:19;;10446:366;;;:::o;10818:::-;10960:3;10981:67;11045:2;11040:3;10981:67;:::i;:::-;10974:74;;11057:93;11146:3;11057:93;:::i;:::-;11175:2;11170:3;11166:12;11159:19;;10818:366;;;:::o;11190:::-;11332:3;11353:67;11417:2;11412:3;11353:67;:::i;:::-;11346:74;;11429:93;11518:3;11429:93;:::i;:::-;11547:2;11542:3;11538:12;11531:19;;11190:366;;;:::o;11562:365::-;11704:3;11725:66;11789:1;11784:3;11725:66;:::i;:::-;11718:73;;11800:93;11889:3;11800:93;:::i;:::-;11918:2;11913:3;11909:12;11902:19;;11562:365;;;:::o;11933:366::-;12075:3;12096:67;12160:2;12155:3;12096:67;:::i;:::-;12089:74;;12172:93;12261:3;12172:93;:::i;:::-;12290:2;12285:3;12281:12;12274:19;;11933:366;;;:::o;12305:118::-;12392:24;12410:5;12392:24;:::i;:::-;12387:3;12380:37;12305:118;;:::o;12429:157::-;12534:45;12554:24;12572:5;12554:24;:::i;:::-;12534:45;:::i;:::-;12529:3;12522:58;12429:157;;:::o;12592:112::-;12675:22;12691:5;12675:22;:::i;:::-;12670:3;12663:35;12592:112;;:::o;12710:679::-;12906:3;12921:75;12992:3;12983:6;12921:75;:::i;:::-;13021:2;13016:3;13012:12;13005:19;;13034:75;13105:3;13096:6;13034:75;:::i;:::-;13134:2;13129:3;13125:12;13118:19;;13147:75;13218:3;13209:6;13147:75;:::i;:::-;13247:2;13242:3;13238:12;13231:19;;13260:75;13331:3;13322:6;13260:75;:::i;:::-;13360:2;13355:3;13351:12;13344:19;;13380:3;13373:10;;12710:679;;;;;;;:::o;13395:271::-;13525:3;13547:93;13636:3;13627:6;13547:93;:::i;:::-;13540:100;;13657:3;13650:10;;13395:271;;;;:::o;13672:412::-;13830:3;13852:93;13941:3;13932:6;13852:93;:::i;:::-;13845:100;;13955:75;14026:3;14017:6;13955:75;:::i;:::-;14055:2;14050:3;14046:12;14039:19;;14075:3;14068:10;;13672:412;;;;;:::o;14090:222::-;14183:4;14221:2;14210:9;14206:18;14198:26;;14234:71;14302:1;14291:9;14287:17;14278:6;14234:71;:::i;:::-;14090:222;;;;:::o;14318:332::-;14439:4;14477:2;14466:9;14462:18;14454:26;;14490:71;14558:1;14547:9;14543:17;14534:6;14490:71;:::i;:::-;14571:72;14639:2;14628:9;14624:18;14615:6;14571:72;:::i;:::-;14318:332;;;;;:::o;14656:210::-;14743:4;14781:2;14770:9;14766:18;14758:26;;14794:65;14856:1;14845:9;14841:17;14832:6;14794:65;:::i;:::-;14656:210;;;;:::o;14872:434::-;15017:4;15055:2;15044:9;15040:18;15032:26;;15068:71;15136:1;15125:9;15121:17;15112:6;15068:71;:::i;:::-;15149:72;15217:2;15206:9;15202:18;15193:6;15149:72;:::i;:::-;15231:68;15295:2;15284:9;15280:18;15271:6;15231:68;:::i;:::-;14872:434;;;;;;:::o;15312:545::-;15485:4;15523:3;15512:9;15508:19;15500:27;;15537:71;15605:1;15594:9;15590:17;15581:6;15537:71;:::i;:::-;15618:68;15682:2;15671:9;15667:18;15658:6;15618:68;:::i;:::-;15696:72;15764:2;15753:9;15749:18;15740:6;15696:72;:::i;:::-;15778;15846:2;15835:9;15831:18;15822:6;15778:72;:::i;:::-;15312:545;;;;;;;:::o;15863:419::-;16029:4;16067:2;16056:9;16052:18;16044:26;;16116:9;16110:4;16106:20;16102:1;16091:9;16087:17;16080:47;16144:131;16270:4;16144:131;:::i;:::-;16136:139;;15863:419;;;:::o;16288:::-;16454:4;16492:2;16481:9;16477:18;16469:26;;16541:9;16535:4;16531:20;16527:1;16516:9;16512:17;16505:47;16569:131;16695:4;16569:131;:::i;:::-;16561:139;;16288:419;;;:::o;16713:::-;16879:4;16917:2;16906:9;16902:18;16894:26;;16966:9;16960:4;16956:20;16952:1;16941:9;16937:17;16930:47;16994:131;17120:4;16994:131;:::i;:::-;16986:139;;16713:419;;;:::o;17138:::-;17304:4;17342:2;17331:9;17327:18;17319:26;;17391:9;17385:4;17381:20;17377:1;17366:9;17362:17;17355:47;17419:131;17545:4;17419:131;:::i;:::-;17411:139;;17138:419;;;:::o;17563:::-;17729:4;17767:2;17756:9;17752:18;17744:26;;17816:9;17810:4;17806:20;17802:1;17791:9;17787:17;17780:47;17844:131;17970:4;17844:131;:::i;:::-;17836:139;;17563:419;;;:::o;17988:::-;18154:4;18192:2;18181:9;18177:18;18169:26;;18241:9;18235:4;18231:20;18227:1;18216:9;18212:17;18205:47;18269:131;18395:4;18269:131;:::i;:::-;18261:139;;17988:419;;;:::o;18413:::-;18579:4;18617:2;18606:9;18602:18;18594:26;;18666:9;18660:4;18656:20;18652:1;18641:9;18637:17;18630:47;18694:131;18820:4;18694:131;:::i;:::-;18686:139;;18413:419;;;:::o;18838:::-;19004:4;19042:2;19031:9;19027:18;19019:26;;19091:9;19085:4;19081:20;19077:1;19066:9;19062:17;19055:47;19119:131;19245:4;19119:131;:::i;:::-;19111:139;;18838:419;;;:::o;19263:::-;19429:4;19467:2;19456:9;19452:18;19444:26;;19516:9;19510:4;19506:20;19502:1;19491:9;19487:17;19480:47;19544:131;19670:4;19544:131;:::i;:::-;19536:139;;19263:419;;;:::o;19688:::-;19854:4;19892:2;19881:9;19877:18;19869:26;;19941:9;19935:4;19931:20;19927:1;19916:9;19912:17;19905:47;19969:131;20095:4;19969:131;:::i;:::-;19961:139;;19688:419;;;:::o;20113:::-;20279:4;20317:2;20306:9;20302:18;20294:26;;20366:9;20360:4;20356:20;20352:1;20341:9;20337:17;20330:47;20394:131;20520:4;20394:131;:::i;:::-;20386:139;;20113:419;;;:::o;20538:::-;20704:4;20742:2;20731:9;20727:18;20719:26;;20791:9;20785:4;20781:20;20777:1;20766:9;20762:17;20755:47;20819:131;20945:4;20819:131;:::i;:::-;20811:139;;20538:419;;;:::o;20963:::-;21129:4;21167:2;21156:9;21152:18;21144:26;;21216:9;21210:4;21206:20;21202:1;21191:9;21187:17;21180:47;21244:131;21370:4;21244:131;:::i;:::-;21236:139;;20963:419;;;:::o;21388:::-;21554:4;21592:2;21581:9;21577:18;21569:26;;21641:9;21635:4;21631:20;21627:1;21616:9;21612:17;21605:47;21669:131;21795:4;21669:131;:::i;:::-;21661:139;;21388:419;;;:::o;21813:129::-;21847:6;21874:20;;:::i;:::-;21864:30;;21903:33;21931:4;21923:6;21903:33;:::i;:::-;21813:129;;;:::o;21948:75::-;21981:6;22014:2;22008:9;21998:19;;21948:75;:::o;22029:307::-;22090:4;22180:18;22172:6;22169:30;22166:56;;;22202:18;;:::i;:::-;22166:56;22240:29;22262:6;22240:29;:::i;:::-;22232:37;;22324:4;22318;22314:15;22306:23;;22029:307;;;:::o;22342:98::-;22393:6;22427:5;22421:12;22411:22;;22342:98;;;:::o;22446:147::-;22547:11;22584:3;22569:18;;22446:147;;;;:::o;22599:169::-;22683:11;22717:6;22712:3;22705:19;22757:4;22752:3;22748:14;22733:29;;22599:169;;;;:::o;22774:305::-;22814:3;22833:20;22851:1;22833:20;:::i;:::-;22828:25;;22867:20;22885:1;22867:20;:::i;:::-;22862:25;;23021:1;22953:66;22949:74;22946:1;22943:81;22940:107;;;23027:18;;:::i;:::-;22940:107;23071:1;23068;23064:9;23057:16;;22774:305;;;;:::o;23085:191::-;23125:4;23145:20;23163:1;23145:20;:::i;:::-;23140:25;;23179:20;23197:1;23179:20;:::i;:::-;23174:25;;23218:1;23215;23212:8;23209:34;;;23223:18;;:::i;:::-;23209:34;23268:1;23265;23261:9;23253:17;;23085:191;;;;:::o;23282:96::-;23319:7;23348:24;23366:5;23348:24;:::i;:::-;23337:35;;23282:96;;;:::o;23384:104::-;23429:7;23458:24;23476:5;23458:24;:::i;:::-;23447:35;;23384:104;;;:::o;23494:90::-;23528:7;23571:5;23564:13;23557:21;23546:32;;23494:90;;;:::o;23590:77::-;23627:7;23656:5;23645:16;;23590:77;;;:::o;23673:126::-;23710:7;23750:42;23743:5;23739:54;23728:65;;23673:126;;;:::o;23805:77::-;23842:7;23871:5;23860:16;;23805:77;;;:::o;23888:86::-;23923:7;23963:4;23956:5;23952:16;23941:27;;23888:86;;;:::o;23980:154::-;24064:6;24059:3;24054;24041:30;24126:1;24117:6;24112:3;24108:16;24101:27;23980:154;;;:::o;24140:307::-;24208:1;24218:113;24232:6;24229:1;24226:13;24218:113;;;24317:1;24312:3;24308:11;24302:18;24298:1;24293:3;24289:11;24282:39;24254:2;24251:1;24247:10;24242:15;;24218:113;;;24349:6;24346:1;24343:13;24340:101;;;24429:1;24420:6;24415:3;24411:16;24404:27;24340:101;24189:258;24140:307;;;:::o;24453:281::-;24536:27;24558:4;24536:27;:::i;:::-;24528:6;24524:40;24666:6;24654:10;24651:22;24630:18;24618:10;24615:34;24612:62;24609:88;;;24677:18;;:::i;:::-;24609:88;24717:10;24713:2;24706:22;24496:238;24453:281;;:::o;24740:100::-;24779:7;24808:26;24828:5;24808:26;:::i;:::-;24797:37;;24740:100;;;:::o;24846:79::-;24885:7;24914:5;24903:16;;24846:79;;;:::o;24931:94::-;24970:7;24999:20;25013:5;24999:20;:::i;:::-;24988:31;;24931:94;;;:::o;25031:79::-;25070:7;25099:5;25088:16;;25031:79;;;:::o;25116:180::-;25164:77;25161:1;25154:88;25261:4;25258:1;25251:15;25285:4;25282:1;25275:15;25302:180;25350:77;25347:1;25340:88;25447:4;25444:1;25437:15;25471:4;25468:1;25461:15;25488:117;25597:1;25594;25587:12;25611:117;25720:1;25717;25710:12;25734:117;25843:1;25840;25833:12;25857:117;25966:1;25963;25956:12;25980:102;26021:6;26072:2;26068:7;26063:2;26056:5;26052:14;26048:28;26038:38;;25980:102;;;:::o;26088:94::-;26121:8;26169:5;26165:2;26161:14;26140:35;;26088:94;;;:::o;26188:158::-;26328:10;26324:1;26316:6;26312:14;26305:34;26188:158;:::o;26352:170::-;26492:22;26488:1;26480:6;26476:14;26469:46;26352:170;:::o;26528:225::-;26668:34;26664:1;26656:6;26652:14;26645:58;26737:8;26732:2;26724:6;26720:15;26713:33;26528:225;:::o;26759:164::-;26899:16;26895:1;26887:6;26883:14;26876:40;26759:164;:::o;26929:163::-;27069:15;27065:1;27057:6;27053:14;27046:39;26929:163;:::o;27098:166::-;27238:18;27234:1;27226:6;27222:14;27215:42;27098:166;:::o;27270:162::-;27410:14;27406:1;27398:6;27394:14;27387:38;27270:162;:::o;27438:182::-;27578:34;27574:1;27566:6;27562:14;27555:58;27438:182;:::o;27626:171::-;27766:23;27762:1;27754:6;27750:14;27743:47;27626:171;:::o;27803:175::-;27943:27;27939:1;27931:6;27927:14;27920:51;27803:175;:::o;27984:179::-;28124:31;28120:1;28112:6;28108:14;28101:55;27984:179;:::o;28169:174::-;28309:26;28305:1;28297:6;28293:14;28286:50;28169:174;:::o;28349:155::-;28489:7;28485:1;28477:6;28473:14;28466:31;28349:155;:::o;28510:181::-;28650:33;28646:1;28638:6;28634:14;28627:57;28510:181;:::o;28697:122::-;28770:24;28788:5;28770:24;:::i;:::-;28763:5;28760:35;28750:63;;28809:1;28806;28799:12;28750:63;28697:122;:::o;28825:138::-;28906:32;28932:5;28906:32;:::i;:::-;28899:5;28896:43;28886:71;;28953:1;28950;28943:12;28886:71;28825:138;:::o;28969:116::-;29039:21;29054:5;29039:21;:::i;:::-;29032:5;29029:32;29019:60;;29075:1;29072;29065:12;29019:60;28969:116;:::o;29091:122::-;29164:24;29182:5;29164:24;:::i;:::-;29157:5;29154:35;29144:63;;29203:1;29200;29193:12;29144:63;29091:122;:::o;29219:::-;29292:24;29310:5;29292:24;:::i;:::-;29285:5;29282:35;29272:63;;29331:1;29328;29321:12;29272:63;29219:122;:::o;29347:118::-;29418:22;29434:5;29418:22;:::i;:::-;29411:5;29408:33;29398:61;;29455:1;29452;29445:12;29398:61;29347:118;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1562800","executionCost":"infinite","totalCost":"infinite"},"external":{"VerifyTRXMessage(bytes32,uint8,bytes32,bytes32)":"infinite","addToEscrow()":"infinite","msgHashes(bytes)":"infinite","owner()":"2617","pause()":"infinite","paused()":"2502","redeemPaymentFromEscrow(uint256,uint256,address,bytes)":"infinite","removeFromEscrow(uint256)":"infinite","renounceOwnership()":"30615","splitSignature(bytes)":"infinite","transferOwnership(address)":"30985","unpause()":"infinite","withdrawTRC20(address,uint256,address)":"infinite","withdrawTRX(uint256,address)":"infinite"},"internal":{"_getHash(uint256,uint256,address)":"infinite"}},"methodIdentifiers":{"VerifyTRXMessage(bytes32,uint8,bytes32,bytes32)":"d0466d52","addToEscrow()":"6f3c00ff","msgHashes(bytes)":"a4af9d61","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","redeemPaymentFromEscrow(uint256,uint256,address,bytes)":"d3259a3c","removeFromEscrow(uint256)":"53ff0928","renounceOwnership()":"715018a6","splitSignature(bytes)":"a7bb5803","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","withdrawTRC20(address,uint256,address)":"2801273b","withdrawTRX(uint256,address)":"7aea7b1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessage\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"VerifyTRXMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"msgHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeemPaymentFromEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeFromEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTRC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTRX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/EcoMarket.sol\":\"EcoMarket\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/all/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Strings.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x27fbb7a2b9ca955ae2e571964420b7360e266458173fdeebee74faa021d9dcd5\",\"license\":\"MIT\"},\"contracts/all/EcoMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./ECDSA.sol\\\";\\n\\npragma solidity ^0.8.7;\\n\\ncontract EcoMarket is Pausable, Ownable, ReentrancyGuard {\\n\\n    using ECDSA for bytes32;\\n\\n    //Track used msgHashes to prevent replay\\n    mapping(bytes => bool) public msgHashes;\\n\\n    mapping(address => uint256) private balances;\\n\\n    function redeemPaymentFromEscrow(\\n        uint256 amount,\\n        uint256 nonce,\\n        address company,\\n        bytes memory signature\\n    ) public whenNotPaused nonReentrant {\\n        require(address(this).balance > amount, \\\"Insufficient balance!\\\");\\n        require(msg.sender != company, \\\"Not allowed!\\\");\\n        require(msgHashes[signature] == false, \\\"Invalid!\\\");\\n\\n        bytes32 msgHash = _getHash(amount, nonce, company);\\n\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n        address signer = VerifyTRXMessage(msgHash, v, r, s);\\n        \\n        require(signer == company, \\\"Unauthorized!\\\");\\n\\n        msgHashes[signature] = true;\\n        balances[company] -= amount;\\n\\n        require(payable(msg.sender).send(amount), \\\"Error\\\");\\n    }\\n\\n    function addToEscrow() public payable whenNotPaused {\\n        require(msg.value > 0, \\\"Invalid amount\\\");\\n\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    function removeFromEscrow(uint256 amount) public whenNotPaused {\\n        require(amount > balances[msg.sender], \\\"Invalid amount\\\");\\n        require(address(this).balance > amount, \\\"Insufficient balance!\\\");\\n\\n        balances[msg.sender] -= amount;\\n\\n        require(payable(msg.sender).send(amount), \\\"Error\\\");\\n    }\\n\\n    function _getHash(uint256 amount, uint256 nonce, address company) private view returns (bytes32) {\\n        return keccak256(abi.encodePacked(msg.sender, amount, nonce, company));\\n    }\\n\\n    function VerifyTRXMessage(bytes32 _hashedMessage, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\\n        bytes memory prefix = \\\"\\\\x19TRON Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessage));\\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\\n        return signer;\\n    }\\n    \\n    function splitSignature(bytes memory sig) public pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (r, s, v);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function withdrawTRX(\\n        uint256 amount,\\n        address payable to\\n    ) public onlyOwner whenNotPaused nonReentrant {\\n        require(amount > 0, \\\"EcoMarket: Invalid amount\\\");\\n        require(to.send(amount), \\\"EcoMarket: Not enough balance\\\");\\n    }\\n\\n    function withdrawTRC20(\\n        address tokenAdress,\\n        uint256 amount,\\n        address to\\n    ) public onlyOwner whenNotPaused nonReentrant {\\n        require(amount > 0, \\\"EcoMarket: Invalid amount\\\");\\n            IERC20(tokenAdress).transfer(to, amount);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x54f50be732604b50a29b620f7dc1831afbaf2e7ba30802838e593b79f085b0f4\",\"license\":\"GPL-3.0\"},\"contracts/all/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8d05974d0696b66a852849f05bb1546648ddabac1404d52517976b6d2749c8a5\",\"license\":\"MIT\"},\"contracts/all/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc622fe67e6cfe4cc9f42437c03a6410094e396bb301237af9eace51b006e8e4f\",\"license\":\"MIT\"},\"contracts/all/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x433f28a8634de7cb4e47f55fdc02c280de196e8f8f643f51f8a0b9dd59135fcd\",\"license\":\"MIT\"},\"contracts/all/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\",\"keccak256\":\"0x7b181ae53796d972376e301fe5bc67edb8b6f5c0b79182ae85d7deece45191fe\",\"license\":\"MIT\"},\"contracts/all/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x734db20dbbfaf937e6925ed1d6f35bd3eb3264f5080eee8433966a35377c55b1\",\"license\":\"MIT\"},\"contracts/all/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x340d9ad36f6ce25fcd20f4b29820f0b116452e675f827e0313fa07ab5170aa11\",\"license\":\"MIT\"},\"contracts/all/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SignedMath.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x5a1ee005ab149d5bfd739b90e60857000d7cc7787a91042691c92348021191b9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1824,"contract":"contracts/all/EcoMarket.sol:EcoMarket","label":"_paused","offset":0,"slot":"0","type":"t_bool"},{"astId":1702,"contract":"contracts/all/EcoMarket.sol:EcoMarket","label":"_owner","offset":1,"slot":"0","type":"t_address"},{"astId":1924,"contract":"contracts/all/EcoMarket.sol:EcoMarket","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":406,"contract":"contracts/all/EcoMarket.sol:EcoMarket","label":"msgHashes","offset":0,"slot":"2","type":"t_mapping(t_bytes_memory_ptr,t_bool)"},{"astId":410,"contract":"contracts/all/EcoMarket.sol:EcoMarket","label":"balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_memory_ptr":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes_memory_ptr,t_bool)":{"encoding":"mapping","key":"t_bytes_memory_ptr","label":"mapping(bytes => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8d05974d0696b66a852849f05bb1546648ddabac1404d52517976b6d2749c8a5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/Math.sol":{"Math":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff10df9615e91619f9913ab989217fd49e4a79220ef18ef626017e9268ce9ed64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF10DF9615E91619F9913AB989217FD49 0xE4 0xA7 SWAP3 KECCAK256 0xEF XOR 0xEF PUSH3 0x6017E9 0x26 DUP13 0xE9 0xED PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"58:12582:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff10df9615e91619f9913ab989217fd49e4a79220ef18ef626017e9268ce9ed64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF10DF9615E91619F9913AB989217FD49 0xE4 0xA7 SWAP3 KECCAK256 0xEF XOR 0xEF PUSH3 0x6017E9 0x26 DUP13 0xE9 0xED PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"58:12582:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc622fe67e6cfe4cc9f42437c03a6410094e396bb301237af9eace51b006e8e4f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/all/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x433f28a8634de7cb4e47f55fdc02c280de196e8f8f643f51f8a0b9dd59135fcd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1702,"contract":"contracts/all/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/Pausable.sol":{"Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/all/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\",\"keccak256\":\"0x7b181ae53796d972376e301fe5bc67edb8b6f5c0b79182ae85d7deece45191fe\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1824,"contract":"contracts/all/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x734db20dbbfaf937e6925ed1d6f35bd3eb3264f5080eee8433966a35377c55b1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1924,"contract":"contracts/all/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c9563b42ed569b151c58881757faa5f145cda87a6b981775107e6cc3489973764736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 SWAP6 PUSH4 0xB42ED569 0xB1 MLOAD 0xC5 DUP9 DUP2 PUSH22 0x7FAA5F145CDA87A6B981775107E6CC3489973764736F PUSH13 0x63430008070033000000000000 ","sourceMap":"58:1047:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c9563b42ed569b151c58881757faa5f145cda87a6b981775107e6cc3489973764736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 SWAP6 PUSH4 0xB42ED569 0xB1 MLOAD 0xC5 DUP9 DUP2 PUSH22 0x7FAA5F145CDA87A6B981775107E6CC3489973764736F PUSH13 0x63430008070033000000000000 ","sourceMap":"58:1047:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x340d9ad36f6ce25fcd20f4b29820f0b116452e675f827e0313fa07ab5170aa11\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/all/Strings.sol":{"Strings":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd76b86978714eba20b1878426aadc091d4d34ec08a395e230110743b81ff41464736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD PUSH23 0xB86978714EBA20B1878426AADC091D4D34EC08A395E230 GT SMOD NUMBER 0xB8 0x1F DELEGATECALL EQ PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"107:2559:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd76b86978714eba20b1878426aadc091d4d34ec08a395e230110743b81ff41464736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD PUSH23 0xB86978714EBA20B1878426AADC091D4D34EC08A395E230 GT SMOD NUMBER 0xB8 0x1F DELEGATECALL EQ PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"107:2559:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/all/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/all/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc622fe67e6cfe4cc9f42437c03a6410094e396bb301237af9eace51b006e8e4f\",\"license\":\"MIT\"},\"contracts/all/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x340d9ad36f6ce25fcd20f4b29820f0b116452e675f827e0313fa07ab5170aa11\",\"license\":\"MIT\"},\"contracts/all/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SignedMath.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x5a1ee005ab149d5bfd739b90e60857000d7cc7787a91042691c92348021191b9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}